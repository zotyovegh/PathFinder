{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/mazes/animations.js","Algorithms/mazes/default.js","Algorithms/mazes/prim.js","Algorithms/mazes/iterativeDF.js","Algorithms/mazes/recursiveDF.js","Algorithms/mazes/aldousBroder.js","Algorithms/mazes/kruskal.js","Algorithms/mazes/wilson.js","Algorithms/searchers/animations.js","Algorithms/searchers/dijsktra.js","Algorithms/searchers/astar.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","visited","previous","f","g","h","neighbors","isWall","clearInfinityVariables","push","direction","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","visualizeOnWalledGrid","path","setTimeout","length","a","currentPath","isOptimalPath","Promise","r","getRandomMazedGrid","numberOfCells","wallAmount","Math","floor","random","visualizeRandom","getNeighboringWalls","wallPairs","neighbor","takeRandomPair","position","pair","splice","takeLastCell","cellsWithUnvisitedNeighbors","getNeighboringCells","neighboringUnvisitedPairs","recursiveMaze","originalGrid","JSON","parse","stringify","recursion","currentCell","randomPair","aldousBroderMaze","unvisitedCells","visualizationList","current","filter","item","visualizeABMaze","kruskalMaze","idCounter","validWalls","map","Map","set","getSurroundingCells","array","temp","shuffleArray","wall","first","get","second","forEach","value","key","includes","wilsonMaze","newPath","takeRandomCell","aim","nextCell","removeCycle","visualize","clearDirections","animatePathSlow","cellsInOrder","previousVisualization","animatePathFast","getUnvisitedNeighbors","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","DoAnimation","visitedCells","speed","animateSlow","animateFast","astar","startCell","optimized","findNeighbors","openSet","cameFrom","allSet","heuristic","console","log","eliminateFromSet","k","tentative_gScore","dScore","slice","cell1","cell2","SQRT2","abs","sqrt","closedSet","animateAstarSlow","animateAstarFast","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","previousRow","sort","shift","dijkstra","diagonalVisualization","optimizedVisualization","currentMaze","handleAlgoChange","bind","handleButtonChange","handleMazeChange","event","this","target","currentPair","primMaze","iterativeMaze","index","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","hidden","Component","App","getPosition","parameter","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.99e4af4a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  }else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.visited = false;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n        direction: \"\",\r\n        //TODO: ASTAR scenario (this variables shall be handled differently later)\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n    \r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nexport function visualizeOnWalledGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeRandom(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeABMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  var previous = null;\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[path.length - 1]);\r\n        return;\r\n      }\r\n      if (previous !== null) {\r\n        if (previous.isWall) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", previous);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", previous);\r\n        }\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", path[i]);\r\n        previous = path[i];\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport async function visualize(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  //console.log(path);\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      return;\r\n    }\r\n    var currentPath = path[i][0];\r\n\r\n    var isOptimalPath = path[i][1];\r\n    if (!isOptimalPath) {\r\n      for (let j = currentPath.length - 1; j > 0; j--) {\r\n        if (!currentPath[j].end && !currentPath[j].start) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", currentPath[j]);\r\n        }\r\n        if (currentPath[j] !== currentPath.length - 1) {\r\n          await new Promise((r) => setTimeout(r, 5));\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = 0; j < currentPath.length; j++) {\r\n      if (!currentPath[j].end && !currentPath[j].start) {\r\n        if (!isOptimalPath) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", currentPath[j]);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", currentPath[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isOptimalPath) {\r\n      await new Promise((r) => setTimeout(r, 500));\r\n    }\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nimport { visualizeRandom } from \"../mazes/animations\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  var path = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n      path.push(cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeRandom(grid, path);\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    wallPairs.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    wallPairs.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    wallPairs.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    wallPairs.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function iterativeMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  var cellsWithUnvisitedNeighbors = [];\r\n  cellsWithUnvisitedNeighbors.push(currentCell);\r\n\r\n  while (!!cellsWithUnvisitedNeighbors.length) {\r\n    currentCell = takeLastCell(cellsWithUnvisitedNeighbors);\r\n    var neighboringUnvisitedPairs = getNeighboringCells(currentCell, grid);\r\n    if (neighboringUnvisitedPairs.length > 0) {\r\n      cellsWithUnvisitedNeighbors.push(currentCell);\r\n      var randomPair =\r\n        neighboringUnvisitedPairs[\r\n          Math.floor(Math.random() * neighboringUnvisitedPairs.length)\r\n        ];\r\n      randomPair[0].isWall = false;\r\n      randomPair[1].isWall = false;\r\n      randomPair[1].visited = true;\r\n      path.push(randomPair[0]);\r\n      path.push(randomPair[1]);\r\n      cellsWithUnvisitedNeighbors.push(randomPair[1]);\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction takeLastCell(cellsWithUnvisitedNeighbors) {\r\n  var position = cellsWithUnvisitedNeighbors.length - 1;\r\n  var cell = cellsWithUnvisitedNeighbors[position];\r\n  cellsWithUnvisitedNeighbors.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function recursiveMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  recursion(grid, currentCell, path);\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  //visualization\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction recursion(grid, currentCell, path) {\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  currentCell.neighbors = getNeighboringCells(currentCell, grid);\r\n  while (currentCell.neighbors.length > 0) {\r\n    var position = Math.floor(Math.random() * currentCell.neighbors.length);\r\n    var randomPair = currentCell.neighbors[position];\r\n    currentCell.neighbors.splice(position, 1);\r\n    if (!randomPair[1].visited) {\r\n      randomPair[0].isWall = false;\r\n      path.push(randomPair[0]);\r\n      recursion(grid, randomPair[1], path);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import { visualizeABMaze } from \"../mazes/animations\";\r\nimport {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\n\r\nexport function aldousBroderMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var unvisitedCells = [];\r\n  var visualizationList = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  var current = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  current.visited = true;\r\n  current.isWall = false;\r\n\r\n  while (!!unvisitedCells.length) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n    visualizationList.push(neighbor[0]);\r\n    visualizationList.push(neighbor[1]);\r\n    if (!neighbor[1].visited) {\r\n      neighbor[0].isWall = false;\r\n      neighbor[1].isWall = false;\r\n      unvisitedCells = unvisitedCells.filter(\r\n        (item) => item.id !== neighbor[1].id\r\n      );\r\n      neighbor[1].visited = true;\r\n    }\r\n    current = neighbor[1];\r\n  }\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeABMaze(grid, visualizationList);\r\n}\r\n\r\n/*function takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  return cell;\r\n}*/\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function kruskalMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var idCounter = 0;\r\n  var validWalls = [];\r\n  var map = new Map();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        //CELLS\r\n        map.set(cell, idCounter++);\r\n      } else if (cell.row % 2 === 1 || cell.col % 2 === 1) {\r\n        if (\r\n          cell.row !== 0 &&\r\n          cell.col !== 0 &&\r\n          cell.row !== grid.length - 1 &&\r\n          cell.col !== grid[0].length - 1\r\n        ) {\r\n          //WALLS\r\n          getSurroundingCells(cell, grid);\r\n          validWalls.push(cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shuffleArray(validWalls);\r\n\r\n  for (const wall of validWalls) {\r\n    const first = map.get(wall.neighbors[0]);\r\n    const second = map.get(wall.neighbors[1]);\r\n    if (first !== second) {\r\n      map.forEach((value, key) => {\r\n        if (value === second) {\r\n          map.set(key, first);\r\n        }\r\n      });\r\n\r\n      wall.neighbors[0].isWall = false;\r\n      wall.isWall = false;\r\n      wall.neighbors[1].isWall = false;\r\n\r\n      if (!path.includes(wall.neighbors[0])) path.push(wall.neighbors[0]);\r\n      if (!path.includes(wall)) path.push(wall);\r\n      if (!path.includes(wall.neighbors[1])) path.push(wall.neighbors[1]);\r\n    }\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getSurroundingCells(wall, grid) {\r\n  var { col, row } = wall;\r\n  if (wall.row % 2 === 1) {\r\n    wall.neighbors.push(grid[row][col + 1]);\r\n    wall.neighbors.push(grid[row][col - 1]);\r\n  } else {\r\n    wall.neighbors.push(grid[row - 1][col]);\r\n    wall.neighbors.push(grid[row + 1][col]);\r\n  }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualize } from \"../mazes/animations\";\r\nexport function wilsonMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var unvisitedCells = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n  var newPath = [];\r\n  while (unvisitedCells.length >= 1) {\r\n    var start = takeRandomCell(unvisitedCells);\r\n    var aim = grid[1][1];\r\n    newPath = [];\r\n    var nextCell = start;\r\n    newPath.push(nextCell);\r\n    while (nextCell !== aim) {\r\n      var newCell =\r\n        nextCell.neighbors[\r\n          Math.floor(Math.random() * nextCell.neighbors.length)\r\n        ];\r\n\r\n      if (nextCell.visited) {\r\n        aim = nextCell;\r\n      } else {\r\n        nextCell.direction = newCell[2];\r\n        nextCell = newCell[1];\r\n        newPath.push(newCell[0]);\r\n        newPath.push(newCell[1]);\r\n      }\r\n    }\r\n    if (newPath.length > 1) {\r\n      path.push([newPath, false]);\r\n    }\r\n    \r\n    removeCycle(nextCell, start, aim, grid, path);\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualize(grid, path);\r\n}\r\nfunction clearDirections(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.direction = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  unvisitedCells.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction removeCycle(nextCell, start, aim, grid, path) {\r\n  var newPath = [];\r\n  nextCell = start;\r\n  nextCell.visited = true;\r\n  nextCell.isWall = false;\r\n  newPath.push(nextCell);\r\n\r\n  while (nextCell !== aim) {\r\n    var { col, row } = nextCell;\r\n    if (nextCell.direction === \"UP\") {\r\n      grid[row - 1][col].isWall = false;\r\n      grid[row - 2][col].isWall = false;\r\n      grid[row - 2][col].visited = true;\r\n      nextCell = grid[row - 2][col];\r\n      newPath.push(grid[row - 1][col]);\r\n      newPath.push(grid[row - 2][col]);\r\n    } else if (nextCell.direction === \"DOWN\") {\r\n      grid[row + 1][col].isWall = false;\r\n      grid[row + 2][col].isWall = false;\r\n      grid[row + 2][col].visited = true;\r\n      nextCell = grid[row + 2][col];\r\n      newPath.push(grid[row + 1][col]);\r\n      newPath.push(grid[row + 2][col]);\r\n    } else if (nextCell.direction === \"RIGHT\") {\r\n      grid[row][col + 1].isWall = false;\r\n      grid[row][col + 2].isWall = false;\r\n      grid[row][col + 2].visited = true;\r\n      nextCell = grid[row][col + 2];\r\n      newPath.push(grid[row][col + 1]);\r\n      newPath.push(grid[row][col + 2]);\r\n    } else if (nextCell.direction === \"LEFT\") {\r\n      grid[row][col - 1].isWall = false;\r\n      grid[row][col - 2].isWall = false;\r\n      grid[row][col - 2].visited = true;\r\n      nextCell = grid[row][col - 2];\r\n      newPath.push(grid[row][col - 1]);\r\n      newPath.push(grid[row][col - 2]);\r\n    }\r\n  }\r\n  if (newPath.length > 1) {\r\n    path.push([newPath, true]);\r\n  }\r\n\r\n  clearDirections(grid);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col], \"UP\"]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2], \"RIGHT\"]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col], \"DOWN\"]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2], \"LEFT\"]);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nimport { clearVisitedCells } from \"../cleaning\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}","import { animateFast, animateSlow } from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];    \r\n    if (currentCell === endCell) {\r\n      console.log(endCell.end);\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { iterativeMaze } from \"../Algorithms/mazes/iterativeDF\";\r\nimport { recursiveMaze } from \"../Algorithms/mazes/recursiveDF\";\r\nimport { aldousBroderMaze } from \"../Algorithms/mazes/aldousBroder\";\r\nimport { kruskalMaze } from \"../Algorithms/mazes/kruskal\";\r\nimport { wilsonMaze } from \"../Algorithms/mazes/wilson\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\n\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      currentMaze: \"default\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: false,\r\n      optimizedVisualization: true,\r\n    };\r\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\r\n    this.handleButtonChange = this.handleButtonChange.bind(this);\r\n    this.handleMazeChange = this.handleMazeChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleAlgoChange(event) {\r\n    this.setState({ currentAlg: event.target.value });\r\n  }\r\n  handleButtonChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleMazeChange(event) {\r\n    if (event.target.value === \"random\") {\r\n      getRandomMazedGrid(this.state.grid);\r\n    } else if (event.target.value === \"prim\") {\r\n      primMaze(this.state.grid);\r\n    } else if (event.target.value === \"iterative\") {\r\n      iterativeMaze(this.state.grid);\r\n    } else if (event.target.value === \"recursive\") {\r\n      recursiveMaze(this.state.grid);\r\n    } else if (event.target.value === \"aldousBroder\") {\r\n      aldousBroderMaze(this.state.grid);\r\n    } else if (event.target.value === \"kruskal\") {\r\n      kruskalMaze(this.state.grid);\r\n    }else if (event.target.value === \"wilson\") {\r\n      wilsonMaze(this.state.grid);\r\n    }\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleAlgoChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <select\r\n          value={this.state.currentMaze}\r\n          onChange={this.handleMazeChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"default\" disabled hidden>\r\n            Mazes\r\n          </option>\r\n          <option value=\"random\">Random</option>\r\n          <option value=\"prim\">Prim</option>\r\n          <option value=\"iterative\">Iterative Depth-first</option>\r\n          <option value=\"recursive\">Recursive Depth-first</option>\r\n          <option value=\"aldousBroder\">Aldous-Broder</option>\r\n          <option value=\"kruskal\">Kruskal</option>\r\n          <option value=\"wilson\">Wilson</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n    return position % 2 === 0 ? position + 1 : position;\r\n    // return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}