{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/mazes/animations.js","Algorithms/mazes/default.js","Algorithms/mazes/prim.js","Algorithms/mazes/iterativeDF.js","Algorithms/mazes/recursiveDF.js","Algorithms/mazes/aldousBroder.js","Algorithms/mazes/kruskal.js","Algorithms/mazes/wilson.js","Algorithms/mazes/recursiveDivision.js","Algorithms/mazes/basicHorizontal.js","Algorithms/mazes/basicVertical.js","Algorithms/mazes/binaryTree.js","Algorithms/mazes/eller.js","Algorithms/searchers/animations/standardAnimations.js","Algorithms/searchers/dijkstra/dijkstraStandMethods.js","Algorithms/searchers/animations/bidirectionalAnim.js","Algorithms/searchers/dijkstra/dijkstraBidMethods.js","Algorithms/searchers/animations/astarAnim.js","Algorithms/searchers/animations/astarBidirectionalAnim.js","Algorithms/searchers/astar/astarMethods.js","Algorithms/searchers/depthFirst.js","Algorithms/searchers/breadthFirst.js","Grid/index.js","Algorithms/searchers/dijkstra/dijsktraBidirectional.js","Algorithms/searchers/dijkstra/dijkstraStandard.js","Algorithms/searchers/astar/astarBidirectional.js","Algorithms/searchers/astar/astarStandard.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","idSec","distanceSec","visited","visitedSec","previous","previousSec","direction","directionSec","f","fSec","g","gSec","h","hSec","neighbors","isWall","clearInfinityVariables","push","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","visualizeOnWalledGrid","path","a","length","Promise","r","setTimeout","currentPath","isOptimalPath","aim","visualizeOnEmptyGrid","getRandomMazedGrid","numberOfCells","wallAmount","Math","floor","random","visualizeRandom","getNeighboringWalls","wallPairs","neighbor","takeRandomPair","position","pair","splice","takeLastCell","cellsWithUnvisitedNeighbors","getNeighboringCells","neighboringUnvisitedPairs","recursiveMaze","originalGrid","JSON","parse","stringify","recursion","currentCell","randomPair","aldousBroderMaze","unvisitedCells","visualizationList","current","filter","item","visualizeABMaze","kruskalMaze","idCounter","validWalls","map","Map","set","getSurroundingCells","array","temp","shuffleArray","wall","first","get","second","forEach","value","key","includes","wilsonMaze","newPath","takeRandomCell","getRandomCell","originalAim","nextCell","removeCycle","visualizeWilson","clearDirections","recursiveDivision","middle","leftIndex","rightIndex","drawEdges","topLeft","topRight","bottomLeft","bottomRight","width","height","randomPosition","getMiddleLine","getRandomPosition","verticalLeft","verticalRight","horizontalTop","horizontalBottom","reference","half","ceil","size","num","basicHorizontal","exc","basicVertical","binaryTreeAlg","updateCells","getDirection","param1","param2","some","sideMove","remove","isVisited","animateSlow","visitedCells","cellsInOrder","animatePathSlow","previousVisualization","animateFast","animatePathFast","getUnvisitedNeighbors","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","DoAnimation","speed","main","sec","animateBidirectionalPathSlow","animateBidirectionalPathFast","getMainUnvisitedNeighbors","getSecUnvisitedNeighbors","addNeighbor","DoBidirectionalAnimation","mainCells","secondaryCells","meetingCell","reformatId","cellMain","cellSec","getCellsInOrderBidirectional","bidirectionalSlow","bidirectionalFast","allSet","animateAstarPathSlow","openSet","closedSet","k","animateAstarPathFast","openSetMain","closedSetMain","openSetSec","closedSetSec","dScore","cell1","cell2","optimized","SQRT2","heuristic","abs","sqrt","findNeighbors","eliminateFromSet","animateAstarSlow","animateAstarFast","allSetMain","allSetSec","intersector","animateAstarBidirectionalSlow","animateAstarBidirectionalFast","Grid","isMouseDown","isStartOn","isEndOn","slice","startCell","currentAlg","bidirectionalVisualization","isFinished","idMain","unvisitedCellsMain","unvisitedCellsSec","visitedCellsMain","visitedCellsSec","directionMain","previousRowMain","previousRowSec","sort","nextMainCell","shift","nextSecCell","dijkstraBidirectional","diagonalVisualization","previousRow","dijkstraStandard","cameFromMain","cameFromSec","currentMain","currentSec","currentCellMain","currentCellSec","neighborsMain","neighborMain","tentative_gScoreMain","neighborsSec","neighborSec","tentative_gScoreSec","astarBidirectional","optimizedVisualization","cameFrom","tentative_gScore","astarStandard","mainList","pop","depthFirst","breadthFirst","currentMaze","handleAlgoChange","bind","handleButtonChange","handleMazeChange","event","this","target","currentPair","primMaze","iterativeMaze","list","values","counter","x","ellerMaze","index","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","hidden","label","Component","App","getPosition","parameter","getSize","innerHeight","toFixed","innerWidth","title","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5b5ae3f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nimport \"./primary.css\";\r\nimport \"./secondary.css\";\r\nimport \"./tertiary.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.id = 0;\r\n      cell.idSec = 0;\r\n      cell.distance = Infinity;\r\n      cell.distanceSec = Infinity;\r\n      cell.visited = false;\r\n      cell.visitedSec = false;\r\n      cell.previous = null;\r\n      cell.previousSec = null;\r\n      cell.direction = \"\";\r\n      cell.directionSec = \"\";\r\n      cell.f = Infinity;\r\n      cell.fSec = Infinity;\r\n      cell.g = Infinity;\r\n      cell.gSec = Infinity;\r\n      cell.h = Infinity;\r\n      cell.hSec = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.visited = false;\r\n      cell.id = 0;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        idSec: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        neighbors: [],\r\n        isWall: false,\r\n        distance: Infinity,\r\n        distanceSec: Infinity,\r\n        visited: false,\r\n        visitedSec: false,\r\n        previous: null,\r\n        previousSec: null,\r\n        direction: \"\",\r\n        directionSec: \"\",\r\n        f: Infinity,\r\n        fSec: Infinity,\r\n        g: Infinity,\r\n        gSec: Infinity,\r\n        h: Infinity,\r\n        hSec: Infinity,\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { clearVisitedCells } from \"../cleaning\";\r\nimport { visualizeCell } from \"../methods\";\r\nexport async function visualizeOnWalledGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n  \r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n      await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\n\r\nexport function visualizeRandom(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport async function visualizeABMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  var previous = null;\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      visualizeCell(\"cell\", \"cell cell-empty\", path[path.length - 1]);\r\n      clearVisitedCells();\r\n      return;\r\n    }\r\n    if (previous !== null) {\r\n      if (previous.isWall) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", previous);\r\n      } else {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", previous);\r\n      }\r\n    }\r\n    if (!path[i].end && !path[i].start) {\r\n      visualizeCell(\"cell\", \"cell cell-currentSec\", path[i]);\r\n      previous = path[i];\r\n    }\r\n    await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\n\r\nexport async function visualizeWilson(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      clearVisitedCells();\r\n      return;\r\n    }\r\n    var previous = null;\r\n    var currentPath = path[i][0];\r\n    var isOptimalPath = path[i][1];\r\n    var aim = path[i][2] === null ? null : path[i][2];\r\n\r\n    var type =\r\n      aim === null\r\n        ? null\r\n        : document.getElementById(`${\"cell\"}-${aim.row}-${aim.col}`).className;\r\n    if (aim !== null) {\r\n      if (!aim.end && !aim.start) {\r\n        visualizeCell(\"cell\", \"cell cell-previousSec\", aim);\r\n      }\r\n    }\r\n\r\n    if (!isOptimalPath) {\r\n      for (let j = 0; j < currentPath.length; j++) {\r\n        if (previous !== null) {\r\n          visualizeCell(\"cell\", \"cell cell-currentSec\", previous);\r\n        }\r\n\r\n        if (!currentPath[j].end && !currentPath[j].start) {\r\n          visualizeCell(\"cell\", \"cell cell-previousSec\", currentPath[j]);\r\n          previous = currentPath[j];\r\n        }\r\n\r\n        if (currentPath[j] !== currentPath.length - 1) {\r\n          await new Promise((r) => setTimeout(r, 5));\r\n        }\r\n      }\r\n    }\r\n    if (aim !== null) {\r\n      if (!aim.end && !aim.start) {\r\n        if (type === \"cell cell-wall\") {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", aim);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", aim);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = currentPath.length - 1; j >= 0; j--) {\r\n      if (!currentPath[j].end && !currentPath[j].start) {\r\n        if (!isOptimalPath) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", currentPath[j]);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", currentPath[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport async function visualizeOnEmptyGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      clearVisitedCells();\r\n      return;\r\n    }\r\n    if (!path[i].end && !path[i].start) {\r\n      visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n    }\r\n    await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nimport { visualizeRandom } from \"../mazes/animations\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  var path = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.3); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n      path.push(cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeRandom(grid, path);\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    wallPairs.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    wallPairs.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    wallPairs.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    wallPairs.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function iterativeMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  var cellsWithUnvisitedNeighbors = [];\r\n  cellsWithUnvisitedNeighbors.push(currentCell);\r\n\r\n  while (!!cellsWithUnvisitedNeighbors.length) {\r\n    currentCell = takeLastCell(cellsWithUnvisitedNeighbors);\r\n    var neighboringUnvisitedPairs = getNeighboringCells(currentCell, grid);\r\n    if (neighboringUnvisitedPairs.length > 0) {\r\n      cellsWithUnvisitedNeighbors.push(currentCell);\r\n      var randomPair =\r\n        neighboringUnvisitedPairs[\r\n          Math.floor(Math.random() * neighboringUnvisitedPairs.length)\r\n        ];\r\n      randomPair[0].isWall = false;\r\n      randomPair[1].isWall = false;\r\n      randomPair[1].visited = true;\r\n      path.push(randomPair[0]);\r\n      path.push(randomPair[1]);\r\n      cellsWithUnvisitedNeighbors.push(randomPair[1]);\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction takeLastCell(cellsWithUnvisitedNeighbors) {\r\n  var position = cellsWithUnvisitedNeighbors.length - 1;\r\n  var cell = cellsWithUnvisitedNeighbors[position];\r\n  cellsWithUnvisitedNeighbors.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function recursiveMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  recursion(grid, currentCell, path);\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction recursion(grid, currentCell, path) {\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  currentCell.neighbors = getNeighboringCells(currentCell, grid);\r\n  while (currentCell.neighbors.length > 0) {\r\n    var position = Math.floor(Math.random() * currentCell.neighbors.length);\r\n    var randomPair = currentCell.neighbors[position];\r\n    currentCell.neighbors.splice(position, 1);\r\n    if (!randomPair[1].visited) {\r\n      randomPair[0].isWall = false;\r\n      path.push(randomPair[0]);\r\n      recursion(grid, randomPair[1], path);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import { visualizeABMaze } from \"../mazes/animations\";\r\nimport {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\n\r\nexport function aldousBroderMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var unvisitedCells = [];\r\n  var visualizationList = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  var current = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  current.visited = true;\r\n  current.isWall = false;\r\n\r\n  while (!!unvisitedCells.length) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n    visualizationList.push(neighbor[0]);\r\n    visualizationList.push(neighbor[1]);\r\n    if (!neighbor[1].visited) {\r\n      neighbor[0].isWall = false;\r\n      neighbor[1].isWall = false;\r\n      unvisitedCells = unvisitedCells.filter(\r\n        (item) => item.id !== neighbor[1].id\r\n      );\r\n      neighbor[1].visited = true;\r\n    }\r\n    current = neighbor[1];\r\n  }\r\n  clearInfinityVariables(grid);\r\n  \r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeABMaze(grid, visualizationList);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function kruskalMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var idCounter = 0;\r\n  var validWalls = [];\r\n  var map = new Map();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        //CELLS\r\n        map.set(cell, idCounter++);\r\n      } else if (cell.row % 2 === 1 || cell.col % 2 === 1) {\r\n        if (\r\n          cell.row !== 0 &&\r\n          cell.col !== 0 &&\r\n          cell.row !== grid.length - 1 &&\r\n          cell.col !== grid[0].length - 1\r\n        ) {\r\n          //WALLS\r\n          getSurroundingCells(cell, grid);\r\n          validWalls.push(cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shuffleArray(validWalls);\r\n\r\n  for (const wall of validWalls) {\r\n    const first = map.get(wall.neighbors[0]);\r\n    const second = map.get(wall.neighbors[1]);\r\n    if (first !== second) {\r\n      map.forEach((value, key) => {\r\n        if (value === second) {\r\n          map.set(key, first);\r\n        }\r\n      });\r\n\r\n      wall.neighbors[0].isWall = false;\r\n      wall.isWall = false;\r\n      wall.neighbors[1].isWall = false;\r\n\r\n      if (!path.includes(wall.neighbors[0])) path.push(wall.neighbors[0]);\r\n      if (!path.includes(wall)) path.push(wall);\r\n      if (!path.includes(wall.neighbors[1])) path.push(wall.neighbors[1]);\r\n    }\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getSurroundingCells(wall, grid) {\r\n  var { col, row } = wall;\r\n  if (wall.row % 2 === 1) {\r\n    wall.neighbors.push(grid[row][col + 1]);\r\n    wall.neighbors.push(grid[row][col - 1]);\r\n  } else {\r\n    wall.neighbors.push(grid[row - 1][col]);\r\n    wall.neighbors.push(grid[row + 1][col]);\r\n  }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeWilson } from \"../mazes/animations\";\r\nexport function wilsonMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var unvisitedCells = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n  var newPath = [];\r\n  while (unvisitedCells.length >= 1) {\r\n    var start = takeRandomCell(unvisitedCells);\r\n    var aim =\r\n      unvisitedCells.length !== 0 ? getRandomCell(unvisitedCells) : null;\r\n\r\n    var originalAim = aim;\r\n    newPath = [];\r\n    var nextCell = start;\r\n    newPath.push(nextCell);\r\n    while (nextCell !== aim) {\r\n      var newCell =\r\n        nextCell.neighbors[\r\n          Math.floor(Math.random() * nextCell.neighbors.length)\r\n        ];\r\n\r\n      if (nextCell.visited) {\r\n        aim = nextCell;\r\n      } else {\r\n        nextCell.direction = newCell[2];\r\n        nextCell = newCell[1];\r\n        newPath.push(newCell[0]);\r\n        newPath.push(newCell[1]);\r\n      }\r\n    }\r\n    if (newPath.length > 1) {\r\n      path.push([newPath, false, originalAim]);\r\n    }\r\n\r\n    removeCycle(nextCell, start, aim, grid, path, originalAim);\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeWilson(grid, path);\r\n}\r\nfunction clearDirections(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.direction = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  unvisitedCells.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  return cell;\r\n}\r\n\r\nfunction removeCycle(nextCell, start, aim, grid, path, originalAim) {\r\n  var newPath = [];\r\n  nextCell = start;\r\n  nextCell.visited = true;\r\n  nextCell.isWall = false;\r\n  newPath.push(nextCell);\r\n  if (nextCell !== aim) {\r\n    while (nextCell !== aim) {\r\n      var { col, row } = nextCell;\r\n      if (nextCell.direction === \"UP\") {\r\n        grid[row - 1][col].isWall = false;\r\n        grid[row - 2][col].isWall = false;\r\n        grid[row - 2][col].visited = true;\r\n        nextCell = grid[row - 2][col];\r\n        newPath.push(grid[row - 1][col]);\r\n        newPath.push(grid[row - 2][col]);\r\n      } else if (nextCell.direction === \"DOWN\") {\r\n        grid[row + 1][col].isWall = false;\r\n        grid[row + 2][col].isWall = false;\r\n        grid[row + 2][col].visited = true;\r\n        nextCell = grid[row + 2][col];\r\n        newPath.push(grid[row + 1][col]);\r\n        newPath.push(grid[row + 2][col]);\r\n      } else if (nextCell.direction === \"RIGHT\") {\r\n        grid[row][col + 1].isWall = false;\r\n        grid[row][col + 2].isWall = false;\r\n        grid[row][col + 2].visited = true;\r\n        nextCell = grid[row][col + 2];\r\n        newPath.push(grid[row][col + 1]);\r\n        newPath.push(grid[row][col + 2]);\r\n      } else if (nextCell.direction === \"LEFT\") {\r\n        grid[row][col - 1].isWall = false;\r\n        grid[row][col - 2].isWall = false;\r\n        grid[row][col - 2].visited = true;\r\n        nextCell = grid[row][col - 2];\r\n        newPath.push(grid[row][col - 1]);\r\n        newPath.push(grid[row][col - 2]);\r\n      }\r\n    }\r\n  }\r\n  if (newPath.length > 1) {\r\n    path.push([newPath, true, originalAim]);\r\n  }\r\n\r\n  clearDirections(grid);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col], \"UP\"]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2], \"RIGHT\"]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col], \"DOWN\"]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2], \"LEFT\"]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function recursiveDivision(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  recursion(\r\n    grid[1][1],\r\n    grid[1][grid[1].length - 2],\r\n    grid[grid.length - 2][1],\r\n    grid[grid.length - 2][grid[1].length - 2],\r\n    grid,\r\n    path\r\n  );\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n\r\nfunction recursion(topLeft, topRight, bottomLeft, bottomRight, grid, path) {\r\n  var width = topRight.col - topLeft.col + 1;\r\n  var height = bottomLeft.row - topLeft.row + 1;\r\n  if (height < 3 || width < 3) return;\r\n\r\n  var middle = null;\r\n  var randomPosition = null;\r\n\r\n  if (width >= height) {\r\n    //Vertical\r\n    middle = getMiddleLine(width, topLeft.col);\r\n    randomPosition = getRandomPosition(height);\r\n\r\n    for (let i = topLeft.row; i < topLeft.row + height; i++) {\r\n      if (i !== topLeft.row + randomPosition - 1) {\r\n        path.push(grid[i][middle]);\r\n        grid[i][middle].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    verticalLeft(grid, topLeft, bottomLeft, middle, path);\r\n    verticalRight(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    return;\r\n  } else {\r\n    //Horizontal\r\n    middle = getMiddleLine(height, topLeft.row);\r\n    randomPosition = getRandomPosition(width);\r\n    for (let i = topLeft.col; i < topLeft.col + width; i++) {\r\n      if (i !== topLeft.col + randomPosition - 1) {\r\n        path.push(grid[middle][i]);\r\n        grid[middle][i].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    horizontalTop(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    horizontalBottom(grid, bottomLeft, bottomRight, middle, path);\r\n    return;\r\n  }\r\n}\r\n\r\nfunction verticalLeft(grid, topLeft, bottomLeft, middle, path) {\r\n  if (\r\n    grid[topLeft.row][middle - 1].col - topLeft.col > 0 &&\r\n    bottomLeft.row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      grid[topLeft.row][middle - 1],\r\n      bottomLeft,\r\n      grid[bottomLeft.row][middle - 1],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction verticalRight(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - grid[topLeft.row][middle + 1].col > 0 &&\r\n    grid[bottomLeft.row][middle + 1].row - grid[topLeft.row][middle + 1].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[topLeft.row][middle + 1],\r\n      topRight,\r\n      grid[bottomLeft.row][middle + 1],\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalTop(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - topLeft.col > 0 &&\r\n    grid[middle - 1][bottomLeft.col].row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      topRight,\r\n      grid[middle - 1][bottomLeft.col],\r\n      grid[middle - 1][bottomRight.col],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalBottom(grid, bottomLeft, bottomRight, middle, path) {\r\n  if (\r\n    grid[middle + 1][bottomRight.col].col -\r\n      grid[middle + 1][bottomLeft.col].col >\r\n      0 &&\r\n    bottomLeft.row - grid[middle + 1][bottomLeft.col].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[middle + 1][bottomLeft.col],\r\n      grid[middle + 1][bottomRight.col],\r\n      bottomLeft,\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getMiddleLine(position, reference) {\r\n  var half = Math.ceil(position / 2);\r\n  half = half % 2 === 0 ? half : half + (Math.random() < 0.5 ? -1 : 1);\r\n  return half + reference - 1;\r\n}\r\n\r\nfunction getRandomPosition(size) {\r\n  var num = Math.floor(Math.random() * (size - 1 + 1)) + 1;\r\n  return num % 2 === 1 ? num : num + (Math.random() < 0.5 ? -1 : 1);\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicHorizontal(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid.length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid[0].length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid[0].length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid[0].length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicVertical(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid[0].length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid.length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid.length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid.length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function binaryTreeAlg(originalGrid, direction) {\r\n  clearWithStatus(\"path\");\r\n \r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  getDirection(direction, grid, path);\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getDirection(direction, grid, path) {\r\n  var id = 0;\r\n  if (direction === \"NorthWest\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"NorthEast\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"East\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthWest\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthEast\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"East\", id);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateCells(grid, current, path, param1, param2, id) {\r\n  current.isWall = false;\r\n  path.push(current);\r\n\r\n  getNeighboringCells(current, grid, param1, param2);\r\n  current.id = id;\r\n  id++;\r\n  if (current.neighbors.length !== 0) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n\r\n    neighbor[0].isWall = false;\r\n    path.push(neighbor[0]);\r\n\r\n    if (!path.some((e) => e.id === neighbor[1].id)) {\r\n      neighbor[1].isWall = false;\r\n      path.push(neighbor[1]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid, param1, param2) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1 && (param1 === \"North\" || param2 === \"North\")) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2 && (param1 === \"East\" || param2 === \"East\")) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2 && (param1 === \"South\" || param2 === \"South\")) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1 && (param1 === \"West\" || param2 === \"West\")) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function ellerMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var list = [];\r\n  var visited = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  var idCounter = 1;\r\n  var currentCell = null;\r\n  for (let i = 1; i < grid.length; i += 2) {\r\n    var map = new Map();\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      if (grid[i][j].id === 0) {\r\n        grid[i][j].id = idCounter;\r\n        idCounter++;\r\n      }\r\n    }\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      currentCell = grid[i][j];\r\n      map.set(currentCell, currentCell.id);\r\n    }\r\n\r\n    //SIDE\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      currentCell = grid[i][j];\r\n      getNeighboringCells(currentCell, grid);\r\n      path.push(currentCell);\r\n      currentCell.isWall = false;\r\n\r\n      if (\r\n        currentCell.neighbors[0] !== null &&\r\n        currentCell.neighbors[0][1].id !== currentCell.id\r\n      ) {\r\n        if (grid.length - 2 === i) {\r\n          sideMove(grid, currentCell, map, path);\r\n        } else if (Math.random() < 0.5) {\r\n          sideMove(grid, currentCell, map, path);\r\n        }\r\n      }\r\n    }\r\n    if (grid.length - 2 !== i) {\r\n      //DOWN\r\n      list = [];\r\n      visited = [];\r\n\r\n      for (let value of map.values()) {\r\n        list.push(value);\r\n      }\r\n\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        currentCell = grid[i][j];\r\n        const id = grid[i][j].id;\r\n        var counter = list.filter((x) => x === id).length;\r\n        if (counter === 1 && !visited.includes(currentCell.id)) {\r\n          path.push(currentCell.neighbors[1][0]);\r\n          currentCell.neighbors[1][0].isWall = false;\r\n          currentCell.neighbors[1][1].id = currentCell.id;\r\n        } else if (counter > 1) {\r\n          if (Math.random() > 0.5) {\r\n            path.push(currentCell.neighbors[1][0]);\r\n            currentCell.neighbors[1][0].isWall = false;\r\n            currentCell.neighbors[1][1].id = currentCell.id;\r\n            remove(list, visited, currentCell.id, true);\r\n          }\r\n          remove(list, visited, currentCell.id, false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction sideMove(grid, currentCell, map, path) {\r\n  path.push(currentCell.neighbors[0][0]);\r\n  currentCell.neighbors[0][0].isWall = false;\r\n  const aim = currentCell.neighbors[0][1].id;\r\n  map.forEach((value, key) => {\r\n    if (value === aim) {\r\n      map.set(key, currentCell.id);\r\n      grid[key.row][key.col].id = currentCell.id;\r\n    }\r\n  });\r\n\r\n  currentCell.neighbors[0][1].id = currentCell.id;\r\n}\r\n\r\nfunction remove(array, visited, item, isVisited) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] === item) {\r\n      if (isVisited) {\r\n        visited.push(item);\r\n      }\r\n\r\n      array.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../../methods\";\r\n\r\nexport async function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      animatePathSlow(cellsInOrder);\r\n      await new Promise((r) => setTimeout(r, 10));\r\n      return;\r\n    }\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    }\r\n    if (cell.end && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-end\", cell);\r\n    }\r\n    if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n    await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\n\r\nasync function animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    if (i === cellsInOrder.length) {\r\n      window.gridComponent.setState({ status: \"finished\" });\r\n      return;\r\n    }\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n    await new Promise((r) => setTimeout(r, 20));\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i < visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (!cell.end && !cell.start && !cell.isWall) {\r\n      visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-visited\", cell);\r\n      }\r\n    } else {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"../animations/standardAnimations\";\r\nimport { getCellsInOrder } from \"../../methods\";\r\n\r\nexport function getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn, id) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nexport function DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../../methods\";\r\n\r\nexport async function bidirectionalSlow(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      animateBidirectionalPathSlow(cellsInOrder);\r\n      await new Promise((r) => setTimeout(r, 10));\r\n      return;\r\n    }\r\n\r\n    if (i < main.length && !main[i].start && !main[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visited-animated\", main[i]);\r\n    }\r\n    if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visitedSecondary-animated\", sec[i]);\r\n    }\r\n    if (window.gridComponent.state.previousVisualization) {\r\n      if (i < main.length) {\r\n        if (!main[i].start) visualizeCell(\"num\", \"num num-visited\", main[i]);\r\n        else visualizeCell(\"num\", \"num num-start\", main[i]);\r\n      }\r\n      if (i < sec.length) {\r\n        if (!sec[i].end) visualizeCell(\"num\", \"num num-visited\", sec[i]);\r\n        else visualizeCell(\"num\", \"num num-end\", sec[i]);\r\n      }\r\n    }\r\n    await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\nexport function bidirectionalFast(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      animateBidirectionalPathFast(cellsInOrder);\r\n    }\r\n\r\n    if (i < main.length && !main[i].start && !main[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visited\", main[i]);\r\n    }\r\n    if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visitedSec\", sec[i]);\r\n    }\r\n    if (window.gridComponent.state.previousVisualization) {\r\n      if (i < main.length) {\r\n        if (!main[i].start) visualizeCell(\"num\", \"num num-visited\", main[i]);\r\n        else visualizeCell(\"num\", \"num num-start\", main[i]);\r\n      }\r\n      if (i < sec.length) {\r\n        if (!sec[i].end) visualizeCell(\"num\", \"num num-visited\", sec[i]);\r\n        else visualizeCell(\"num\", \"num num-end\", sec[i]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function animateBidirectionalPathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    if (i === cellsInOrder.length) {\r\n      window.gridComponent.setState({ status: \"finished\" });\r\n      return;\r\n    }\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-pathThird-animated\", cell);\r\n    }\r\n    await new Promise((r) => setTimeout(r, 20));\r\n  }\r\n}\r\n\r\nfunction animateBidirectionalPathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-pathThird\", cell);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  bidirectionalSlow,\r\n  bidirectionalFast,\r\n} from \"../animations/bidirectionalAnim\";\r\nexport function getMainUnvisitedNeighbors(\r\n  cell,\r\n  grid,\r\n  direction,\r\n  isDiagonalOn,\r\n  category,\r\n  id\r\n) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    Down(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    Up(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n      UpRight(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n  return id;\r\n}\r\n\r\nexport function getSecUnvisitedNeighbors(\r\n  cell,\r\n  grid,\r\n  direction,\r\n  isDiagonalOn,\r\n  category,\r\n  id\r\n) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    Down(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    Up(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n      UpRight(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distanceSec = cell.distanceSec + 1;\r\n    neighbor.previousSec = cell;\r\n    neighbor.idSec = id;\r\n    id++;\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction addNeighbor(cell, neighbors, category) {\r\n  if (category === \"MAIN\" && !cell.visited && cell.previous === null) {\r\n    neighbors.push(cell);\r\n  } else if (\r\n    category === \"SEC\" &&\r\n    !cell.visitedSec &&\r\n    cell.previousSec === null\r\n  ) {\r\n    neighbors.push(cell);\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors, category) {\r\n  if (row > 0) addNeighbor(grid[row - 1][col], neighbors, category);\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors, category) {\r\n  if (col < grid[0].length - 1)\r\n    addNeighbor(grid[row][col + 1], neighbors, category);\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors, category) {\r\n  if (row < grid.length - 1)\r\n    addNeighbor(grid[row + 1][col], neighbors, category);\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors, category) {\r\n  if (col > 0) addNeighbor(grid[row][col - 1], neighbors, category);\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors, category) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors, category) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors, category) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors, category) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nexport function DoBidirectionalAnimation(\r\n  mainCells,\r\n  secondaryCells,\r\n  speed,\r\n  meetingCell\r\n) {\r\n  reformatId(secondaryCells, meetingCell);\r\n  var cellsInOrder = getCellsInOrderBidirectional(meetingCell);\r\n  if (speed === \"slow\") {\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    bidirectionalSlow(mainCells, secondaryCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    bidirectionalFast(mainCells, secondaryCells, cellsInOrder);\r\n  }\r\n}\r\n\r\nfunction reformatId(secondaryCells, meetingCell) {\r\n  for (let i = 0; i < secondaryCells.length; i++) {\r\n    if (\r\n      !secondaryCells[i].start &&\r\n      !secondaryCells[i].end &&\r\n      secondaryCells[i] !== meetingCell\r\n    ) {\r\n      secondaryCells[i].distance = secondaryCells[i].distanceSec;\r\n    }\r\n    if (secondaryCells[i] !== meetingCell && secondaryCells[i].end) {\r\n      secondaryCells[i].distance = 0;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getCellsInOrderBidirectional(meetingCell) {\r\n  var cells = [];\r\n  if (meetingCell !== null) {\r\n    if (\r\n      meetingCell.distance !== Infinity &&\r\n      meetingCell.distanceSec !== Infinity\r\n    ) {\r\n      cells.push(meetingCell);\r\n      let cellMain = meetingCell;\r\n      let cellSec = meetingCell;\r\n      while (cellMain !== null || cellSec !== null) {\r\n        if (cellMain !== null) {\r\n          if (cellMain !== meetingCell) {\r\n            cells.push(cellMain);\r\n          }\r\n          cellMain = cellMain.previous;\r\n        }\r\n        if (cellSec !== null) {\r\n          if (cellSec !== meetingCell) {\r\n            cells.push(cellSec);\r\n          }\r\n          cellSec = cellSec.previousSec;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n","import { visualizeCell } from \"../../methods\";\r\nimport { clearVisitedCells } from \"../../cleaning\";\r\n\r\nexport async function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      animateAstarPathSlow(cellsInOrder, \"cell cell-path-animated\");\r\n      await new Promise((r) => setTimeout(r, 10));\r\n      return;\r\n    }\r\n\r\n    clearVisitedCells();\r\n    var openSet = allSet[i][0];\r\n    var closedSet = allSet[i][1];\r\n\r\n    for (let j = 0; j < closedSet.length; j++) {\r\n      if (!closedSet[j].start && !closedSet[j].end) {\r\n        visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n      }\r\n    }\r\n    for (let k = 0; k < openSet.length; k++) {\r\n      if (!openSet[k].start && !openSet[k].end) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n      }\r\n    }\r\n    if (\r\n      i < allSet.length - 1 &&\r\n      !closedSet[closedSet.length - 1].start &&\r\n      !closedSet[closedSet.length - 1].end\r\n    ) {\r\n      visualizeCell(\r\n        \"cell\",\r\n        \"cell cell-activepath\",\r\n        closedSet[closedSet.length - 1]\r\n      );\r\n    }\r\n    await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n\r\n  animateAstarPathFast(cellsInOrder, \"cell cell-path\");\r\n}\r\n\r\nexport function animateAstarPathFast(cellsInOrder, type) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", type, cell);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function animateAstarPathSlow(cellsInOrder, type) {\r\n  if (cellsInOrder !== null) {\r\n    for (let i = 0; i <= cellsInOrder.length; i++) {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", type, cell);\r\n      }\r\n      await new Promise((r) => setTimeout(r, 20));\r\n    }\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../../cleaning\";\r\nimport { visualizeCell } from \"../../methods\";\r\nimport { animateAstarPathSlow, animateAstarPathFast } from \"./astarAnim\";\r\n\r\nexport async function animateAstarBidirectionalSlow(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      animateAstarPathSlow(cellsInOrder, \"cell cell-pathThird-animated\");\r\n      await new Promise((r) => setTimeout(r, 10));\r\n      return;\r\n    }\r\n\r\n    if (i < main.length && !main[i].start && !main[i].end) {\r\n      var openSetMain = main[i][0];\r\n      var closedSetMain = main[i][1];\r\n      for (let j = 0; j < closedSetMain.length; j++) {\r\n        visualizeCell(\"cell\", \"cell cell-previous\", closedSetMain[j]);\r\n      }\r\n      for (let k = 0; k < openSetMain.length; k++) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", openSetMain[k]);\r\n      }\r\n      if (\r\n        i < main.length - 1 &&\r\n        !closedSetMain[closedSetMain.length - 1].start &&\r\n        !closedSetMain[closedSetMain.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSetMain[closedSetMain.length - 1]\r\n        );\r\n      }\r\n    }\r\n    if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n      var openSetSec = sec[i][0];\r\n      var closedSetSec = sec[i][1];\r\n      for (let j = 0; j < closedSetSec.length; j++) {\r\n        visualizeCell(\"cell\", \"cell cell-previousSec\", closedSetSec[j]);\r\n      }\r\n      for (let k = 0; k < openSetSec.length; k++) {\r\n        visualizeCell(\"cell\", \"cell cell-currentSec\", openSetSec[k]);\r\n      }\r\n      if (\r\n        i < sec.length - 1 &&\r\n        !closedSetSec[closedSetSec.length - 1].start &&\r\n        !closedSetSec[closedSetSec.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepathSec\",\r\n          closedSetSec[closedSetSec.length - 1]\r\n        );\r\n      }\r\n    }\r\n    await new Promise((r) => setTimeout(r, 10));\r\n  }\r\n}\r\n\r\nexport function animateAstarBidirectionalFast(\r\n  allSetMain,\r\n  allSetSec,\r\n  openSetMain,\r\n  openSetSec,\r\n  cellsInOrder\r\n) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSetMain.length; k++) {\r\n    if (!allSetMain[k].start && !allSetMain[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSetMain[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < allSetSec.length; k++) {\r\n    if (!allSetSec[k].start && !allSetSec[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previousSec\", allSetSec[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSetMain.length; k++) {\r\n    if (!openSetMain[k].start && !openSetMain[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSetMain[k]);\r\n    }\r\n  }\r\n\r\n  for (let k = 0; k < openSetSec.length; k++) {\r\n    if (!openSetSec[k].start && !openSetSec[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-currentSec\", openSetSec[k]);\r\n    }\r\n  }\r\n  if (cellsInOrder !== null) {\r\n    animateAstarPathFast(cellsInOrder, \"cell cell-pathThird\");\r\n  }\r\n}\r\n","import { animateAstarSlow, animateAstarFast } from \"../animations/astarAnim\";\r\nimport { getCellsInOrder } from \"../../methods\";\r\nimport { clearVisitedCells } from \"../../cleaning\";\r\nimport {\r\n  animateAstarBidirectionalSlow,\r\n  animateAstarBidirectionalFast,\r\n} from \"../animations/astarBidirectionalAnim\";\r\n\r\nexport function dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nexport function heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport function DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n\r\nexport function DoBidirectionalAnimation(\r\n  allSetMain,\r\n  allSetSec,\r\n  openSetMain,\r\n  openSetSec,\r\n  intersector,\r\n  speed\r\n) {\r\n  var cellsInOrder = null;\r\n  if (intersector !== null) {\r\n    cellsInOrder = getCellsInOrderBidirectional(intersector);\r\n  }\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    animateAstarBidirectionalSlow(allSetMain, allSetSec, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarBidirectionalFast(\r\n      allSetMain,\r\n      allSetSec,\r\n      openSetMain,\r\n      openSetSec,\r\n      cellsInOrder\r\n    );\r\n  }\r\n}\r\n\r\nfunction getCellsInOrderBidirectional(meetingCell) {\r\n  var cells = [];\r\n  cells.push(meetingCell);\r\n  let cellMain = meetingCell;\r\n  let cellSec = meetingCell;\r\n  while (cellMain !== null || cellSec !== null) {\r\n    if (cellMain !== null) {\r\n      if (cellMain !== meetingCell) {\r\n        cells.push(cellMain);\r\n      }\r\n      cellMain = cellMain.previous;\r\n    }\r\n    if (cellSec !== null) {\r\n      if (cellSec !== meetingCell) {\r\n        cells.push(cellSec);\r\n      }\r\n      cellSec = cellSec.previousSec;\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n","import { animateFast, animateSlow } from \"./animations/standardAnimations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nexport function depthFirst(grid, startCell, endCell, speed) {\r\n  clearVisitedCells();\r\n  var mainList = [];\r\n  var visitedCells = [];\r\n  startCell.visited = true;\r\n  mainList.push(startCell);\r\n  visitedCells.push(startCell);\r\n  while (!!mainList.length) {\r\n    const currentCell = mainList.pop();\r\n    currentCell.visited = true;\r\n\r\n    if (currentCell.end === true) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    if (currentCell.isWall && !currentCell.start && !currentCell.end) continue;\r\n    if (!visitedCells.includes(currentCell)) {\r\n      visitedCells.push(currentCell);\r\n    }\r\n\r\n    var neighbors = getUnvisitedNeighbors(currentCell, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].previous = currentCell;\r\n      mainList.push(neighbors[i]);\r\n    }\r\n  }\r\n  DoAnimation(visitedCells, endCell, speed);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  Left(row, col, grid, neighbors);\r\n\r\n  Down(row, col, grid, neighbors);\r\n  Right(row, col, grid, neighbors);\r\n  Up(row, col, grid, neighbors);\r\n\r\n  return neighbors;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"./animations/standardAnimations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nexport function breadthFirst(grid, startCell, endCell, speed) {\r\n  clearVisitedCells();\r\n  var mainList = [];\r\n  var visitedCells = [];\r\n  startCell.visited = true;\r\n  mainList.push(startCell);\r\n  visitedCells.push(startCell);\r\n\r\n  while (!!mainList.length) {\r\n    const currentCell = mainList.shift();\r\n    visitedCells.push(currentCell);\r\n\r\n    if (currentCell.end === true) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    if (currentCell.isWall && !currentCell.start && !currentCell.end) continue;\r\n    var neighbors = getUnvisitedNeighbors(currentCell, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].visited = true;\r\n      neighbors[i].previous = currentCell;\r\n      mainList.push(neighbors[i]);\r\n    }\r\n  }\r\n  DoAnimation(visitedCells, endCell, speed);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  Up(row, col, grid, neighbors);\r\n  Right(row, col, grid, neighbors);\r\n  Down(row, col, grid, neighbors);\r\n  Left(row, col, grid, neighbors);\r\n  return neighbors;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { iterativeMaze } from \"../Algorithms/mazes/iterativeDF\";\r\nimport { recursiveMaze } from \"../Algorithms/mazes/recursiveDF\";\r\nimport { aldousBroderMaze } from \"../Algorithms/mazes/aldousBroder\";\r\nimport { kruskalMaze } from \"../Algorithms/mazes/kruskal\";\r\nimport { wilsonMaze } from \"../Algorithms/mazes/wilson\";\r\nimport { recursiveDivision } from \"../Algorithms/mazes/recursiveDivision\";\r\nimport { basicHorizontal } from \"../Algorithms/mazes/basicHorizontal\";\r\nimport { basicVertical } from \"../Algorithms/mazes/basicVertical\";\r\nimport { binaryTreeAlg } from \"../Algorithms/mazes/binaryTree\";\r\nimport { ellerMaze } from \"../Algorithms/mazes/eller\";\r\nimport { dijkstraStandard } from \"../Algorithms/searchers/dijkstra/dijkstraStandard\";\r\nimport { dijkstraBidirectional } from \"../Algorithms/searchers/dijkstra/dijsktraBidirectional\";\r\nimport { astarStandard } from \"../Algorithms/searchers/astar/astarStandard\";\r\nimport { astarBidirectional } from \"../Algorithms/searchers/astar/astarBidirectional\";\r\nimport { depthFirst } from \"../Algorithms/searchers/depthFirst\";\r\nimport { breadthFirst } from \"../Algorithms/searchers/breadthFirst\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      currentMaze: \"default\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: false,\r\n      optimizedVisualization: true,\r\n      bidirectionalVisualization: true,\r\n    };\r\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\r\n    this.handleButtonChange = this.handleButtonChange.bind(this);\r\n    this.handleMazeChange = this.handleMazeChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleAlgoChange(event) {\r\n    this.setState({ currentAlg: event.target.value });\r\n  }\r\n  handleButtonChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"bidirectional\") {\r\n      this.setState(\r\n        { bidirectionalVisualization: !this.state.bidirectionalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleMazeChange(event) {\r\n    if (event.target.value === \"random\") getRandomMazedGrid(this.state.grid);\r\n    else if (event.target.value === \"prim\") primMaze(this.state.grid);\r\n    else if (event.target.value === \"iterative\") iterativeMaze(this.state.grid);\r\n    else if (event.target.value === \"recursive\") recursiveMaze(this.state.grid);\r\n    else if (event.target.value === \"aldousBroder\")\r\n      aldousBroderMaze(this.state.grid);\r\n    else if (event.target.value === \"kruskal\") kruskalMaze(this.state.grid);\r\n    else if (event.target.value === \"wilson\") wilsonMaze(this.state.grid);\r\n    else if (event.target.value === \"recursiveDivision\")\r\n      recursiveDivision(this.state.grid);\r\n    else if (event.target.value === \"basicHorizontal\")\r\n      basicHorizontal(this.state.grid);\r\n    else if (event.target.value === \"basicVertical\")\r\n      basicVertical(this.state.grid);\r\n    else if (event.target.value === \"eller\") ellerMaze(this.state.grid);\r\n    else if (event.target.value === \"binaryTreeNW\")\r\n      binaryTreeAlg(this.state.grid, \"NorthWest\");\r\n    else if (event.target.value === \"binaryTreeNE\")\r\n      binaryTreeAlg(this.state.grid, \"NorthEast\");\r\n    else if (event.target.value === \"binaryTreeSW\")\r\n      binaryTreeAlg(this.state.grid, \"SouthWest\");\r\n    else if (event.target.value === \"binaryTreeSE\")\r\n      binaryTreeAlg(this.state.grid, \"SouthEast\");\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    if (this.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      if (this.state.bidirectionalVisualization) {\r\n        dijkstraBidirectional(\r\n          grid,\r\n          startCell,\r\n          endCell,\r\n          this.state.diagonalVisualization,\r\n          speed\r\n        );\r\n      } else {\r\n        dijkstraStandard(\r\n          grid,\r\n          startCell,\r\n          endCell,\r\n          this.state.diagonalVisualization,\r\n          speed\r\n        );\r\n      }\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      if (this.state.bidirectionalVisualization) {\r\n        astarBidirectional(\r\n          grid,\r\n          startCell,\r\n          endCell,\r\n          this.state.diagonalVisualization,\r\n          this.state.optimizedVisualization,\r\n          speed\r\n        );\r\n      } else {\r\n        astarStandard(\r\n          grid,\r\n          startCell,\r\n          endCell,\r\n          this.state.diagonalVisualization,\r\n          this.state.optimizedVisualization,\r\n          speed\r\n        );\r\n      }\r\n    } else if (this.state.currentAlg === \"depthFirst\") {\r\n      depthFirst(grid, startCell, endCell, speed);\r\n    } else if (this.state.currentAlg === \"breadthFirst\") {\r\n      breadthFirst(grid, startCell, endCell, speed);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleAlgoChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n          <option value=\"depthFirst\">Depth-First Search</option>\r\n          <option value=\"breadthFirst\">Breadth-First Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Bidirectional\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.bidirectionalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"bidirectional\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <select\r\n          value={this.state.currentMaze}\r\n          onChange={this.handleMazeChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"default\" disabled hidden>\r\n            Mazes\r\n          </option>\r\n          <optgroup label=\"Patterns\">\r\n            <option value=\"random\">Random</option>\r\n            <option value=\"basicHorizontal\">Basic Horizontal</option>\r\n            <option value=\"basicVertical\">Basic Vertical</option>\r\n          </optgroup>\r\n          <optgroup label=\"Algorithms\">\r\n            <option value=\"prim\">Prim</option>\r\n            <option value=\"iterative\">Iterative Depth-first</option>\r\n            <option value=\"recursive\">Recursive Depth-first</option>\r\n            <option value=\"aldousBroder\">Aldous-Broder</option>\r\n            <option value=\"kruskal\">Kruskal</option>\r\n            <option value=\"wilson\">Wilson</option>\r\n            <option value=\"recursiveDivision\">Recursive Division</option>\r\n            <option value=\"eller\">Eller</option>\r\n          </optgroup>\r\n          <optgroup label=\"&nbsp;&nbsp;&nbsp;Binary Tree Algorithm\">\r\n            <option value=\"binaryTreeSE\">&nbsp;&nbsp;&nbsp;South-East</option>\r\n            <option value=\"binaryTreeSW\">&nbsp;&nbsp;&nbsp;South-West</option>\r\n            <option value=\"binaryTreeNE\">&nbsp;&nbsp;&nbsp;North-East</option>\r\n            <option value=\"binaryTreeNW\">&nbsp;&nbsp;&nbsp;North-West</option>\r\n          </optgroup>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import {\r\n  DoBidirectionalAnimation,\r\n  getMainUnvisitedNeighbors,\r\n  getSecUnvisitedNeighbors,\r\n} from \"./dijkstraBidMethods\";\r\n\r\nexport function dijkstraBidirectional(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  speed\r\n) {\r\n  var meetingCell = null;\r\n  var isFinished;\r\n  var idMain = 0;\r\n  var idSec = 0;\r\n  isFinished = false;\r\n  const unvisitedCellsMain = [];\r\n  const unvisitedCellsSec = [];\r\n  const visitedCellsMain = [];\r\n  const visitedCellsSec = [];\r\n  var directionMain = \"START\";\r\n  var directionSec = \"START\";\r\n  var previousRowMain = startCell.row;\r\n  var previousRowSec = endCell.row;\r\n  startCell.distance = 0;\r\n  endCell.distanceSec = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCellsMain.push(cell);\r\n      unvisitedCellsSec.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCellsMain.length || !!unvisitedCellsSec.length) {\r\n    if (isFinished) {\r\n      DoBidirectionalAnimation(\r\n        visitedCellsMain,\r\n        visitedCellsSec,\r\n        speed,\r\n        meetingCell\r\n      );\r\n\r\n      return;\r\n    }\r\n    if (!!unvisitedCellsMain.length) {\r\n      unvisitedCellsMain.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      unvisitedCellsMain.sort(\r\n        (cell1, cell2) => cell1.distance - cell2.distance\r\n      );\r\n\r\n      const nextMainCell = unvisitedCellsMain.shift();\r\n      if (nextMainCell.visitedSec) {\r\n        isFinished = true;\r\n        meetingCell = nextMainCell;\r\n      }\r\n      if (directionMain !== \"START\") {\r\n        if (nextMainCell.row < previousRowMain) {\r\n          directionMain = \"UP\";\r\n        } else {\r\n          directionMain = \"DOWN\";\r\n        }\r\n      }\r\n\r\n      if (!(nextMainCell.isWall && !nextMainCell.start && !nextMainCell.end)) {\r\n        if (nextMainCell.distance === Infinity) {\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n\r\n          return;\r\n        }\r\n        nextMainCell.visited = true;\r\n        visitedCellsMain.push(nextMainCell);\r\n        if (nextMainCell === endCell) {\r\n          unvisitedCellsMain.sort((cell1, cell2) => cell1.id - cell2.id);\r\n\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        idMain = getMainUnvisitedNeighbors(\r\n          nextMainCell,\r\n          grid,\r\n          directionMain,\r\n          isDiagonalOn,\r\n          \"MAIN\",\r\n          idMain\r\n        );\r\n        if (directionMain !== \"START\") {\r\n          previousRowMain = nextMainCell.row;\r\n        }\r\n        directionMain = \"CHANGED\";\r\n      }\r\n    }\r\n\r\n    //*****************\r\n    if (!!unvisitedCellsSec.length) {\r\n      unvisitedCellsSec.sort((cell1, cell2) => cell1.idSec - cell2.idSec);\r\n      unvisitedCellsSec.sort(\r\n        (cell1, cell2) => cell1.distanceSec - cell2.distanceSec\r\n      );\r\n\r\n      const nextSecCell = unvisitedCellsSec.shift();\r\n      if (nextSecCell.visited) {\r\n        isFinished = true;\r\n        meetingCell = nextSecCell;\r\n      }\r\n      if (directionSec !== \"START\") {\r\n        if (nextSecCell.row < previousRowSec) {\r\n          directionSec = \"UP\";\r\n        } else {\r\n          directionSec = \"DOWN\";\r\n        }\r\n      }\r\n\r\n      if (!(nextSecCell.isWall && !nextSecCell.start && !nextSecCell.end)) {\r\n        if (nextSecCell.distanceSec === Infinity) {\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n          return;\r\n        }\r\n        nextSecCell.visitedSec = true;\r\n        visitedCellsSec.push(nextSecCell);\r\n        if (nextSecCell === startCell) {\r\n          unvisitedCellsSec.sort((cell1, cell2) => cell1.idSec - cell2.idSec);\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n          return;\r\n        }\r\n\r\n        idSec = getSecUnvisitedNeighbors(\r\n          nextSecCell,\r\n          grid,\r\n          directionSec,\r\n          isDiagonalOn,\r\n          \"SEC\",\r\n          idSec\r\n        );\r\n        if (directionSec !== \"START\") {\r\n          previousRowSec = nextSecCell.row;\r\n        }\r\n        directionSec = \"CHANGED\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { DoAnimation, getUnvisitedNeighbors } from \"./dijkstraStandMethods\";\r\n\r\nexport function dijkstraStandard(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  speed\r\n) {\r\n  var id = 0;\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    id = getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn, id);\r\n\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n","import {\r\n  DoBidirectionalAnimation,\r\n  findNeighbors,\r\n  heuristic,\r\n  eliminateFromSet,\r\n  dScore,\r\n} from \"./astarMethods\";\r\nexport function astarBidirectional(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSetMain = [];\r\n  const openSetSec = [];\r\n  const cameFromMain = [];\r\n  const cameFromSec = [];\r\n  var allSetMain = [];\r\n  var allSetSec = [];\r\n  openSetMain.push(startCell);\r\n  openSetSec.push(endCell);\r\n  startCell.g = 0;\r\n  endCell.gSec = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n  endCell.fSec = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSetMain.length || !!openSetSec.length) {\r\n    var currentMain = 0;\r\n    var currentSec = 0;\r\n    for (let j = 0; j < openSetMain.length; j++) {\r\n      if (openSetMain[j].f < openSetMain[currentMain].f) {\r\n        currentMain = j;\r\n      }\r\n    }\r\n    for (let j = 0; j < openSetSec.length; j++) {\r\n      if (openSetSec[j].fSec < openSetSec[currentSec].fSec) {\r\n        currentSec = j;\r\n      }\r\n    }\r\n    var currentCellMain = openSetMain[currentMain];\r\n    var currentCellSec = openSetSec[currentSec];\r\n\r\n    if (currentCellMain === endCell) {\r\n      DoBidirectionalAnimation(\r\n        allSetMain,\r\n        allSetSec,\r\n        openSetMain,\r\n        openSetSec,\r\n        null,\r\n        speed\r\n      );\r\n      return;\r\n    }\r\n    if (currentCellSec === startCell) {\r\n      DoBidirectionalAnimation(\r\n        allSetMain,\r\n        allSetSec,\r\n        openSetMain,\r\n        openSetSec,\r\n        null,\r\n        speed\r\n      );\r\n      return;\r\n    }\r\n\r\n    //----------------------------------------------\r\n\r\n    if (!!openSetMain.length) {\r\n      if (currentCellMain.visitedSec) {\r\n        DoBidirectionalAnimation(\r\n          allSetMain,\r\n          allSetSec,\r\n          openSetMain,\r\n          openSetSec,\r\n          currentCellMain,\r\n          speed\r\n        );\r\n        return;\r\n      }\r\n      eliminateFromSet(openSetMain, currentCellMain);\r\n      var neighborsMain = currentCellMain.neighbors;\r\n\r\n      for (let k = 0; k < neighborsMain.length; k++) {\r\n        var neighborMain = neighborsMain[k];\r\n        if (\r\n          !(neighborMain.isWall && !neighborMain.start && !neighborMain.end)\r\n        ) {\r\n          var tentative_gScoreMain =\r\n            currentCellMain.g +\r\n            dScore(neighborMain, currentCellMain, optimized);\r\n          if (tentative_gScoreMain < neighborMain.g) {\r\n            cameFromMain.push(neighborMain);\r\n            neighborMain.g = tentative_gScoreMain;\r\n            neighborMain.h = heuristic(\r\n              neighborMain,\r\n              endCell,\r\n              isDiagonalOn,\r\n              optimized\r\n            );\r\n            neighborMain.f = neighborMain.g + neighborMain.h;\r\n            neighborMain.previous = currentCellMain;\r\n            if (!openSetMain.includes(neighborMain)) {\r\n              openSetMain.push(neighborMain);\r\n              neighborMain.visited = true;\r\n              if (speed === \"slow\") {\r\n                allSetMain.push([openSetMain.slice(0), cameFromMain.slice(0)]);\r\n              } else if (speed === \"fast\") {\r\n                allSetMain.push(neighborMain);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //SECOND--------------------------------------\r\n\r\n    if (!!openSetSec.length) {\r\n      if (currentCellSec.visited) {\r\n        DoBidirectionalAnimation(\r\n          allSetMain,\r\n          allSetSec,\r\n          openSetMain,\r\n          openSetSec,\r\n          currentCellSec,\r\n          speed\r\n        );\r\n        return;\r\n      }\r\n      var neighborsSec = currentCellSec.neighbors;\r\n      eliminateFromSet(openSetSec, currentCellSec);\r\n\r\n      for (let k = 0; k < neighborsSec.length; k++) {\r\n        var neighborSec = neighborsSec[k];\r\n        if (!(neighborSec.isWall && !neighborSec.start && !neighborSec.end)) {\r\n          var tentative_gScoreSec =\r\n            currentCellSec.gSec +\r\n            dScore(neighborSec, currentCellSec, optimized);\r\n          if (tentative_gScoreSec < neighborSec.gSec) {\r\n            cameFromSec.push(neighborSec);\r\n            neighborSec.gSec = tentative_gScoreSec;\r\n            neighborSec.hSec = heuristic(\r\n              neighborSec,\r\n              startCell,\r\n              isDiagonalOn,\r\n              optimized\r\n            );\r\n            neighborSec.fSec = neighborSec.gSec + neighborSec.hSec;\r\n            neighborSec.previousSec = currentCellSec;\r\n            if (!openSetSec.includes(neighborSec)) {\r\n              openSetSec.push(neighborSec);\r\n              neighborSec.visitedSec = true;\r\n              if (speed === \"slow\") {\r\n                allSetSec.push([openSetSec.slice(0), cameFromSec.slice(0)]);\r\n              } else if (speed === \"fast\") {\r\n                allSetSec.push(neighborSec);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoBidirectionalAnimation(\r\n    allSetMain,\r\n    allSetSec,\r\n    openSetMain,\r\n    openSetSec,\r\n    null,\r\n    speed\r\n  );\r\n}\r\n","import {\r\n  DoAnimation,\r\n  findNeighbors,\r\n  heuristic,\r\n  eliminateFromSet,\r\n  dScore,\r\n} from \"./astarMethods\";\r\nexport function astarStandard(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];\r\n    if (currentCell === endCell) {\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../PathFinder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n    this.title = \"PathFinder & Maze generator\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = this.title;\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n    return position % 2 === 0 ? position + 1 : position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        This project is still under construction!\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}