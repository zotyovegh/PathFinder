{"version":3,"sources":["Cell/index.js","Algorithms/methods.js","Algorithms/mazes/prim.js","Algorithms/animations.js","Algorithms/searchers/dijsktra.js","Algorithms/searchers/astar.js","Grid/index.js","Algorithms/mazes/default.js","App.js","index.js"],"names":["getColor","props","data","start","end","isWall","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","createGrid","grid","i","rows","push","j","columns","visited","previous","f","g","h","neighbors","startR","startC","endR","endC","getCellsInOrder","endCell","cells","cell","unshift","clear","type","clearVisitedCells","window","gridComponent","setState","startRow","startCol","endRow","endCol","status","newGrid","state","visualizeCell","placeWall","newCell","doAlgorithm","category","name","document","getElementById","primMaze","originalGrid","JSON","parse","stringify","wallPairs","getNeighboringWalls","length","currentPair","takeRandomPair","editGrid","position","Math","floor","random","pair","splice","animatePathSlow","cellsInOrder","setTimeout","previousVisualization","animatePathFast","getUnvisitedNeighbors","direction","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","neighbor","DoAnimation","visitedCells","speed","animateSlow","animateFast","astar","startCell","optimized","findNeighbors","openSet","cameFrom","allSet","heuristic","current","currentCell","console","log","eliminateFromSet","k","tentative_gScore","dScore","includes","slice","cell1","cell2","SQRT2","abs","sqrt","set","closedSet","animateAstarSlow","animateAstarFast","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","unvisitedCells","previousRow","sort","nextCell","shift","dijkstra","diagonalVisualization","optimizedVisualization","handleChange","bind","event","target","this","value","map","index","key","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","numberOfCells","wallAmount","getRandomMazedGrid","Component","App","getPosition","parameter","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.20be175c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  } else if (props.data.isWall) {\r\n    return \"cell-wall\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","export function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n        //TODO: ASTAR scenario (this variables shall be handled differently later)\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function clear(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (cell.start || cell.end || cell.isWall) {\r\n        continue;\r\n      }\r\n      visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { clear } from \"../../Algorithms/methods\";\r\nexport function primMaze(originalGrid) {\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  const wallPairs = [];\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  const mazeCells = [];\r\n  grid[1][1].isWall = false;\r\n  mazeCells.push(grid[1][1]);\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  editGrid(grid);\r\n}\r\n\r\nfunction editGrid(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    if (grid[row - 2][col].isWall) {\r\n      var cell = grid[row - 1][col];\r\n      wallPairs.push([cell, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    if (grid[row][col + 2].isWall) {\r\n      let cell = grid[row][col + 1];\r\n      wallPairs.push([cell, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    if (grid[row + 2][col]) {\r\n      let cell = grid[row + 1][col];\r\n      wallPairs.push([cell, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    if (grid[row][col - 2]) {\r\n      let cell = grid[row][col - 1];\r\n      wallPairs.push([cell, grid[row][col - 2]]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import { visualizeCell, clearVisitedCells } from \"../Algorithms/methods\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}\r\n","import { animateFast, animateSlow } from \"../../Algorithms/animations\";\r\nimport { getCellsInOrder, clearVisitedCells } from \"../../Algorithms/methods\";\r\nvar id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"../../Algorithms/animations\";\r\nimport { getCellsInOrder, clearVisitedCells } from \"../../Algorithms/methods\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];    \r\n    if (currentCell === endCell) {\r\n      console.log(endCell.end);\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport {\r\n  clearVisitedCells,\r\n  createGrid,\r\n  placeWall,\r\n  clear,\r\n} from \"../Algorithms/methods\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"astar\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: true,\r\n      optimizedVisualization: true,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"choice\") {\r\n      this.setState({ currentAlg: event.target.value });\r\n    }\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        );\r\n\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleChange}\r\n          name=\"choice\"\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clear(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clear(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            getRandomMazedGrid(this.state.grid);\r\n          }}\r\n        >\r\n          Random grid\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            primMaze(this.state.grid);\r\n          }}\r\n        >\r\n          Prim maze\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import { clearVisitedCells } from \"../../Algorithms/methods\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n\r\n    return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}