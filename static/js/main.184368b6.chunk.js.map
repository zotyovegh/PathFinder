{"version":3,"sources":["Cell/index.js","Algorithms/methods.js","Algorithms/animations.js","Algorithms/dijsktra.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","isWall","Cell","previous","id","className","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","createGrid","grid","i","rows","push","j","columns","visited","startR","startC","endR","endC","getCellsInOrder","endCell","cells","cell","unshift","clearVisitedCells","newGrid","window","gridComponent","state","visualizeCell","setState","placeWall","newCell","status","currentAlg","doAlgorithm","category","name","document","getElementById","animatePathFast","cellsInOrder","length","previousVisualization","animateSlow","visitedCells","setTimeout","animatePathSlow","dijkstra","startCell","isDiagonalOn","console","log","direction","previousRow","unvisitedCells","sort","cell1","cell2","nextCell","shift","getUnvisitedNeighbors","neighbors","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","neighbor","Grid","isMouseDown","isStartOn","isEndOn","slice","startRow","startCol","endRow","endCol","type","finishCell","diagonalVisualization","animateFast","clear","clearBoard","handleDistanceChange","bind","handleDiagonalChange","this","map","index","key","cellIndex","onMouseLeave","disabled","onClick","defaultChecked","onChange","Component","App","getPosition","parameter","position","Math","floor","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.184368b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  } else if (props.data.isWall) {\r\n    return \"cell-wall\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  let temporary = props.data.previous === null ? \"\" : props.data.previous.id;\r\n  let cell = () => {\r\n    return (\r\n      <div\r\n        className={`cell ${getColor(props)}`}\r\n        id={`cell-${props.data.row}-${props.data.col}`}\r\n        onMouseDown={(e) => {\r\n          e.preventDefault();\r\n          props.onMouseDown(props.data);\r\n        }}\r\n        onMouseEnter={() => props.onMouseEnter(props.data)}\r\n        onMouseUp={() => props.onMouseUp(props.data)}\r\n        onContextMenu={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <div\r\n          className={`num ${\"\"}`}\r\n          id={`num-${props.data.row}-${props.data.col}`}\r\n        >\r\n          {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;\r\n","export function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (cell.start || cell.end || cell.isWall) {\r\n        continue;\r\n      }\r\n      visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      if (window.gridComponent.state.currentAlg === \"dijkstra\") {\r\n        window.gridComponent.doAlgorithm(\"fastDijkstra\");\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { visualizeCell } from \"../Algorithms/methods\";\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n","var id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn) {\r\n  console.log(isDiagonalOn);\r\n  const visitedCells = [];\r\n  startCell.distance = 0;\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  const unvisitedCells = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) return visitedCells;\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      return visitedCells;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    (function () {\r\n      neighbor.id = id;\r\n    })(id++);\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    if (!grid[row - 1][col].visited && grid[row - 1][col].previous === null) {\r\n      neighbors.push(grid[row - 1][col]);\r\n    }\r\n  }\r\n}\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (\r\n      !grid[row - 1][col + 1].visited &&\r\n      grid[row - 1][col + 1].previous === null\r\n    ) {\r\n      neighbors.push(grid[row - 1][col + 1]);\r\n    }\r\n  }\r\n}\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    if (!grid[row][col + 1].visited && grid[row][col + 1].previous === null) {\r\n      neighbors.push(grid[row][col + 1]);\r\n    }\r\n  }\r\n}\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (\r\n      !grid[row + 1][col + 1].visited &&\r\n      grid[row + 1][col + 1].previous === null\r\n    ) {\r\n      neighbors.push(grid[row + 1][col + 1]);\r\n    }\r\n  }\r\n}\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    if (!grid[row + 1][col].visited && grid[row + 1][col].previous === null) {\r\n      neighbors.push(grid[row + 1][col]);\r\n    }\r\n  }\r\n}\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (\r\n      !grid[row + 1][col - 1].visited &&\r\n      grid[row + 1][col - 1].previous === null\r\n    ) {\r\n      neighbors.push(grid[row + 1][col - 1]);\r\n    }\r\n  }\r\n}\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    if (!grid[row][col - 1].visited && grid[row][col - 1].previous === null) {\r\n      neighbors.push(grid[row][col - 1]);\r\n    }\r\n  }\r\n}\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (\r\n      !grid[row - 1][col - 1].visited &&\r\n      grid[row - 1][col - 1].previous === null\r\n    ) {\r\n      neighbors.push(grid[row - 1][col - 1]);\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport {\r\n  getCellsInOrder,\r\n  clearVisitedCells,\r\n  createGrid,\r\n  clearBoard,\r\n  placeWall,\r\n} from \"../Algorithms/methods\";\r\nimport { animateFast, animateSlow } from \"../Algorithms/animations\";\r\nimport { dijkstra } from \"../Algorithms/dijsktra\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: false,\r\n    };\r\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\r\n    this.handleDiagonalChange = this.handleDiagonalChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleDistanceChange() {\r\n    this.setState(\r\n      { previousVisualization: !this.state.previousVisualization },\r\n      () => {\r\n        if (this.state.status === \"finished\") {\r\n          clearVisitedCells();\r\n          if (this.state.currentAlg === \"dijkstra\") {\r\n            this.doAlgorithm(\"fastDijkstra\");\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  handleDiagonalChange() {\r\n    this.setState(\r\n      { diagonalVisualization: !this.state.diagonalVisualization },\r\n      () => {\r\n        if (this.state.status === \"finished\") {\r\n          clearVisitedCells();\r\n          if (this.state.currentAlg === \"dijkstra\") {\r\n            this.doAlgorithm(\"fastDijkstra\");\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              if (this.state.currentAlg === \"dijkstra\") {\r\n                this.doAlgorithm(\"fastDijkstra\");\r\n              }\r\n            }\r\n          }\r\n        );\r\n\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              if (this.state.currentAlg === \"dijkstra\") {\r\n                this.doAlgorithm(\"fastDijkstra\");\r\n              }\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (type) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const finishCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (type === \"slowDijkstra\") {\r\n      if (this.state.status === \"finished\") {\r\n        clearVisitedCells();\r\n      }\r\n\r\n      this.setState({ status: \"running\" });\r\n      const visitedCells = dijkstra(grid, startCell, finishCell, this.state.diagonalVisualization);\r\n      const cellsInOrder = getCellsInOrder(finishCell);\r\n      animateSlow(visitedCells, cellsInOrder);\r\n    } else if (type === \"fastDijkstra\") {\r\n      const visitedCells = dijkstra(grid, startCell, finishCell, this.state.diagonalVisualization);\r\n      const cellsInOrder = getCellsInOrder(finishCell);\r\n      animateFast(visitedCells, cellsInOrder);\r\n    }\r\n  };\r\n\r\n  clear = (type) => {\r\n    if (type === \"path\") {\r\n      clearVisitedCells();\r\n    } else if (type === \"grid\") {\r\n      clearBoard(this.props);\r\n    }\r\n    this.setState({ status: \"pending\" });\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slowDijkstra\")}\r\n        >\r\n          Dijkstra\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            this.clear(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            this.clear(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleDistanceChange}\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleDiagonalChange}\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n\r\n    return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 10;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 10;\r\n      }\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}