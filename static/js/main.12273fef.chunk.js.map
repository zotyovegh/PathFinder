{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/animations.js","Algorithms/mazes/prim.js","Algorithms/searchers/dijsktra.js","Algorithms/searchers/astar.js","Grid/index.js","Algorithms/mazes/default.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","visited","previous","f","g","h","neighbors","isWall","push","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","animatePathSlow","cellsInOrder","setTimeout","length","previousVisualization","animatePathFast","primMaze","originalGrid","JSON","parse","stringify","path","wallPairs","getNeighboringWalls","currentPair","takeRandomPair","clearInfinityVariables","visualizeMaze","neighbor","position","Math","floor","random","pair","splice","getUnvisitedNeighbors","direction","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","DoAnimation","visitedCells","speed","animateSlow","animateFast","astar","startCell","optimized","findNeighbors","openSet","cameFrom","allSet","heuristic","current","currentCell","console","log","eliminateFromSet","k","tentative_gScore","dScore","includes","slice","cell1","cell2","SQRT2","abs","sqrt","set","closedSet","animateAstarSlow","animateAstarFast","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","unvisitedCells","previousRow","sort","nextCell","shift","dijkstra","diagonalVisualization","optimizedVisualization","handleChange","bind","event","target","this","value","map","index","key","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","numberOfCells","wallAmount","getRandomMazedGrid","Component","App","getPosition","parameter","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.12273fef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  }else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n        //TODO: ASTAR scenario (this variables shall be handled differently later)\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { visualizeCell } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}\r\n\r\nexport function visualizeMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeMaze } from \"../../Algorithms/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  /*const mazeCells = [];\r\n  grid[1][1].isWall = false;\r\n  mazeCells.push(grid[1][1]);*/\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeMaze(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    if (grid[row - 2][col].isWall) {\r\n      var neighbor = grid[row - 1][col];\r\n      wallPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    if (grid[row][col + 2].isWall) {\r\n      let neighbor = grid[row][col + 1];\r\n      wallPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    if (grid[row + 2][col]) {\r\n      let neighbor = grid[row + 1][col];\r\n      wallPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    if (grid[row][col - 2]) {\r\n      let neighbor = grid[row][col - 1];\r\n      wallPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import { animateFast, animateSlow } from \"../../Algorithms/animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"../../Algorithms/animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];    \r\n    if (currentCell === endCell) {\r\n      console.log(endCell.end);\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"astar\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: true,\r\n      optimizedVisualization: true,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"choice\") {\r\n      this.setState({ currentAlg: event.target.value });\r\n    }\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleChange}\r\n          name=\"choice\"\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            getRandomMazedGrid(this.state.grid);\r\n          }}\r\n        >\r\n          Random grid\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            primMaze(this.state.grid);\r\n          }}\r\n        >\r\n          Prim maze\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n\r\n    return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}