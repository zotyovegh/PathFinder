{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/searchers/dijsktra.js","Algorithms/mazes/animations.js","Algorithms/mazes/default.js","Algorithms/mazes/prim.js","Algorithms/mazes/iterativeDF.js","Algorithms/mazes/recursiveDF.js","Algorithms/mazes/aldousBroder.js","Algorithms/mazes/kruskal.js","Algorithms/mazes/wilson.js","Algorithms/mazes/recursiveDivision.js","Algorithms/mazes/basicHorizontal.js","Algorithms/mazes/basicVertical.js","Algorithms/mazes/binaryTree.js","Algorithms/mazes/eller.js","Algorithms/searchers/animations.js","Algorithms/searchers/astar.js","Algorithms/searchers/depthFirst.js","Algorithms/searchers/breadthFirst.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","idSec","distanceSec","visited","visitedSec","previous","previousSec","direction","directionSec","f","g","h","neighbors","isWall","clearInfinityVariables","push","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","idMain","isFinished","visualizeOnWalledGrid","path","setTimeout","length","a","currentPath","isOptimalPath","aim","Promise","r","visualizeOnEmptyGrid","getRandomMazedGrid","numberOfCells","wallAmount","Math","floor","random","visualizeRandom","getNeighboringWalls","wallPairs","neighbor","takeRandomPair","position","pair","splice","takeLastCell","cellsWithUnvisitedNeighbors","getNeighboringCells","neighboringUnvisitedPairs","recursiveMaze","originalGrid","JSON","parse","stringify","recursion","currentCell","randomPair","aldousBroderMaze","unvisitedCells","visualizationList","current","filter","item","visualizeABMaze","kruskalMaze","idCounter","validWalls","map","Map","set","getSurroundingCells","array","temp","shuffleArray","wall","first","get","second","forEach","value","key","includes","wilsonMaze","newPath","takeRandomCell","getRandomCell","originalAim","nextCell","removeCycle","visualizeWilson","clearDirections","recursiveDivision","middle","leftIndex","rightIndex","drawEdges","topLeft","topRight","bottomLeft","bottomRight","width","height","randomPosition","getMiddleLine","getRandomPosition","verticalLeft","verticalRight","horizontalTop","horizontalBottom","reference","half","ceil","size","num","basicHorizontal","exc","basicVertical","binaryTreeAlg","updateCells","getDirection","param1","param2","some","sideMove","remove","isVisited","bidirectionalSlow","main","sec","cellsInOrder","animateBidirectionalPathSlow","animateBidirectionalPathFast","animateSlow","visitedCells","previousVisualization","animatePathSlow","animateFast","animatePathFast","animateAstarSlow","allSet","animateAstarPathSlow","openSet","closedSet","k","animateAstarFast","animateAstarPathFast","bidirectional","meetingCell","getUnvisitedNeighbors","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","addNeighbor","DoSingleAnimation","speed","DoBidirectionalAnimation","mainCells","secondaryCells","cellMain","cellSec","getCellsInOrderBidirectional","bidirectionalFast","astar","startCell","optimized","findNeighbors","cameFrom","heuristic","DoAnimation","eliminateFromSet","tentative_gScore","dScore","slice","cell1","cell2","SQRT2","abs","sqrt","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","bidirectionalOn","unvisitedCellsMain","unvisitedCellsSec","visitedCellsMain","visitedCellsSec","directionMain","previousRowMain","previousRowSec","sort","nextMainCell","shift","nextSecCell","dijkstra","diagonalVisualization","bidirectionalVisualization","optimizedVisualization","mainList","pop","depthFirst","breadthFirst","currentMaze","handleAlgoChange","bind","handleButtonChange","handleMazeChange","event","this","target","currentPair","primMaze","iterativeMaze","list","counter","x","ellerMaze","index","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","hidden","label","Component","App","getPosition","parameter","getSize","innerHeight","toFixed","innerWidth","title","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2cf825bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  }else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.id = 0;\r\n      cell.idSec = 0;\r\n      cell.distance = Infinity;\r\n      cell.distanceSec = Infinity;\r\n      cell.visited = false;\r\n      cell.visitedSec = false;\r\n      cell.previous = null;\r\n      cell.previousSec = null;\r\n      cell.direction = \"\";\r\n      cell.directionSec = \"\";\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.visited = false;\r\n      cell.id = 0;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        idSec: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        distanceSec: Infinity,\r\n        visited: false,\r\n        visitedSec: false,\r\n        isWall: false,\r\n        previous: null,\r\n        previousSec: null,\r\n        direction: \"\",\r\n        directionSec: \"\",\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import {\r\n  animateFast,\r\n  animateSlow,\r\n  bidirectionalSlow,\r\n  bidirectionalFast,\r\n} from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar idMain;\r\nvar idSec;\r\nvar isFinished;\r\nvar meetingCell = null;\r\nvar bidirectional;\r\nexport function dijkstra(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  bidirectionalOn,\r\n  speed\r\n) {\r\n  idMain = 0;\r\n  idSec = 0;\r\n  isFinished = false;\r\n  bidirectional = bidirectionalOn;\r\n  const unvisitedCellsMain = [];\r\n  const unvisitedCellsSec = [];\r\n  const visitedCellsMain = [];\r\n  const visitedCellsSec = [];\r\n  var directionMain = \"START\";\r\n  var directionSec = \"START\";\r\n  var previousRowMain = startCell.row;\r\n  var previousRowSec = endCell.row;\r\n  startCell.distance = 0;\r\n  endCell.distanceSec = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCellsMain.push(cell);\r\n      if (bidirectionalOn) unvisitedCellsSec.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCellsMain.length || !!unvisitedCellsSec.length) {\r\n    if (isFinished) {\r\n      DoBidirectionalAnimation(visitedCellsMain, visitedCellsSec, speed);\r\n      return;\r\n    }\r\n    if (!!unvisitedCellsMain.length) {\r\n      unvisitedCellsMain.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      unvisitedCellsMain.sort(\r\n        (cell1, cell2) => cell1.distance - cell2.distance\r\n      );\r\n\r\n      const nextMainCell = unvisitedCellsMain.shift();\r\n      if (nextMainCell.visitedSec) {\r\n        isFinished = true;\r\n        meetingCell = nextMainCell;\r\n      }\r\n      if (directionMain !== \"START\") {\r\n        if (nextMainCell.row < previousRowMain) {\r\n          directionMain = \"UP\";\r\n        } else {\r\n          directionMain = \"DOWN\";\r\n        }\r\n      }\r\n\r\n      if (!(nextMainCell.isWall && !nextMainCell.start && !nextMainCell.end)) {\r\n        if (nextMainCell.distance === Infinity) {\r\n          if (!bidirectional) {\r\n            DoSingleAnimation(visitedCellsMain, endCell, speed);\r\n          } else {\r\n            DoBidirectionalAnimation(visitedCellsMain, visitedCellsSec, speed);\r\n          }\r\n\r\n          return;\r\n        }\r\n        nextMainCell.visited = true;\r\n        visitedCellsMain.push(nextMainCell);\r\n        if (nextMainCell === endCell) {\r\n          unvisitedCellsMain.sort((cell1, cell2) => cell1.id - cell2.id);\r\n          if (!bidirectional) {\r\n            DoSingleAnimation(visitedCellsMain, endCell, speed);\r\n          } else {\r\n            DoBidirectionalAnimation(visitedCellsMain, visitedCellsSec, speed);\r\n          }\r\n          return;\r\n        }\r\n\r\n        getUnvisitedNeighbors(\r\n          nextMainCell,\r\n          grid,\r\n          directionMain,\r\n          isDiagonalOn,\r\n          \"MAIN\"\r\n        );\r\n        if (directionMain !== \"START\") {\r\n          previousRowMain = nextMainCell.row;\r\n        }\r\n        directionMain = \"CHANGED\";\r\n      }\r\n    }\r\n\r\n    //*****************\r\n    //*****************\r\n    //*****************\r\n    //*****************\r\n    //*****************\r\n    if (!!unvisitedCellsSec.length && bidirectionalOn) {\r\n      unvisitedCellsSec.sort((cell1, cell2) => cell1.idSec - cell2.idSec);\r\n      unvisitedCellsSec.sort(\r\n        (cell1, cell2) => cell1.distanceSec - cell2.distanceSec\r\n      );\r\n\r\n      const nextSecCell = unvisitedCellsSec.shift();\r\n      if (nextSecCell.visited) {\r\n        isFinished = true;\r\n        meetingCell = nextSecCell;\r\n      }\r\n      if (directionSec !== \"START\") {\r\n        if (nextSecCell.row < previousRowSec) {\r\n          directionSec = \"UP\";\r\n        } else {\r\n          directionSec = \"DOWN\";\r\n        }\r\n      }\r\n\r\n      if (!(nextSecCell.isWall && !nextSecCell.start && !nextSecCell.end)) {\r\n        if (nextSecCell.distanceSec === Infinity) {\r\n          DoBidirectionalAnimation(visitedCellsMain, visitedCellsSec, speed);\r\n          return;\r\n        }\r\n        nextSecCell.visitedSec = true;\r\n        visitedCellsSec.push(nextSecCell);\r\n        if (nextSecCell === startCell) {\r\n          unvisitedCellsSec.sort((cell1, cell2) => cell1.idSec - cell2.idSec);\r\n          DoBidirectionalAnimation(visitedCellsMain, visitedCellsSec, speed);\r\n          return;\r\n        }\r\n\r\n        getUnvisitedNeighbors(\r\n          nextSecCell,\r\n          grid,\r\n          directionSec,\r\n          isDiagonalOn,\r\n          \"SEC\"\r\n        );\r\n        if (directionSec !== \"START\") {\r\n          previousRowSec = nextSecCell.row;\r\n        }\r\n        directionSec = \"CHANGED\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn, category) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    Down(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    Up(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n      UpRight(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n    }\r\n  }\r\n  if (category === \"MAIN\") {\r\n    for (const neighbor of neighbors) {\r\n      neighbor.distance = cell.distance + 1;\r\n      neighbor.previous = cell;\r\n      neighbor.id = idMain;\r\n      idMain++;\r\n    }\r\n  } else if (\"SEC\") {\r\n    for (const neighbor of neighbors) {\r\n      neighbor.distanceSec = cell.distanceSec + 1;\r\n      neighbor.previousSec = cell;\r\n      neighbor.idSec = idSec;\r\n      idSec++;\r\n    }\r\n  }\r\n}\r\n\r\nfunction addNeighbor(cell, neighbors, category) {\r\n  if (category === \"MAIN\" && !cell.visited && cell.previous === null) {\r\n    neighbors.push(cell);\r\n  } else if (\r\n    category === \"SEC\" &&\r\n    !cell.visitedSec &&\r\n    cell.previousSec === null\r\n  ) {\r\n    neighbors.push(cell);\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors, category) {\r\n  if (row > 0) addNeighbor(grid[row - 1][col], neighbors, category);\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors, category) {\r\n  if (col < grid[0].length - 1)\r\n    addNeighbor(grid[row][col + 1], neighbors, category);\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors, category) {\r\n  if (row < grid.length - 1)\r\n    addNeighbor(grid[row + 1][col], neighbors, category);\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors, category) {\r\n  if (col > 0) addNeighbor(grid[row][col - 1], neighbors, category);\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors, category) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors, category) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors, category) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors, category) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction DoSingleAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\nfunction DoBidirectionalAnimation(mainCells, secondaryCells, speed) {\r\n  var cellsInOrder = getCellsInOrderBidirectional(mainCells, secondaryCells);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    bidirectionalSlow(mainCells, secondaryCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    bidirectionalFast(mainCells, secondaryCells, cellsInOrder);\r\n  }\r\n}\r\n\r\nfunction getCellsInOrderBidirectional() {\r\n  if (meetingCell !== null) {\r\n    const cells = [];\r\n    cells.push(meetingCell);\r\n    let cellMain = meetingCell;\r\n    let cellSec = meetingCell;\r\n    while (cellMain !== null || cellSec !== null) {\r\n      if (cellMain !== null) {\r\n        if (cellMain !== meetingCell && !cellMain.start && !cellMain.end) {\r\n          cells.push(cellMain);\r\n        }\r\n        cellMain = cellMain.previous;\r\n      }\r\n      if (cellSec !== null) {\r\n        if (cellSec !== meetingCell && !cellSec.start && !cellSec.end) {\r\n          cells.push(cellSec);\r\n        }\r\n        cellSec = cellSec.previousSec;\r\n      }\r\n    }\r\n    return cells;\r\n  } else {\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../cleaning\";\r\nimport { visualizeCell } from \"../methods\";\r\nexport function visualizeOnWalledGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeRandom(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeABMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  var previous = null;\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[path.length - 1]);\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (previous !== null) {\r\n        if (previous.isWall) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", previous);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", previous);\r\n        }\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", path[i]);\r\n        previous = path[i];\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport async function visualizeWilson(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      clearVisitedCells();\r\n      return;\r\n    }\r\n    var previous = null;\r\n    var currentPath = path[i][0];\r\n    var isOptimalPath = path[i][1];\r\n    var aim = path[i][2] === null ? null : path[i][2];\r\n\r\n    var type =\r\n      aim === null\r\n        ? null\r\n        : document.getElementById(`${\"cell\"}-${aim.row}-${aim.col}`).className;\r\n    if (aim !== null) {\r\n      if (!aim.end && !aim.start) {\r\n        visualizeCell(\"cell\", \"cell cell-previous\", aim);\r\n      }\r\n    }\r\n\r\n    if (!isOptimalPath) {\r\n      for (let j = 0; j < currentPath.length; j++) {\r\n        if (previous !== null) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", previous);\r\n        }\r\n\r\n        if (!currentPath[j].end && !currentPath[j].start) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", currentPath[j]);\r\n          previous = currentPath[j];\r\n        }\r\n\r\n        if (currentPath[j] !== currentPath.length - 1) {\r\n          await new Promise((r) => setTimeout(r, 5));\r\n        }\r\n      }\r\n    }\r\n    if (aim !== null) {\r\n      if (!aim.end && !aim.start) {\r\n        if (type === \"cell cell-wall\") {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", aim);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", aim);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = currentPath.length - 1; j >= 0; j--) {\r\n      if (!currentPath[j].end && !currentPath[j].start) {\r\n        if (!isOptimalPath) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", currentPath[j]);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", currentPath[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function visualizeOnEmptyGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nimport { visualizeRandom } from \"../mazes/animations\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  var path = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n      path.push(cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeRandom(grid, path);\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    wallPairs.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    wallPairs.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    wallPairs.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    wallPairs.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function iterativeMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  var cellsWithUnvisitedNeighbors = [];\r\n  cellsWithUnvisitedNeighbors.push(currentCell);\r\n\r\n  while (!!cellsWithUnvisitedNeighbors.length) {\r\n    currentCell = takeLastCell(cellsWithUnvisitedNeighbors);\r\n    var neighboringUnvisitedPairs = getNeighboringCells(currentCell, grid);\r\n    if (neighboringUnvisitedPairs.length > 0) {\r\n      cellsWithUnvisitedNeighbors.push(currentCell);\r\n      var randomPair =\r\n        neighboringUnvisitedPairs[\r\n          Math.floor(Math.random() * neighboringUnvisitedPairs.length)\r\n        ];\r\n      randomPair[0].isWall = false;\r\n      randomPair[1].isWall = false;\r\n      randomPair[1].visited = true;\r\n      path.push(randomPair[0]);\r\n      path.push(randomPair[1]);\r\n      cellsWithUnvisitedNeighbors.push(randomPair[1]);\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction takeLastCell(cellsWithUnvisitedNeighbors) {\r\n  var position = cellsWithUnvisitedNeighbors.length - 1;\r\n  var cell = cellsWithUnvisitedNeighbors[position];\r\n  cellsWithUnvisitedNeighbors.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function recursiveMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  recursion(grid, currentCell, path);\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  //visualization\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction recursion(grid, currentCell, path) {\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  currentCell.neighbors = getNeighboringCells(currentCell, grid);\r\n  while (currentCell.neighbors.length > 0) {\r\n    var position = Math.floor(Math.random() * currentCell.neighbors.length);\r\n    var randomPair = currentCell.neighbors[position];\r\n    currentCell.neighbors.splice(position, 1);\r\n    if (!randomPair[1].visited) {\r\n      randomPair[0].isWall = false;\r\n      path.push(randomPair[0]);\r\n      recursion(grid, randomPair[1], path);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import { visualizeABMaze } from \"../mazes/animations\";\r\nimport {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n  clearVisitedCells,\r\n} from \"../../Algorithms/cleaning\";\r\n\r\nexport function aldousBroderMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var unvisitedCells = [];\r\n  var visualizationList = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  var current = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  current.visited = true;\r\n  current.isWall = false;\r\n\r\n  while (!!unvisitedCells.length) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n    visualizationList.push(neighbor[0]);\r\n    visualizationList.push(neighbor[1]);\r\n    if (!neighbor[1].visited) {\r\n      neighbor[0].isWall = false;\r\n      neighbor[1].isWall = false;\r\n      unvisitedCells = unvisitedCells.filter(\r\n        (item) => item.id !== neighbor[1].id\r\n      );\r\n      neighbor[1].visited = true;\r\n    }\r\n    current = neighbor[1];\r\n  }\r\n  clearInfinityVariables(grid);\r\n  \r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeABMaze(grid, visualizationList);\r\n}\r\n\r\n/*function takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  return cell;\r\n}*/\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function kruskalMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var idCounter = 0;\r\n  var validWalls = [];\r\n  var map = new Map();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        //CELLS\r\n        map.set(cell, idCounter++);\r\n      } else if (cell.row % 2 === 1 || cell.col % 2 === 1) {\r\n        if (\r\n          cell.row !== 0 &&\r\n          cell.col !== 0 &&\r\n          cell.row !== grid.length - 1 &&\r\n          cell.col !== grid[0].length - 1\r\n        ) {\r\n          //WALLS\r\n          getSurroundingCells(cell, grid);\r\n          validWalls.push(cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shuffleArray(validWalls);\r\n\r\n  for (const wall of validWalls) {\r\n    const first = map.get(wall.neighbors[0]);\r\n    const second = map.get(wall.neighbors[1]);\r\n    if (first !== second) {\r\n      map.forEach((value, key) => {\r\n        if (value === second) {\r\n          map.set(key, first);\r\n        }\r\n      });\r\n\r\n      wall.neighbors[0].isWall = false;\r\n      wall.isWall = false;\r\n      wall.neighbors[1].isWall = false;\r\n\r\n      if (!path.includes(wall.neighbors[0])) path.push(wall.neighbors[0]);\r\n      if (!path.includes(wall)) path.push(wall);\r\n      if (!path.includes(wall.neighbors[1])) path.push(wall.neighbors[1]);\r\n    }\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getSurroundingCells(wall, grid) {\r\n  var { col, row } = wall;\r\n  if (wall.row % 2 === 1) {\r\n    wall.neighbors.push(grid[row][col + 1]);\r\n    wall.neighbors.push(grid[row][col - 1]);\r\n  } else {\r\n    wall.neighbors.push(grid[row - 1][col]);\r\n    wall.neighbors.push(grid[row + 1][col]);\r\n  }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeWilson } from \"../mazes/animations\";\r\nexport function wilsonMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var unvisitedCells = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n  var newPath = [];\r\n  while (unvisitedCells.length >= 1) {\r\n    var start = takeRandomCell(unvisitedCells);\r\n    var aim =\r\n      unvisitedCells.length !== 0 ? getRandomCell(unvisitedCells) : null;\r\n\r\n    var originalAim = aim;\r\n    newPath = [];\r\n    var nextCell = start;\r\n    newPath.push(nextCell);\r\n    while (nextCell !== aim) {\r\n      var newCell =\r\n        nextCell.neighbors[\r\n          Math.floor(Math.random() * nextCell.neighbors.length)\r\n        ];\r\n\r\n      if (nextCell.visited) {\r\n        aim = nextCell;\r\n      } else {\r\n        nextCell.direction = newCell[2];\r\n        nextCell = newCell[1];\r\n        newPath.push(newCell[0]);\r\n        newPath.push(newCell[1]);\r\n      }\r\n    }\r\n    if (newPath.length > 1) {\r\n      path.push([newPath, false, originalAim]);\r\n    }\r\n\r\n    removeCycle(nextCell, start, aim, grid, path, originalAim);\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeWilson(grid, path);\r\n}\r\nfunction clearDirections(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.direction = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  unvisitedCells.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  return cell;\r\n}\r\n\r\nfunction removeCycle(nextCell, start, aim, grid, path, originalAim) {\r\n  var newPath = [];\r\n  nextCell = start;\r\n  nextCell.visited = true;\r\n  nextCell.isWall = false;\r\n  newPath.push(nextCell);\r\n  if (nextCell !== aim) {\r\n    while (nextCell !== aim) {\r\n      var { col, row } = nextCell;\r\n      if (nextCell.direction === \"UP\") {\r\n        grid[row - 1][col].isWall = false;\r\n        grid[row - 2][col].isWall = false;\r\n        grid[row - 2][col].visited = true;\r\n        nextCell = grid[row - 2][col];\r\n        newPath.push(grid[row - 1][col]);\r\n        newPath.push(grid[row - 2][col]);\r\n      } else if (nextCell.direction === \"DOWN\") {\r\n        grid[row + 1][col].isWall = false;\r\n        grid[row + 2][col].isWall = false;\r\n        grid[row + 2][col].visited = true;\r\n        nextCell = grid[row + 2][col];\r\n        newPath.push(grid[row + 1][col]);\r\n        newPath.push(grid[row + 2][col]);\r\n      } else if (nextCell.direction === \"RIGHT\") {\r\n        grid[row][col + 1].isWall = false;\r\n        grid[row][col + 2].isWall = false;\r\n        grid[row][col + 2].visited = true;\r\n        nextCell = grid[row][col + 2];\r\n        newPath.push(grid[row][col + 1]);\r\n        newPath.push(grid[row][col + 2]);\r\n      } else if (nextCell.direction === \"LEFT\") {\r\n        grid[row][col - 1].isWall = false;\r\n        grid[row][col - 2].isWall = false;\r\n        grid[row][col - 2].visited = true;\r\n        nextCell = grid[row][col - 2];\r\n        newPath.push(grid[row][col - 1]);\r\n        newPath.push(grid[row][col - 2]);\r\n      }\r\n    }\r\n  }\r\n  if (newPath.length > 1) {\r\n    path.push([newPath, true, originalAim]);\r\n  }\r\n\r\n  clearDirections(grid);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col], \"UP\"]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2], \"RIGHT\"]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col], \"DOWN\"]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2], \"LEFT\"]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function recursiveDivision(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  recursion(\r\n    grid[1][1],\r\n    grid[1][grid[1].length - 2],\r\n    grid[grid.length - 2][1],\r\n    grid[grid.length - 2][grid[1].length - 2],\r\n    grid,\r\n    path\r\n  );\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n\r\nfunction recursion(topLeft, topRight, bottomLeft, bottomRight, grid, path) {\r\n  var width = topRight.col - topLeft.col + 1;\r\n  var height = bottomLeft.row - topLeft.row + 1;\r\n  if (height < 3 || width < 3) return;\r\n\r\n  var middle = null;\r\n  var randomPosition = null;\r\n\r\n  if (width >= height) {\r\n    //Vertical\r\n    middle = getMiddleLine(width, topLeft.col);\r\n    randomPosition = getRandomPosition(height);\r\n\r\n    for (let i = topLeft.row; i < topLeft.row + height; i++) {\r\n      if (i !== topLeft.row + randomPosition - 1) {\r\n        path.push(grid[i][middle]);\r\n        grid[i][middle].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    verticalLeft(grid, topLeft, bottomLeft, middle, path);\r\n    verticalRight(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    return;\r\n  } else {\r\n    //Horizontal\r\n    middle = getMiddleLine(height, topLeft.row);\r\n    randomPosition = getRandomPosition(width);\r\n    for (let i = topLeft.col; i < topLeft.col + width; i++) {\r\n      if (i !== topLeft.col + randomPosition - 1) {\r\n        path.push(grid[middle][i]);\r\n        grid[middle][i].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    horizontalTop(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    horizontalBottom(grid, bottomLeft, bottomRight, middle, path);\r\n    return;\r\n  }\r\n}\r\n\r\nfunction verticalLeft(grid, topLeft, bottomLeft, middle, path) {\r\n  if (\r\n    grid[topLeft.row][middle - 1].col - topLeft.col > 0 &&\r\n    bottomLeft.row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      grid[topLeft.row][middle - 1],\r\n      bottomLeft,\r\n      grid[bottomLeft.row][middle - 1],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction verticalRight(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - grid[topLeft.row][middle + 1].col > 0 &&\r\n    grid[bottomLeft.row][middle + 1].row - grid[topLeft.row][middle + 1].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[topLeft.row][middle + 1],\r\n      topRight,\r\n      grid[bottomLeft.row][middle + 1],\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalTop(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - topLeft.col > 0 &&\r\n    grid[middle - 1][bottomLeft.col].row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      topRight,\r\n      grid[middle - 1][bottomLeft.col],\r\n      grid[middle - 1][bottomRight.col],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalBottom(grid, bottomLeft, bottomRight, middle, path) {\r\n  if (\r\n    grid[middle + 1][bottomRight.col].col -\r\n      grid[middle + 1][bottomLeft.col].col >\r\n      0 &&\r\n    bottomLeft.row - grid[middle + 1][bottomLeft.col].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[middle + 1][bottomLeft.col],\r\n      grid[middle + 1][bottomRight.col],\r\n      bottomLeft,\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getMiddleLine(position, reference) {\r\n  var half = Math.ceil(position / 2);\r\n  half = half % 2 === 0 ? half : half + (Math.random() < 0.5 ? -1 : 1);\r\n  return half + reference - 1;\r\n}\r\n\r\nfunction getRandomPosition(size) {\r\n  var num = Math.floor(Math.random() * (size - 1 + 1)) + 1;\r\n  return num % 2 === 1 ? num : num + (Math.random() < 0.5 ? -1 : 1);\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicHorizontal(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid.length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid[0].length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid[0].length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid[0].length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicVertical(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid[0].length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid.length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid.length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid.length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function binaryTreeAlg(originalGrid, direction) {\r\n  clearWithStatus(\"path\");\r\n \r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  getDirection(direction, grid, path);\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getDirection(direction, grid, path) {\r\n  var id = 0;\r\n  if (direction === \"NorthWest\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"NorthEast\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"East\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthWest\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthEast\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"East\", id);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateCells(grid, current, path, param1, param2, id) {\r\n  current.isWall = false;\r\n  path.push(current);\r\n\r\n  getNeighboringCells(current, grid, param1, param2);\r\n  current.id = id;\r\n  id++;\r\n  if (current.neighbors.length !== 0) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n\r\n    neighbor[0].isWall = false;\r\n    path.push(neighbor[0]);\r\n\r\n    if (!path.some((e) => e.id === neighbor[1].id)) {\r\n      neighbor[1].isWall = false;\r\n      path.push(neighbor[1]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid, param1, param2) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1 && (param1 === \"North\" || param2 === \"North\")) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2 && (param1 === \"East\" || param2 === \"East\")) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2 && (param1 === \"South\" || param2 === \"South\")) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1 && (param1 === \"West\" || param2 === \"West\")) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function ellerMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var list = [];\r\n  var visited = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  var idCounter = 1;\r\n  var currentCell = null;\r\n  for (let i = 1; i < grid.length; i += 2) {\r\n    var map = new Map();\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      if (grid[i][j].id === 0) {\r\n        grid[i][j].id = idCounter;\r\n        idCounter++;\r\n      }\r\n    }\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      currentCell = grid[i][j];\r\n      map.set(currentCell, currentCell.id);\r\n    }\r\n\r\n    //SIDE\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      currentCell = grid[i][j];\r\n      getNeighboringCells(currentCell, grid);\r\n      path.push(currentCell);\r\n      currentCell.isWall = false;\r\n\r\n      if (\r\n        currentCell.neighbors[0] !== null &&\r\n        currentCell.neighbors[0][1].id !== currentCell.id\r\n      ) {\r\n        if (grid.length - 2 === i) {\r\n          sideMove(grid, currentCell, map, path);\r\n        } else if (Math.random() < 0.5) {\r\n          sideMove(grid, currentCell, map, path);\r\n        }\r\n      }\r\n    }\r\n    if (grid.length - 2 !== i) {\r\n      //DOWN\r\n      list = [];\r\n      visited = [];\r\n\r\n      map.forEach((value, key) => {\r\n        list.push(value);\r\n      });\r\n\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        currentCell = grid[i][j];\r\n        var counter = list.filter((x) => x === currentCell.id).length;\r\n        if (counter === 1 && !visited.includes(currentCell.id)) {\r\n          path.push(currentCell.neighbors[1][0]);\r\n          currentCell.neighbors[1][0].isWall = false;\r\n          currentCell.neighbors[1][1].id = currentCell.id;\r\n        } else if (counter > 1) {\r\n          if (Math.random() > 0.5) {\r\n            path.push(currentCell.neighbors[1][0]);\r\n            currentCell.neighbors[1][0].isWall = false;\r\n            currentCell.neighbors[1][1].id = currentCell.id;\r\n            remove(list, visited, currentCell.id, true);\r\n          }\r\n          remove(list, visited, currentCell.id, false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction sideMove(grid, currentCell, map, path) {\r\n  path.push(currentCell.neighbors[0][0]);\r\n  currentCell.neighbors[0][0].isWall = false;\r\n  const aim = currentCell.neighbors[0][1].id;\r\n  map.forEach((value, key) => {\r\n    if (value === aim) {\r\n      map.set(key, currentCell.id);\r\n      grid[key.row][key.col].id = currentCell.id;\r\n    }\r\n  });\r\n\r\n  currentCell.neighbors[0][1].id = currentCell.id;\r\n}\r\n\r\nfunction remove(array, visited, item, isVisited) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] === item) {\r\n      if (isVisited) {\r\n        visited.push(item);\r\n      }\r\n\r\n      array.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nimport { clearVisitedCells } from \"../cleaning\";\r\n\r\nexport function bidirectionalSlow(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      setTimeout(() => {\r\n        animateBidirectionalPathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (i < main.length && !main[i].start && !main[i].end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited-animated\", main[i]);\r\n      }\r\n      if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n        visualizeCell(\"cell\", \"cell cell-visitedSecondary-animated\", sec[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\nexport function bidirectionalFast(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      animateBidirectionalPathFast(cellsInOrder);\r\n    }\r\n\r\n    if (i < main.length && !main[i].start && !main[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visited\", main[i]);\r\n    }\r\n    if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visitedSec\", sec[i]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction animateBidirectionalPathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      visualizeCell(\"cell\", \"cell cell-pathThirdly-animated\", cell);\r\n     \r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nfunction animateBidirectionalPathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    visualizeCell(\"cell\", \"cell cell-pathThird\", cell);\r\n   \r\n  }\r\n}\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i < visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (!cell.end && !cell.start) {\r\n      visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-visited\", cell);\r\n      }\r\n    } else {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animateAstarPathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animateAstarPathFast(cellsInOrder);\r\n}\r\n\r\nfunction animateAstarPathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-pathSec\", cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction animateAstarPathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-pathSecondary-animated\", cell);\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];    \r\n    if (currentCell === endCell) {\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nexport function depthFirst(grid, startCell, endCell, speed) {\r\n  clearVisitedCells();\r\n  var mainList = [];\r\n  var visitedCells = [];\r\n  startCell.visited = true;\r\n  mainList.push(startCell);\r\n  visitedCells.push(startCell);\r\n  while (!!mainList.length) {\r\n    const currentCell = mainList.pop();\r\n    currentCell.visited = true;\r\n\r\n    if (currentCell.end === true) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    if (currentCell.isWall && !currentCell.start && !currentCell.end) continue;\r\n    if (!visitedCells.includes(currentCell)) {\r\n      visitedCells.push(currentCell);\r\n    }\r\n\r\n    var neighbors = getUnvisitedNeighbors(currentCell, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].previous = currentCell;\r\n      mainList.push(neighbors[i]);\r\n    }\r\n  }\r\n  DoAnimation(visitedCells, endCell, speed);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  Left(row, col, grid, neighbors);\r\n\r\n  Down(row, col, grid, neighbors);\r\n  Right(row, col, grid, neighbors);\r\n  Up(row, col, grid, neighbors);\r\n\r\n  return neighbors;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar id = 0;\r\nexport function breadthFirst(grid, startCell, endCell, speed) {\r\n  clearVisitedCells();\r\n  var mainList = [];\r\n  var visitedCells = [];\r\n  startCell.visited = true;\r\n  mainList.push(startCell);\r\n  visitedCells.push(startCell);\r\n\r\n  while (!!mainList.length) {\r\n    const currentCell = mainList.shift();\r\n    visitedCells.push(currentCell);\r\n\r\n    if (currentCell.end === true) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    if (currentCell.isWall && !currentCell.start && !currentCell.end) continue;\r\n    var neighbors = getUnvisitedNeighbors(currentCell, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].visited = true;\r\n      neighbors[i].previous = currentCell;\r\n      mainList.push(neighbors[i]);\r\n    }\r\n  }\r\n  DoAnimation(visitedCells, endCell, speed);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  Up(row, col, grid, neighbors);\r\n  Right(row, col, grid, neighbors);\r\n  Down(row, col, grid, neighbors);\r\n  Left(row, col, grid, neighbors);\r\n  return neighbors;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { iterativeMaze } from \"../Algorithms/mazes/iterativeDF\";\r\nimport { recursiveMaze } from \"../Algorithms/mazes/recursiveDF\";\r\nimport { aldousBroderMaze } from \"../Algorithms/mazes/aldousBroder\";\r\nimport { kruskalMaze } from \"../Algorithms/mazes/kruskal\";\r\nimport { wilsonMaze } from \"../Algorithms/mazes/wilson\";\r\nimport { recursiveDivision } from \"../Algorithms/mazes/recursiveDivision\";\r\nimport { basicHorizontal } from \"../Algorithms/mazes/basicHorizontal\";\r\nimport { basicVertical } from \"../Algorithms/mazes/basicVertical\";\r\nimport { binaryTreeAlg } from \"../Algorithms/mazes/binaryTree\";\r\nimport { ellerMaze } from \"../Algorithms/mazes/eller\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\nimport { depthFirst } from \"../Algorithms/searchers/depthFirst\";\r\nimport { breadthFirst } from \"../Algorithms/searchers/breadthFirst\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      currentMaze: \"default\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: false,\r\n      optimizedVisualization: true,\r\n      bidirectionalVisualization: false,\r\n    };\r\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\r\n    this.handleButtonChange = this.handleButtonChange.bind(this);\r\n    this.handleMazeChange = this.handleMazeChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleAlgoChange(event) {\r\n    this.setState({ currentAlg: event.target.value });\r\n  }\r\n  handleButtonChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"bidirectional\") {\r\n      this.setState(\r\n        { bidirectionalVisualization: !this.state.bidirectionalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleMazeChange(event) {\r\n    if (event.target.value === \"random\") getRandomMazedGrid(this.state.grid);\r\n    else if (event.target.value === \"prim\") primMaze(this.state.grid);\r\n    else if (event.target.value === \"iterative\") iterativeMaze(this.state.grid);\r\n    else if (event.target.value === \"recursive\") recursiveMaze(this.state.grid);\r\n    else if (event.target.value === \"aldousBroder\")\r\n      aldousBroderMaze(this.state.grid);\r\n    else if (event.target.value === \"kruskal\") kruskalMaze(this.state.grid);\r\n    else if (event.target.value === \"wilson\") wilsonMaze(this.state.grid);\r\n    else if (event.target.value === \"recursiveDivision\")\r\n      recursiveDivision(this.state.grid);\r\n    else if (event.target.value === \"basicHorizontal\")\r\n      basicHorizontal(this.state.grid);\r\n    else if (event.target.value === \"basicVertical\")\r\n      basicVertical(this.state.grid);\r\n    else if (event.target.value === \"eller\") ellerMaze(this.state.grid);\r\n    else if (event.target.value === \"binaryTreeNW\")\r\n      binaryTreeAlg(this.state.grid, \"NorthWest\");\r\n    else if (event.target.value === \"binaryTreeNE\")\r\n      binaryTreeAlg(this.state.grid, \"NorthEast\");\r\n    else if (event.target.value === \"binaryTreeSW\")\r\n      binaryTreeAlg(this.state.grid, \"SouthWest\");\r\n    else if (event.target.value === \"binaryTreeSE\")\r\n      binaryTreeAlg(this.state.grid, \"SouthEast\");\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.bidirectionalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"depthFirst\") {\r\n      depthFirst(grid, startCell, endCell, speed);\r\n    } else if (this.state.currentAlg === \"breadthFirst\") {\r\n      breadthFirst(grid, startCell, endCell, speed);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleAlgoChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n          <option value=\"depthFirst\">Depth-First Search</option>\r\n          <option value=\"breadthFirst\">Breadth-First Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Bidirectional\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.bidirectionalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"bidirectional\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <select\r\n          value={this.state.currentMaze}\r\n          onChange={this.handleMazeChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"default\" disabled hidden>\r\n            Mazes\r\n          </option>\r\n          <optgroup label=\"Patterns\">\r\n            <option value=\"random\">Random</option>\r\n            <option value=\"basicHorizontal\">Basic Horizontal</option>\r\n            <option value=\"basicVertical\">Basic Vertical</option>\r\n          </optgroup>\r\n          <optgroup label=\"Algorithms\">\r\n            <option value=\"prim\">Prim</option>\r\n            <option value=\"iterative\">Iterative Depth-first</option>\r\n            <option value=\"recursive\">Recursive Depth-first</option>\r\n            <option value=\"aldousBroder\">Aldous-Broder</option>\r\n            <option value=\"kruskal\">Kruskal</option>\r\n            <option value=\"wilson\">Wilson</option>\r\n            <option value=\"recursiveDivision\">Recursive Division</option>\r\n            <option value=\"eller\">Eller</option>\r\n          </optgroup>\r\n          <optgroup label=\"&nbsp;&nbsp;&nbsp;Binary Tree Algorithm\">\r\n            <option value=\"binaryTreeSE\">&nbsp;&nbsp;&nbsp;South-East</option>\r\n            <option value=\"binaryTreeSW\">&nbsp;&nbsp;&nbsp;South-West</option>\r\n            <option value=\"binaryTreeNE\">&nbsp;&nbsp;&nbsp;North-East</option>\r\n            <option value=\"binaryTreeNW\">&nbsp;&nbsp;&nbsp;North-West</option>\r\n          </optgroup>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n    this.title = \"PathFinder & Maze generator\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = this.title;\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n    return position % 2 === 0 ? position + 1 : position;\r\n    // return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        This project is still under construction!\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}