{"version":3,"sources":["Cell/index.js","Algorithms/methods.js","Algorithms/animations.js","Algorithms/searchers/dijsktra.js","Algorithms/searchers/astar.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","isWall","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","createGrid","grid","i","rows","push","j","columns","visited","previous","f","g","h","neighbors","startR","startC","endR","endC","getCellsInOrder","endCell","cells","cell","unshift","clearVisitedCells","newGrid","window","gridComponent","state","visualizeCell","setState","placeWall","newCell","status","doAlgorithm","category","name","document","getElementById","animatePathSlow","cellsInOrder","setTimeout","length","previousVisualization","animatePathFast","getUnvisitedNeighbors","direction","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","neighbor","DoAnimation","visitedCells","finishCell","speed","animateSlow","animateFast","astar","startCell","findNeighbors","openSet","cameFrom","allSet","heuristic","current","currentCell","eliminateFromSet","k","tentative_gScore","Math","SQRT2","includes","slice","cell1","cell2","abs","set","splice","closedSet","animateAstarSlow","animateAstarFast","Grid","isMouseDown","isStartOn","isEndOn","startRow","startCol","endRow","endCol","currentAlg","unvisitedCells","previousRow","sort","nextCell","shift","dijkstra","diagonalVisualization","clear","type","clearBoard","handleChange","bind","event","target","this","value","map","index","key","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","Component","App","getPosition","parameter","position","floor","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fb0894e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  } else if (props.data.isWall) {\r\n    return \"cell-wall\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","export function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n        //TODO: ASTAR scenario (this variables shall be handled differently later)\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (cell.start || cell.end || cell.isWall) {\r\n        continue;\r\n      }\r\n      visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { visualizeCell, clearVisitedCells } from \"../Algorithms/methods\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 20 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}\r\n","import { animateFast, animateSlow } from \"../../Algorithms/animations\";\r\nimport { getCellsInOrder, clearVisitedCells } from \"../../Algorithms/methods\";\r\nvar id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, finishCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(finishCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"../../Algorithms/animations\";\r\nimport { getCellsInOrder, clearVisitedCells } from \"../../Algorithms/methods\";\r\n\r\nexport function astar(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];\r\n\r\n    if (currentCell === endCell) {\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g +\r\n        (neighbor.row - currentCell.row === 0 ||\r\n        neighbor.col - currentCell.col === 0\r\n          ? 1\r\n          : Math.SQRT2);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2) {\r\n  /* return Math.sqrt(\r\n    (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n      (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n  );*/\r\n  return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col); //Optimal\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, finishCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(finishCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport {\r\n  clearVisitedCells,\r\n  createGrid,\r\n  clearBoard,\r\n  placeWall,\r\n} from \"../Algorithms/methods\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"astar\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: true,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"choice\") {\r\n      this.setState({ currentAlg: event.target.value });\r\n    }\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");            \r\n            }\r\n          }\r\n        );\r\n\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");              \r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const finishCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        finishCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        finishCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    }\r\n  };\r\n\r\n  clear = (type) => {\r\n    if (type === \"path\") {\r\n      clearVisitedCells();\r\n    } else if (type === \"grid\") {\r\n      clearBoard(this.props);\r\n    }\r\n    this.setState({ status: \"pending\" });\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleChange}\r\n          name=\"choice\"\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            this.clear(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            this.clear(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n\r\n    return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 10;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 10;\r\n      }\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}