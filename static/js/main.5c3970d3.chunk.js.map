{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/mazes/animations.js","Algorithms/mazes/default.js","Algorithms/mazes/prim.js","Algorithms/mazes/iterativeDF.js","Algorithms/mazes/recursiveDF.js","Algorithms/mazes/aldousBroder.js","Algorithms/mazes/kruskal.js","Algorithms/mazes/wilson.js","Algorithms/mazes/recursiveDivision.js","Algorithms/mazes/basicHorizontal.js","Algorithms/mazes/basicVertical.js","Algorithms/mazes/binaryTree.js","Algorithms/mazes/eller.js","Algorithms/searchers/animations.js","Algorithms/searchers/dijsktra.js","Algorithms/searchers/astar.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","visited","previous","f","g","h","neighbors","isWall","clearInfinityVariables","push","direction","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","visualizeOnWalledGrid","path","setTimeout","length","a","currentPath","isOptimalPath","aim","Promise","r","visualizeOnEmptyGrid","getRandomMazedGrid","numberOfCells","wallAmount","Math","floor","random","visualizeRandom","getNeighboringWalls","wallPairs","neighbor","takeRandomPair","position","pair","splice","takeLastCell","cellsWithUnvisitedNeighbors","getNeighboringCells","neighboringUnvisitedPairs","recursiveMaze","originalGrid","JSON","parse","stringify","recursion","currentCell","randomPair","aldousBroderMaze","unvisitedCells","visualizationList","current","filter","item","visualizeABMaze","kruskalMaze","idCounter","validWalls","map","Map","set","getSurroundingCells","array","temp","shuffleArray","wall","first","get","second","forEach","value","key","includes","wilsonMaze","newPath","takeRandomCell","getRandomCell","originalAim","nextCell","removeCycle","visualizeWilson","clearDirections","recursiveDivision","middle","leftIndex","rightIndex","drawEdges","topLeft","topRight","bottomLeft","bottomRight","width","height","randomPosition","getMiddleLine","getRandomPosition","verticalLeft","verticalRight","horizontalTop","horizontalBottom","reference","half","ceil","size","num","basicHorizontal","exc","basicVertical","binaryTreeAlg","updateCells","getDirection","param1","param2","some","animatePathSlow","cellsInOrder","previousVisualization","animatePathFast","getUnvisitedNeighbors","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","DoAnimation","visitedCells","speed","animateSlow","animateFast","astar","startCell","optimized","findNeighbors","openSet","cameFrom","allSet","heuristic","console","log","eliminateFromSet","k","tentative_gScore","dScore","slice","cell1","cell2","SQRT2","abs","sqrt","closedSet","animateAstarSlow","animateAstarFast","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","previousRow","sort","shift","dijkstra","diagonalVisualization","optimizedVisualization","currentMaze","handleAlgoChange","bind","handleButtonChange","handleMazeChange","event","this","target","currentPair","primMaze","iterativeMaze","counter","delete","ellerMaze","index","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","hidden","label","Component","App","getPosition","parameter","getSize","x","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"mRAEA,SAASA,EAASC,GAChB,OAAIA,EAAMC,KAAKC,MACN,aACEF,EAAMC,KAAKE,IACb,WAEA,GAIX,IAyBeC,EAzBF,SAACJ,GACZ,OACE,yBACEK,UAAS,eAAUN,EAASC,IAC5BM,GAAE,eAAUN,EAAMC,KAAKM,IAArB,YAA4BP,EAAMC,KAAKO,KACzCC,YAAa,SAACC,GACZA,EAAEC,iBACFX,EAAMS,YAAYT,EAAMC,OAE1BW,aAAc,kBAAMZ,EAAMY,aAAaZ,EAAMC,OAC7CY,UAAW,kBAAMb,EAAMa,UAAUb,EAAMC,OACvCa,cAAe,SAACJ,GACdA,EAAEC,mBAGJ,yBACEN,UAAS,OACTC,GAAE,cAASN,EAAMC,KAAKM,IAApB,YAA2BP,EAAMC,KAAKO,MAEvCR,EAAMC,KAAKc,WAAaC,IAAW,GAAKhB,EAAMC,KAAKc,Y,eC7BrD,SAASE,EAAgBC,GACjB,SAATA,EACFC,IACkB,SAATD,GA+BN,SAAoBlB,GACzBmB,IACAC,OAAOC,cAAcC,SAAS,CAC5BC,KAAMC,EAAWxB,GACjByB,SAAUzB,EAAM0B,OAChBC,SAAU3B,EAAM4B,OAChBC,OAAQ7B,EAAM8B,KACdC,OAAQ/B,EAAMgC,OAPgB,oBASdZ,OAAOC,cAAcY,MAAMV,MATb,IAShC,2BAAmD,CAAC,IAAD,EAAxChB,EAAwC,sBAC9BA,GAD8B,IACjD,2BAAwB,CAAC,IAAd2B,EAAa,QACjBA,EAAK/B,KAAQ+B,EAAKhC,OACrBiC,EAAc,OAAQ,kBAAmBD,IAHI,gCATnB,+BA9B9BE,CAAWhB,OAAOC,cAAcrB,OAElCoB,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YAGnC,SAASlB,IAEd,IADA,IAAImB,EAAUlB,OAAOC,cAAcY,MAAMV,KAChCgB,EAAI,EAAGA,EAAInB,OAAOC,cAAcrB,MAAMwC,KAAMD,IACnD,IAAK,IAAIE,EAAI,EAAGA,EAAIrB,OAAOC,cAAcrB,MAAM0C,QAASD,IAAK,CAC3D,IAAIP,EAAOI,EAAQC,GAAGE,GACtBP,EAAKS,SAAU,EACfT,EAAKnB,SAAWC,IAChBkB,EAAKU,SAAW,KAChBV,EAAKW,EAAI7B,IACTkB,EAAKY,EAAI9B,IACTkB,EAAKa,EAAI/B,IACTkB,EAAKc,UAAY,GAEjBb,EAAc,MAAO,MAAOD,GACvBA,EAAKe,QAAWf,EAAK/B,KAAQ+B,EAAKhC,OACrCiC,EAAc,OAAQ,kBAAmBD,IAEvCA,EAAKe,QAAWf,EAAK/B,KAAQ+B,EAAKhC,OACpCiC,EAAc,OAAQ,iBAAkBD,GAI9Cd,OAAOC,cAAcC,SAAS,CAAEC,KAAMe,IAqBjC,SAASY,EAAuB3B,GAAO,IAAD,gBACzBA,GADyB,IAC3C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACtBA,EAAKnB,SAAWC,IAChBkB,EAAKW,EAAI7B,IACTkB,EAAKY,EAAI9B,IACTkB,EAAKa,EAAI/B,IACTkB,EAAKS,SAAU,EACfT,EAAK5B,GAAK,GAPU,gCADmB,8BAW3Cc,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IC/DjC,SAASC,EAAWxB,GAGzB,IAFA,IAAIuB,EAAO,GAEFgB,EAAI,EAAGA,EAAIvC,EAAMwC,KAAMD,IAAK,CACnChB,EAAK4B,KAAK,IACV,IAAK,IAAIV,EAAI,EAAGA,EAAIzC,EAAM0C,QAASD,IACjClB,EAAKgB,GAAGY,KAAK,CACX7C,GAAI,EACJC,IAAKgC,EACL/B,IAAKiC,EACLvC,OAAO,EACPC,KAAK,EACLY,SAAUC,IACV2B,SAAS,EACTM,QAAQ,EACRL,SAAU,KACVQ,UAAW,GAEXP,EAAG7B,IACH8B,EAAG9B,IACH+B,EAAG/B,IACHgC,UAAW,KAQjB,OAHAzB,EAAKvB,EAAM0B,QAAQ1B,EAAM4B,QAAQ1B,OAAQ,EACzCqB,EAAKvB,EAAM8B,MAAM9B,EAAMgC,MAAM7B,KAAM,EAE5BoB,EAGF,SAAS8B,EAAgBC,GAG9B,IAFA,IAAMC,EAAQ,GACVrB,EAAOoB,EACK,OAATpB,GACLqB,EAAMC,QAAQtB,GACdA,EAAOA,EAAKU,SAEd,OAAOW,EAGF,SAASE,EAAUvB,GACxB,IAAIwB,EAAUxB,EACVI,EAAUlB,OAAOC,cAAcY,MAAMV,KACzCmC,EAAQT,QAAUS,EAAQT,OACtBS,EAAQT,OACVd,EAAc,OAAQ,0BAA2BD,GAEjDC,EAAc,OAAQ,kBAAmBD,GAI3CC,EAAc,MAAO,MAAOuB,GAC5BA,EAAQf,SAAU,EAElBL,EAAQJ,EAAK3B,KAAK2B,EAAK1B,KAAOkD,EAC9BtC,OAAOC,cAAcC,SAAS,CAAEC,KAAMe,IAAW,WACL,aAAtClB,OAAOC,cAAcY,MAAMI,SAC7BlB,IACAC,OAAOC,cAAcsC,YAAY,YAKhC,SAASxB,EAAcyB,EAAUC,EAAM3B,GAC5C4B,SAASC,eAAT,UACKH,EADL,YACiB1B,EAAK3B,IADtB,YAC6B2B,EAAK1B,MAChCH,UAAYwD,E,4BCrET,SAASG,EAAsBzC,EAAM0C,GAC1C7C,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YADQ,oBAE9Bd,GAF8B,IAEhD,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACjBA,EAAK/B,KAAQ+B,EAAKhC,OACrBiC,EAAc,OAAQ,iBAAkBD,IAHtB,gCAFwB,8BAUhD,IAVgD,eAUvCK,GACP2B,YAAW,WACL3B,IAAM0B,EAAKE,OAIVF,EAAK1B,GAAGpC,KAAQ8D,EAAK1B,GAAGrC,OAC3BiC,EAAc,OAAQ,kBAAmB8B,EAAK1B,IAJ9CnB,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,cAMzC,GAAKE,IATDA,EAAI,EAAGA,GAAK0B,EAAKE,OAAQ5B,IAAM,EAA/BA,G,4CAqEJ,WAA+BhB,EAAM0C,GAArC,yCAAAG,EAAA,sDACLhD,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YADnC,cAEad,GAFb,IAEL,2BAAwB,CAAbhB,EAAa,sBACHA,GADG,IACtB,4BAAW2B,EAAa,SACZ/B,KAAQ+B,EAAKhC,OACrBiC,EAAc,OAAQ,iBAAkBD,GAHtB,gCAFnB,8BAUIK,EAAI,EAVR,YAUWA,GAAK0B,EAAKE,QAVrB,oBAWC5B,IAAM0B,EAAKE,OAXZ,uBAYD/C,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YAZvC,6BAeCO,EAAW,KACXyB,EAAcJ,EAAK1B,GAAG,GACtB+B,EAAgBL,EAAK1B,GAAG,GACxBgC,EAAMN,EAAK1B,GAAG,GAEdrB,EAAO4C,SAASC,eAAkB,OAA3B,WAAqCQ,EAAIhE,IAAzC,YAAgDgE,EAAI/D,MAC5DH,UAEEkE,EAAIpE,KAAQoE,EAAIrE,OACnBiC,EAAc,OAAQ,qBAAsBoC,GAEzCD,EA1BF,iBA2BQ7B,EAAI,EA3BZ,aA2BeA,EAAI4B,EAAYF,QA3B/B,oBA4BkB,OAAbvB,GACFT,EAAc,OAAQ,oBAAqBS,GAGxCyB,EAAY5B,GAAGtC,KAAQkE,EAAY5B,GAAGvC,QACzCiC,EAAc,OAAQ,qBAAsBkC,EAAY5B,IACxDG,EAAWyB,EAAY5B,IAGrB4B,EAAY5B,KAAO4B,EAAYF,OAAS,EArC7C,kCAsCS,IAAIK,SAAQ,SAACC,GAAD,OAAOP,WAAWO,EAAG,MAtC1C,QA2BuChC,IA3BvC,wBAkDH,IARK8B,EAAIpE,KAAQoE,EAAIrE,OAEjBiC,EAAc,OADH,mBAATjB,EACoB,iBAEA,kBAFkBqD,GAMnC9B,EAAI4B,EAAYF,OAAS,EAAG1B,GAAK,EAAGA,IACtC4B,EAAY5B,GAAGtC,KAAQkE,EAAY5B,GAAGvC,OAIvCiC,EAAc,OAHXmC,EAGmB,kBAFA,iBAEmBD,EAAY5B,IAvDxD,QAU6BF,IAV7B,4D,sBA8DA,SAASmC,EAAqBnD,EAAM0C,GACzC7C,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YADO,oBAE7Bd,GAF6B,IAE/C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACjBA,EAAK/B,KAAQ+B,EAAKhC,OACrBiC,EAAc,OAAQ,kBAAmBD,IAHvB,gCAFuB,8BAU/C,IAV+C,eAUtCK,GACP2B,YAAW,WACL3B,IAAM0B,EAAKE,OAIVF,EAAK1B,GAAGpC,KAAQ8D,EAAK1B,GAAGrC,OAC3BiC,EAAc,OAAQ,iBAAkB8B,EAAK1B,IAJ7CnB,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,cAMzC,GAAKE,IATDA,EAAI,EAAGA,GAAK0B,EAAKE,OAAQ5B,IAAM,EAA/BA,GCrJJ,SAASoC,EAAmBpD,GACjCJ,IACA,IAFuC,EAEnC8C,EAAO,GAF4B,cAGrB1C,GAHqB,IAGvC,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAHe,8BAYvC,IAJA,IAAI2B,GAAiBrD,EAAK4C,OAAS,IAAM5C,EAAK,GAAG4C,OAAS,GAEtDU,EAAaC,KAAKC,MAAsB,GAAhBH,GAEnBrC,EAAI,EAAGA,EAAIsC,EAAYtC,IAAK,CACnC,IAAIhC,EAAMuE,KAAKC,MAAMD,KAAKE,UAAYzD,EAAK4C,OAAS,IAChD3D,EAAMsE,KAAKC,MAAMD,KAAKE,UAAYzD,EAAK,GAAG4C,OAAS,IAEnDjC,EAAOX,EAAKhB,GAAKC,GACjB0B,EAAKhC,OAASgC,EAAK/B,KAAO+B,EAAKe,OACjCV,KAEAL,EAAKe,QAAS,EACdgB,EAAKd,KAAKjB,IAGdd,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IDHjC,SAAyBA,EAAM0C,GACpC7C,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YADE,oBAExBd,GAFwB,IAE1C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACjBA,EAAK/B,KAAQ+B,EAAKhC,OACrBiC,EAAc,OAAQ,kBAAmBD,IAHvB,gCAFkB,8BAU1C,IAV0C,eAUjCK,GACP2B,YAAW,WACL3B,IAAM0B,EAAKE,OAIVF,EAAK1B,GAAGpC,KAAQ8D,EAAK1B,GAAGrC,OAC3BiC,EAAc,OAAQ,iBAAkB8B,EAAK1B,IAJ7CnB,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,cAMzC,EAAIE,IATAA,EAAI,EAAGA,GAAK0B,EAAKE,OAAQ5B,IAAM,EAA/BA,GCNT0C,CAAgB1D,EAAM0C,GCGxB,SAASiB,EAAoBhD,EAAMX,EAAM4D,GAAY,IAC7C3E,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIA,EAAM,EAAG,CAEX,IAAI6E,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B2E,EAAUhC,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAE1C,GAAIA,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAE5B,IAAIiB,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B2E,EAAUhC,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAE5C,GAAID,EAAMgB,EAAK4C,OAAS,EAAG,CAEzB,IAAIiB,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B2E,EAAUhC,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAE1C,GAAIA,EAAM,EAAG,CAEX,IAAI4E,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B2E,EAAUhC,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,MAI9C,SAAS6E,EAAeF,GACtB,IAAIG,EAAWR,KAAKC,MAAMD,KAAKE,SAAWG,EAAUhB,QAChDoB,EAAOJ,EAAUG,GAErB,OADAH,EAAUK,OAAOF,EAAU,GACpBC,ECfT,SAASE,EAAaC,GACpB,IAAIJ,EAAWI,EAA4BvB,OAAS,EAChDjC,EAAOwD,EAA4BJ,GAEvC,OADAI,EAA4BF,OAAOF,EAAU,GACtCpD,EAGT,SAASyD,EAAoBzD,EAAMX,GACjC,IAAIqE,EAA4B,GAC1BpF,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIA,EAAM,EAAG,CAEX,IAAI6E,EAAW7D,EAAKhB,EAAM,GAAGC,IACM,IAA/Be,EAAKhB,EAAM,GAAGC,GAAKmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAG5D,GAAIA,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAE5B,IAAIiB,EAAW7D,EAAKhB,GAAKC,EAAM,IACI,IAA/Be,EAAKhB,GAAKC,EAAM,GAAGmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAG9D,GAAID,EAAMgB,EAAK4C,OAAS,EAAG,CAEzB,IAAIiB,EAAW7D,EAAKhB,EAAM,GAAGC,IACM,IAA/Be,EAAKhB,EAAM,GAAGC,GAAKmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAG5D,GAAIA,EAAM,EAAG,CAEX,IAAI4E,EAAW7D,EAAKhB,GAAKC,EAAM,IACI,IAA/Be,EAAKhB,GAAKC,EAAM,GAAGmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAI9D,OAAOoF,EC9EF,SAASC,EAAcC,GAC5B7E,EAAgB,QAChB,IAF0C,EAEtCgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAHK,cAIxBvE,GAJwB,IAI1C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAJkB,+BAiB5C,SAASiD,EAAU3E,EAAM4E,EAAalC,GACpCkC,EAAYxD,SAAU,EACtBwD,EAAYlD,QAAS,EACrBgB,EAAKd,KAAKgD,GACVA,EAAYnD,UAad,SAA6Bd,EAAMX,GACjC,IAAIqE,EAA4B,GAC1BpF,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIA,EAAM,EAAG,CAEX,IAAI6E,EAAW7D,EAAKhB,EAAM,GAAGC,IACM,IAA/Be,EAAKhB,EAAM,GAAGC,GAAKmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAG5D,GAAIA,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAE5B,IAAIiB,EAAW7D,EAAKhB,GAAKC,EAAM,IACI,IAA/Be,EAAKhB,GAAKC,EAAM,GAAGmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAG9D,GAAID,EAAMgB,EAAK4C,OAAS,EAAG,CAEzB,IAAIiB,EAAW7D,EAAKhB,EAAM,GAAGC,IACM,IAA/Be,EAAKhB,EAAM,GAAGC,GAAKmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAG5D,GAAIA,EAAM,EAAG,CAEX,IAAI4E,EAAW7D,EAAKhB,GAAKC,EAAM,IACI,IAA/Be,EAAKhB,GAAKC,EAAM,GAAGmC,SACrBiD,EAA0BzC,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAI9D,OAAOoF,EA7CiBD,CAAoBQ,EAAa5E,GACzD,KAAO4E,EAAYnD,UAAUmB,OAAS,GAAG,CACvC,IAAImB,EAAWR,KAAKC,MAAMD,KAAKE,SAAWmB,EAAYnD,UAAUmB,QAC5DiC,EAAaD,EAAYnD,UAAUsC,GACvCa,EAAYnD,UAAUwC,OAAOF,EAAU,GAClCc,EAAW,GAAGzD,UACjByD,EAAW,GAAGnD,QAAS,EACvBgB,EAAKd,KAAKiD,EAAW,IACrBF,EAAU3E,EAAM6E,EAAW,GAAInC,KAnBnCiC,CAAU3E,EADQA,EAAK,GAAG,GACG0C,GAC7Bf,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IAEtCyC,EAAsBzC,EAAM0C,GCbvB,SAASoC,EAAiBP,GAC/B7E,EAAgB,QAChB,IAF6C,EAEzCM,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IACjCQ,EAAiB,GACjBC,EAAoB,GAJqB,cAK3BhF,GAL2B,IAK7C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACtBA,EAAKe,QAAS,EACVf,EAAK3B,IAAM,IAAM,GAAK2B,EAAK1B,IAAM,IAAM,IACzC0B,EAAK5B,GAAKgG,EAAenC,OACzBmC,EAAenD,KAAKjB,GACpByD,EAAoBzD,EAAMX,KANR,gCALqB,8BAgB7C,IAAIiF,EAAUF,EAAe,GAC7BA,EAAed,OAAO,EAAG,GACzBgB,EAAQ7D,SAAU,EAClB6D,EAAQvD,QAAS,EAEjB,IArB6C,iBAsB3C,IAAMmC,EACJoB,EAAQxD,UAAU8B,KAAKC,MAAMD,KAAKE,SAAWwB,EAAQxD,UAAUmB,SACjEoC,EAAkBpD,KAAKiC,EAAS,IAChCmB,EAAkBpD,KAAKiC,EAAS,IAC3BA,EAAS,GAAGzC,UACfyC,EAAS,GAAGnC,QAAS,EACrBmC,EAAS,GAAGnC,QAAS,EACrBqD,EAAiBA,EAAeG,QAC9B,SAACC,GAAD,OAAUA,EAAKpG,KAAO8E,EAAS,GAAG9E,MAEpC8E,EAAS,GAAGzC,SAAU,GAExB6D,EAAUpB,EAAS,IAbZkB,EAAenC,QAAS,IAejCjB,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,ILIjC,SAAyBA,EAAM0C,GACpC7C,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YADE,oBAExBd,GAFwB,IAE1C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACjBA,EAAK/B,KAAQ+B,EAAKhC,OACrBiC,EAAc,OAAQ,iBAAkBD,IAHtB,gCAFkB,8BAW1C,IADA,IAAIU,EAAW,KAV2B,WAWjCL,GACP2B,YAAW,WACT,GAAI3B,IAAM0B,EAAKE,OAGb,OAFA/C,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,iBACxCF,EAAc,OAAQ,kBAAmB8B,EAAKA,EAAKE,OAAS,IAG7C,OAAbvB,IACEA,EAASK,OACXd,EAAc,OAAQ,iBAAkBS,GAExCT,EAAc,OAAQ,kBAAmBS,IAGxCqB,EAAK1B,GAAGpC,KAAQ8D,EAAK1B,GAAGrC,QAC3BiC,EAAc,OAAQ,oBAAqB8B,EAAK1B,IAChDK,EAAWqB,EAAK1B,MAEjB,GAAKA,IAlBDA,EAAI,EAAGA,GAAK0B,EAAKE,OAAQ5B,IAAM,EAA/BA,GKdToE,CAAgBpF,EAAMgF,GAUxB,SAASZ,EAAoBzD,EAAMX,GAAM,IAEjCf,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIA,EAAM,EAAG,CAEX,IAAI6E,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAE/C,GAAIA,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAE5B,IAAIiB,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAEjD,GAAID,EAAMgB,EAAK4C,OAAS,EAAG,CAEzB,IAAIiB,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAE/C,GAAIA,EAAM,EAAG,CAEX,IAAI4E,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,MCtE5C,SAASoG,EAAYd,GAC1B7E,EAAgB,QAChB,IAFwC,EAEpCgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IACjCe,EAAY,EACZC,EAAa,GACbC,EAAM,IAAIC,IAN0B,cAOtBzF,GAPsB,IAOxC,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACtBA,EAAKe,QAAS,EACVf,EAAK3B,IAAM,IAAM,GAAK2B,EAAK1B,IAAM,IAAM,EAEzCuG,EAAIE,IAAI/E,EAAM2E,KACL3E,EAAK3B,IAAM,IAAM,GAAK2B,EAAK1B,IAAM,IAAM,GAEjC,IAAb0B,EAAK3B,KACQ,IAAb2B,EAAK1B,KACL0B,EAAK3B,MAAQgB,EAAK4C,OAAS,GAC3BjC,EAAK1B,MAAQe,EAAK,GAAG4C,OAAS,IAG9B+C,EAAoBhF,EAAMX,GAC1BuF,EAAW3D,KAAKjB,KAfA,gCAPgB,+BAgE1C,SAAsBiF,GACpB,IAAK,IAAI5E,EAAI4E,EAAMhD,OAAS,EAAG5B,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIqC,KAAKC,MAAMD,KAAKE,UAAYzC,EAAI,IACpC6E,EAAOD,EAAM5E,GACjB4E,EAAM5E,GAAK4E,EAAM1E,GACjB0E,EAAM1E,GAAK2E,GAzCbC,CAAaP,GAEb,IA9BwC,iBA8BnC,IAAMQ,EAAI,KACPC,EAAQR,EAAIS,IAAIF,EAAKtE,UAAU,IAC/ByE,EAASV,EAAIS,IAAIF,EAAKtE,UAAU,IAClCuE,IAAUE,IACZV,EAAIW,SAAQ,SAACC,EAAOC,GACdD,IAAUF,GACZV,EAAIE,IAAIW,EAAKL,MAIjBD,EAAKtE,UAAU,GAAGC,QAAS,EAC3BqE,EAAKrE,QAAS,EACdqE,EAAKtE,UAAU,GAAGC,QAAS,EAEtBgB,EAAK4D,SAASP,EAAKtE,UAAU,KAAKiB,EAAKd,KAAKmE,EAAKtE,UAAU,IAC3DiB,EAAK4D,SAASP,IAAOrD,EAAKd,KAAKmE,GAC/BrD,EAAK4D,SAASP,EAAKtE,UAAU,KAAKiB,EAAKd,KAAKmE,EAAKtE,UAAU,MAhBpE,MAAmB8D,EAAnB,eAAgC,IAmBhC5D,EAAuB3B,GACvByC,EAAsBzC,EAAM0C,GAG9B,SAASiD,EAAoBI,EAAM/F,GAAO,IAClCf,EAAa8G,EAAb9G,IAAKD,EAAQ+G,EAAR/G,IACP+G,EAAK/G,IAAM,IAAM,GACnB+G,EAAKtE,UAAUG,KAAK5B,EAAKhB,GAAKC,EAAM,IACpC8G,EAAKtE,UAAUG,KAAK5B,EAAKhB,GAAKC,EAAM,MAEpC8G,EAAKtE,UAAUG,KAAK5B,EAAKhB,EAAM,GAAGC,IAClC8G,EAAKtE,UAAUG,KAAK5B,EAAKhB,EAAM,GAAGC,KC5D/B,SAASsH,EAAWhC,GACzB7E,EAAgB,QAChB,IAFuC,EAEnCgD,EAAO,GACPqC,EAAiB,GACjB/E,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAJE,cAKrBvE,GALqB,IAKvC,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACtBA,EAAKe,QAAS,EACVf,EAAK3B,IAAM,IAAM,GAAK2B,EAAK1B,IAAM,IAAM,IACzC0B,EAAK5B,GAAKgG,EAAenC,OACzBmC,EAAenD,KAAKjB,GACpByD,EAAoBzD,EAAMX,KANR,gCALe,8BAgBvC,IADA,IAAIwG,EAAU,GACPzB,EAAenC,QAAU,GAAG,CACjC,IAAIjE,EAAQ8H,EAAe1B,GACvB/B,EAAM0D,EAAc3B,GACpB4B,EAAc3D,EAEd4D,EAAWjI,EAEf,KAHA6H,EAAU,IAEF5E,KAAKgF,GACNA,IAAa5D,GAAK,CACvB,IAAIb,EACFyE,EAASnF,UACP8B,KAAKC,MAAMD,KAAKE,SAAWmD,EAASnF,UAAUmB,SAG9CgE,EAASxF,QACX4B,EAAM4D,GAENA,EAAS/E,UAAYM,EAAQ,GAC7ByE,EAAWzE,EAAQ,GACnBqE,EAAQ5E,KAAKO,EAAQ,IACrBqE,EAAQ5E,KAAKO,EAAQ,KAGrBqE,EAAQ5D,OAAS,GACnBF,EAAKd,KAAK,CAAC4E,GAAS,EAAOG,IAG7BE,EAAYD,EAAUjI,EAAOqE,EAAKhD,EAAM0C,EAAMiE,GAGhDhF,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IP6BjC,SAAP,6BO5BE8G,CAAgB9G,EAAM0C,GAUxB,SAAS+D,EAAe1B,GACtB,IAAIhB,EAAWR,KAAKC,MAAMD,KAAKE,SAAWsB,EAAenC,QACrDjC,EAAOoE,EAAehB,GAE1B,OADAgB,EAAed,OAAOF,EAAU,GACzBpD,EAGT,SAAS+F,EAAc3B,GAGrB,OADWA,EADIxB,KAAKC,MAAMD,KAAKE,SAAWsB,EAAenC,SAK3D,SAASiE,EAAYD,EAAUjI,EAAOqE,EAAKhD,EAAM0C,EAAMiE,GACrD,IAAIH,EAAU,GAKd,IAJAI,EAAWjI,GACFyC,SAAU,EACnBwF,EAASlF,QAAS,EAClB8E,EAAQ5E,KAAKgF,GACTA,IAAa5D,EACf,KAAO4D,IAAa5D,GAAK,CAAC,IAAD,EACJ4D,EAAb3H,EADiB,EACjBA,IAAKD,EADY,EACZA,IACgB,OAAvB4H,EAAS/E,WACX7B,EAAKhB,EAAM,GAAGC,GAAKyC,QAAS,EAC5B1B,EAAKhB,EAAM,GAAGC,GAAKyC,QAAS,EAC5B1B,EAAKhB,EAAM,GAAGC,GAAKmC,SAAU,EAC7BwF,EAAW5G,EAAKhB,EAAM,GAAGC,GACzBuH,EAAQ5E,KAAK5B,EAAKhB,EAAM,GAAGC,IAC3BuH,EAAQ5E,KAAK5B,EAAKhB,EAAM,GAAGC,KACK,SAAvB2H,EAAS/E,WAClB7B,EAAKhB,EAAM,GAAGC,GAAKyC,QAAS,EAC5B1B,EAAKhB,EAAM,GAAGC,GAAKyC,QAAS,EAC5B1B,EAAKhB,EAAM,GAAGC,GAAKmC,SAAU,EAC7BwF,EAAW5G,EAAKhB,EAAM,GAAGC,GACzBuH,EAAQ5E,KAAK5B,EAAKhB,EAAM,GAAGC,IAC3BuH,EAAQ5E,KAAK5B,EAAKhB,EAAM,GAAGC,KACK,UAAvB2H,EAAS/E,WAClB7B,EAAKhB,GAAKC,EAAM,GAAGyC,QAAS,EAC5B1B,EAAKhB,GAAKC,EAAM,GAAGyC,QAAS,EAC5B1B,EAAKhB,GAAKC,EAAM,GAAGmC,SAAU,EAC7BwF,EAAW5G,EAAKhB,GAAKC,EAAM,GAC3BuH,EAAQ5E,KAAK5B,EAAKhB,GAAKC,EAAM,IAC7BuH,EAAQ5E,KAAK5B,EAAKhB,GAAKC,EAAM,KACG,SAAvB2H,EAAS/E,YAClB7B,EAAKhB,GAAKC,EAAM,GAAGyC,QAAS,EAC5B1B,EAAKhB,GAAKC,EAAM,GAAGyC,QAAS,EAC5B1B,EAAKhB,GAAKC,EAAM,GAAGmC,SAAU,EAC7BwF,EAAW5G,EAAKhB,GAAKC,EAAM,GAC3BuH,EAAQ5E,KAAK5B,EAAKhB,GAAKC,EAAM,IAC7BuH,EAAQ5E,KAAK5B,EAAKhB,GAAKC,EAAM,KAI/BuH,EAAQ5D,OAAS,GACnBF,EAAKd,KAAK,CAAC4E,GAAS,EAAMG,IA9D9B,SAAyB3G,GAAO,IAAD,gBACXA,GADW,IAC7B,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB6C,UAAY,IAFG,gCADK,+BAiE7BkF,CAAgB/G,GAGlB,SAASoE,EAAoBzD,EAAMX,GAAM,IAEjCf,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIA,EAAM,EAAG,CAEX,IAAI6E,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,GAAM,OAErD,GAAIA,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAE5B,IAAIiB,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,GAAI,UAErD,GAAID,EAAMgB,EAAK4C,OAAS,EAAG,CAEzB,IAAIiB,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,GAAM,SAErD,GAAIA,EAAM,EAAG,CAEX,IAAI4E,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,GAAI,UC7IhD,SAAS+H,EAAkBzC,GAChC7E,EAAgB,QAChB,IAF8C,EAE1CgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAHS,cAI5BvE,GAJ4B,IAI9C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAJsB,+BAwBhD,SAAmB1B,EAAM0C,GACvB,IAAIuE,EAAS1D,KAAKC,MAAMxD,EAAK,GAAG4C,OAAS,GACrCsE,EAAYD,EAAS,EACrBE,EAAaF,EAAS,EAC1BvE,EAAKd,KAAK5B,EAAK,GAAGiH,IAClBjH,EAAK,GAAGiH,GAAQvF,QAAS,EACzB,KAAOwF,GAAa,GAClBxE,EAAKd,KAAK5B,EAAK,GAAGkH,IAClBxE,EAAKd,KAAK5B,EAAK,GAAGmH,IAClBnH,EAAK,GAAGkH,GAAWxF,QAAS,EAC5B1B,EAAK,GAAGmH,GAAYzF,QAAS,EAC7BwF,IACAC,IAEF,IAAK,IAAInG,EAAI,EAAGA,EAAIhB,EAAK4C,OAAS,EAAG5B,IACnC0B,EAAKd,KAAK5B,EAAKgB,GAAG,IAClB0B,EAAKd,KAAK5B,EAAKgB,GAAGhB,EAAK,GAAG4C,OAAS,IACnC5C,EAAKgB,GAAG,GAAGU,QAAS,EACpB1B,EAAKgB,GAAGhB,EAAK,GAAG4C,OAAS,GAAGlB,QAAS,EAEvCwF,EAAY,EACZC,EAAanH,EAAK,GAAG4C,OAAS,EAE9B,KAAOsE,IAAcD,GACnBvE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGsE,IAChCxE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGuE,IAChCnH,EAAKA,EAAK4C,OAAS,GAAGsE,GAAWxF,QAAS,EAC1C1B,EAAKA,EAAK4C,OAAS,GAAGuE,GAAYzF,QAAS,EAC3CwF,IACAC,IAEFzE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGqE,IAChCjH,EAAKA,EAAK4C,OAAS,GAAGqE,GAAQvF,QAAS,EA/CvC0F,CAAUpH,EAAM0C,GAChBiC,EACE3E,EAAK,GAAG,GACRA,EAAK,GAAGA,EAAK,GAAG4C,OAAS,GACzB5C,EAAKA,EAAK4C,OAAS,GAAG,GACtB5C,EAAKA,EAAK4C,OAAS,GAAG5C,EAAK,GAAG4C,OAAS,GACvC5C,EACA0C,GAGFf,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IACtCmD,EAAqBnD,EAAM0C,GAsC7B,SAASiC,EAAU0C,EAASC,EAAUC,EAAYC,EAAaxH,EAAM0C,GACnE,IAAI+E,EAAQH,EAASrI,IAAMoI,EAAQpI,IAAM,EACrCyI,EAASH,EAAWvI,IAAMqI,EAAQrI,IAAM,EAC5C,KAAI0I,EAAS,GAAKD,EAAQ,GAA1B,CAEA,IAAIR,EAAS,KACTU,EAAiB,KAErB,GAAIF,GAASC,EAAQ,CAEnBT,EAASW,EAAcH,EAAOJ,EAAQpI,KACtC0I,EAAiBE,EAAkBH,GAEnC,IAAK,IAAI1G,EAAIqG,EAAQrI,IAAKgC,EAAIqG,EAAQrI,IAAM0I,EAAQ1G,IAC9CA,IAAMqG,EAAQrI,IAAM2I,EAAiB,IACvCjF,EAAKd,KAAK5B,EAAKgB,GAAGiG,IAClBjH,EAAKgB,GAAGiG,GAAQvF,QAAS,GAG7B,GAAIgG,EAAS,GAAKD,EAAQ,EACxB,OAYF,OA4BJ,SAAsBzH,EAAMqH,EAASE,EAAYN,EAAQvE,GAErD1C,EAAKqH,EAAQrI,KAAKiI,EAAS,GAAGhI,IAAMoI,EAAQpI,IAAM,GAClDsI,EAAWvI,IAAMqI,EAAQrI,IAAM,GAE/B2F,EACE0C,EACArH,EAAKqH,EAAQrI,KAAKiI,EAAS,GAC3BM,EACAvH,EAAKuH,EAAWvI,KAAKiI,EAAS,GAC9BjH,EACA0C,GAjDFoF,CAAa9H,EAAMqH,EAASE,EAAYN,EAAQvE,QAuDpD,SACE1C,EACAqH,EACAC,EACAC,EACAC,EACAP,EACAvE,GAGE4E,EAASrI,IAAMe,EAAKqH,EAAQrI,KAAKiI,EAAS,GAAGhI,IAAM,GACnDe,EAAKuH,EAAWvI,KAAKiI,EAAS,GAAGjI,IAAMgB,EAAKqH,EAAQrI,KAAKiI,EAAS,GAAGjI,IAAM,GAE3E2F,EACE3E,EAAKqH,EAAQrI,KAAKiI,EAAS,GAC3BK,EACAtH,EAAKuH,EAAWvI,KAAKiI,EAAS,GAC9BO,EACAxH,EACA0C,GAzEFqF,CACE/H,EACAqH,EACAC,EACAC,EACAC,EACAP,EACAvE,GAKFuE,EAASW,EAAcF,EAAQL,EAAQrI,KACvC2I,EAAiBE,EAAkBJ,GACnC,IAAK,IAAIzG,EAAIqG,EAAQpI,IAAK+B,EAAIqG,EAAQpI,IAAMwI,EAAOzG,IAC7CA,IAAMqG,EAAQpI,IAAM0I,EAAiB,IACvCjF,EAAKd,KAAK5B,EAAKiH,GAAQjG,IACvBhB,EAAKiH,GAAQjG,GAAGU,QAAS,GAG7B,KAAIgG,EAAS,GAAKD,EAAQ,GAa1B,OA8CJ,SACEzH,EACAqH,EACAC,EACAC,EACAC,EACAP,EACAvE,GAGE4E,EAASrI,IAAMoI,EAAQpI,IAAM,GAC7Be,EAAKiH,EAAS,GAAGM,EAAWtI,KAAKD,IAAMqI,EAAQrI,IAAM,GAErD2F,EACE0C,EACAC,EACAtH,EAAKiH,EAAS,GAAGM,EAAWtI,KAC5Be,EAAKiH,EAAS,GAAGO,EAAYvI,KAC7Be,EACA0C,GA3EFsF,CACEhI,EACAqH,EACAC,EACAC,EACAC,EACAP,EACAvE,QA0EN,SAA0B1C,EAAMuH,EAAYC,EAAaP,EAAQvE,GAE7D1C,EAAKiH,EAAS,GAAGO,EAAYvI,KAAKA,IAChCe,EAAKiH,EAAS,GAAGM,EAAWtI,KAAKA,IACjC,GACFsI,EAAWvI,IAAMgB,EAAKiH,EAAS,GAAGM,EAAWtI,KAAKD,IAAM,GAExD2F,EACE3E,EAAKiH,EAAS,GAAGM,EAAWtI,KAC5Be,EAAKiH,EAAS,GAAGO,EAAYvI,KAC7BsI,EACAC,EACAxH,EACA0C,GArFFuF,CAAiBjI,EAAMuH,EAAYC,EAAaP,EAAQvE,IA2F5D,SAASkF,EAAc7D,EAAUmE,GAC/B,IAAIC,EAAO5E,KAAK6E,KAAKrE,EAAW,GAEhC,OADAoE,EAAOA,EAAO,IAAM,EAAIA,EAAOA,GAAQ5E,KAAKE,SAAW,IAAO,EAAI,IACpDyE,EAAY,EAG5B,SAASL,EAAkBQ,GACzB,IAAIC,EAAM/E,KAAKC,MAAMD,KAAKE,UAAY4E,EAAO,EAAI,IAAM,EACvD,OAAOC,EAAM,IAAM,EAAIA,EAAMA,GAAO/E,KAAKE,SAAW,IAAO,EAAI,GCrN1D,SAAS8E,EAAgBhE,GAC9B7E,EAAgB,QAChB,IAF4C,EAExCgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAHO,cAI1BvE,GAJ0B,IAI5C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAJoB,+BAgC9C,SAAmB1B,EAAM0C,GACvB,IAAIuE,EAAS1D,KAAKC,MAAMxD,EAAK,GAAG4C,OAAS,GACrCsE,EAAYD,EAAS,EACrBE,EAAaF,EAAS,EAC1BvE,EAAKd,KAAK5B,EAAK,GAAGiH,IAClBjH,EAAK,GAAGiH,GAAQvF,QAAS,EACzB,KAAOwF,GAAa,GAClBxE,EAAKd,KAAK5B,EAAK,GAAGkH,IAClBxE,EAAKd,KAAK5B,EAAK,GAAGmH,IAClBnH,EAAK,GAAGkH,GAAWxF,QAAS,EAC5B1B,EAAK,GAAGmH,GAAYzF,QAAS,EAC7BwF,IACAC,IAEF,IAAK,IAAInG,EAAI,EAAGA,EAAIhB,EAAK4C,OAAS,EAAG5B,IACnC0B,EAAKd,KAAK5B,EAAKgB,GAAG,IAClB0B,EAAKd,KAAK5B,EAAKgB,GAAGhB,EAAK,GAAG4C,OAAS,IACnC5C,EAAKgB,GAAG,GAAGU,QAAS,EACpB1B,EAAKgB,GAAGhB,EAAK,GAAG4C,OAAS,GAAGlB,QAAS,EAEvCwF,EAAY,EACZC,EAAanH,EAAK,GAAG4C,OAAS,EAE9B,KAAOsE,IAAcD,GACnBvE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGsE,IAChCxE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGuE,IAChCnH,EAAKA,EAAK4C,OAAS,GAAGsE,GAAWxF,QAAS,EAC1C1B,EAAKA,EAAK4C,OAAS,GAAGuE,GAAYzF,QAAS,EAC3CwF,IACAC,IAEFzE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGqE,IAChCjH,EAAKA,EAAK4C,OAAS,GAAGqE,GAAQvF,QAAS,EAvDvC0F,CAAUpH,EAAM0C,GAChB,IAAK,IAAI1B,EAAI,EAAGA,EAAIhB,EAAK4C,OAAS,EAAG5B,GAAK,EAAG,CAC3C,IAAIwH,EAAMjF,KAAKC,MAAMD,KAAKE,UAAYzD,EAAK,GAAG4C,OAAS,EAAI,EAAI,IAAM,EACrE,GAAI5B,EAAI,IAAM,EACZ,IAAK,IAAIE,EAAIlB,EAAK,GAAG4C,OAAS,EAAG1B,EAAI,EAAGA,IAClCA,IAAMsH,IACV9F,EAAKd,KAAK5B,EAAKgB,GAAGE,IAClBlB,EAAKgB,GAAGE,GAAGQ,QAAS,QAGtB,IAAK,IAAIR,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAS,EAAG1B,IAClCA,IAAMsH,IACV9F,EAAKd,KAAK5B,EAAKgB,GAAGE,IAClBlB,EAAKgB,GAAGE,GAAGQ,QAAS,GAK1BC,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IACtCmD,EAAqBnD,EAAM0C,GC7BtB,SAAS+F,EAAclE,GAC5B7E,EAAgB,QAChB,IAF0C,EAEtCgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAHK,cAIxBvE,GAJwB,IAI1C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAJkB,+BAgC5C,SAAmB1B,EAAM0C,GACvB,IAAIuE,EAAS1D,KAAKC,MAAMxD,EAAK,GAAG4C,OAAS,GACrCsE,EAAYD,EAAS,EACrBE,EAAaF,EAAS,EAC1BvE,EAAKd,KAAK5B,EAAK,GAAGiH,IAClBjH,EAAK,GAAGiH,GAAQvF,QAAS,EACzB,KAAOwF,GAAa,GAClBxE,EAAKd,KAAK5B,EAAK,GAAGkH,IAClBxE,EAAKd,KAAK5B,EAAK,GAAGmH,IAClBnH,EAAK,GAAGkH,GAAWxF,QAAS,EAC5B1B,EAAK,GAAGmH,GAAYzF,QAAS,EAC7BwF,IACAC,IAEF,IAAK,IAAInG,EAAI,EAAGA,EAAIhB,EAAK4C,OAAS,EAAG5B,IACnC0B,EAAKd,KAAK5B,EAAKgB,GAAG,IAClB0B,EAAKd,KAAK5B,EAAKgB,GAAGhB,EAAK,GAAG4C,OAAS,IACnC5C,EAAKgB,GAAG,GAAGU,QAAS,EACpB1B,EAAKgB,GAAGhB,EAAK,GAAG4C,OAAS,GAAGlB,QAAS,EAEvCwF,EAAY,EACZC,EAAanH,EAAK,GAAG4C,OAAS,EAE9B,KAAOsE,IAAcD,GACnBvE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGsE,IAChCxE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGuE,IAChCnH,EAAKA,EAAK4C,OAAS,GAAGsE,GAAWxF,QAAS,EAC1C1B,EAAKA,EAAK4C,OAAS,GAAGuE,GAAYzF,QAAS,EAC3CwF,IACAC,IAEFzE,EAAKd,KAAK5B,EAAKA,EAAK4C,OAAS,GAAGqE,IAChCjH,EAAKA,EAAK4C,OAAS,GAAGqE,GAAQvF,QAAS,EAvDvC0F,CAAUpH,EAAM0C,GAChB,IAAK,IAAI1B,EAAI,EAAGA,EAAIhB,EAAK,GAAG4C,OAAS,EAAG5B,GAAK,EAAG,CAC9C,IAAIwH,EAAMjF,KAAKC,MAAMD,KAAKE,UAAYzD,EAAK4C,OAAS,EAAI,EAAI,IAAM,EAClE,GAAI5B,EAAI,IAAM,EACZ,IAAK,IAAIE,EAAIlB,EAAK4C,OAAS,EAAG1B,EAAI,EAAGA,IAC/BA,IAAMsH,IACV9F,EAAKd,KAAK5B,EAAKkB,GAAGF,IAClBhB,EAAKkB,GAAGF,GAAGU,QAAS,QAGtB,IAAK,IAAIR,EAAI,EAAGA,EAAIlB,EAAK4C,OAAS,EAAG1B,IAC/BA,IAAMsH,IACV9F,EAAKd,KAAK5B,EAAKkB,GAAGF,IAClBhB,EAAKkB,GAAGF,GAAGU,QAAS,GAK1BC,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IACtCmD,EAAqBnD,EAAM0C,GC7BtB,SAASgG,EAAcnE,EAAc1C,GAC1CnC,EAAgB,QAEhB,IAHqD,EAGjDgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAJgB,cAKnCvE,GALmC,IAKrD,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAL6B,+BAkBvD,SAAsBG,EAAW7B,EAAM0C,GAErC,GAAkB,cAAdb,EACF,IAAK,IAAIb,EAAIhB,EAAK4C,OAAS,EAAG5B,EAAI,EAAGA,GAAK,EACxC,IAAK,IAAIE,EAAIlB,EAAK,GAAG4C,OAAS,EAAG1B,EAAI,EAAGA,GAAK,EAC3CyH,EAAY3I,EAAMA,EAAKgB,GAAGE,GAAIwB,EAAM,QAAS,OAJ1C,QAOF,GAAkB,cAAdb,EACT,IAAK,IAAIb,EAAIhB,EAAK4C,OAAS,EAAG5B,EAAI,EAAGA,GAAK,EACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EACvCyH,EAAY3I,EAAMA,EAAKgB,GAAGE,GAAIwB,EAAM,QAAS,OAV1C,QAaF,GAAkB,cAAdb,EACT,IAAK,IAAIb,EAAI,EAAGA,EAAIhB,EAAK4C,OAAQ5B,GAAK,EACpC,IAAK,IAAIE,EAAIlB,EAAK,GAAG4C,OAAS,EAAG1B,EAAI,EAAGA,GAAK,EAC3CyH,EAAY3I,EAAMA,EAAKgB,GAAGE,GAAIwB,EAAM,QAAS,OAhB1C,QAmBF,GAAkB,cAAdb,EACT,IAAK,IAAIb,EAAI,EAAGA,EAAIhB,EAAK4C,OAAQ5B,GAAK,EACpC,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EACvCyH,EAAY3I,EAAMA,EAAKgB,GAAGE,GAAIwB,EAAM,QAAS,OAtB1C,GARTkG,CAAa/G,EAAW7B,EAAM0C,GAE9Bf,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IACtCyC,EAAsBzC,EAAM0C,GAgC9B,SAASiG,EAAY3I,EAAMiF,EAASvC,EAAMmG,EAAQC,EAAQ/J,GAOxD,GANAkG,EAAQvD,QAAS,EACjBgB,EAAKd,KAAKqD,GAmBZ,SAA6BtE,EAAMX,EAAM6I,EAAQC,GAAQ,IAEjD7J,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIA,EAAM,IAAiB,UAAX6J,GAAiC,UAAXC,GAAqB,CAEzD,IAAIjF,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAE/C,GAAIA,EAAMe,EAAK,GAAG4C,OAAS,IAAiB,SAAXiG,GAAgC,SAAXC,GAAoB,CAExE,IAAIjF,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,KAEjD,GAAID,EAAMgB,EAAK4C,OAAS,IAAiB,UAAXiG,GAAiC,UAAXC,GAAqB,CAEvE,IAAIjF,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,KAE/C,GAAIA,EAAM,IAAiB,SAAX4J,GAAgC,SAAXC,GAAoB,CAEvD,IAAIjF,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,MAtCjDmF,CAAoBa,EAASjF,EAAM6I,EAAQC,GAC3C7D,EAAQlG,GAAKA,EACbA,IACiC,IAA7BkG,EAAQxD,UAAUmB,OAAc,CAClC,IAAMiB,EACJoB,EAAQxD,UAAU8B,KAAKC,MAAMD,KAAKE,SAAWwB,EAAQxD,UAAUmB,SAEjEiB,EAAS,GAAGnC,QAAS,EACrBgB,EAAKd,KAAKiC,EAAS,IAEdnB,EAAKqG,MAAK,SAAC5J,GAAD,OAAOA,EAAEJ,KAAO8E,EAAS,GAAG9E,QACzC8E,EAAS,GAAGnC,QAAS,EACrBgB,EAAKd,KAAKiC,EAAS,MCwBzB,SAASO,EAAoBzD,EAAMX,GAAM,IAEjCf,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IACX,GAAIC,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAE5B,IAAIiB,EAAW7D,EAAKhB,GAAKC,EAAM,GAC/B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,GAAKC,EAAM,UAE/C0B,EAAKc,UAAUG,KAAK,MAEtB,GAAI5C,EAAMgB,EAAK4C,OAAS,EAAG,CAEzB,IAAIiB,EAAW7D,EAAKhB,EAAM,GAAGC,GAC7B0B,EAAKc,UAAUG,KAAK,CAACiC,EAAU7D,EAAKhB,EAAM,GAAGC,UAE7C0B,EAAKc,UAAUG,KAAK,MCzExB,SAASoH,EAAgBC,GACvB,IADsC,IAAD,WAC5BjI,GACP2B,YAAW,WACT,GAAI3B,IAAMiI,EAAarG,OAAvB,CAIA,IAAMjC,EAAOsI,EAAajI,GACrBL,EAAKhC,OAAUgC,EAAK/B,MACvBgC,EAAc,OAAQ,0BAA2BD,GAC7Cd,OAAOC,cAAcY,MAAMwI,uBAC7BtI,EAAc,MAAO,eAAgBD,SAPvCd,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,eAUzC,GAAKE,IAbDA,EAAI,EAAGA,GAAKiI,EAAarG,OAAQ5B,IAAM,EAAvCA,GAuCX,SAASmI,EAAgBF,GACvB,IAAK,IAAIjI,EAAI,EAAGA,EAAIiI,EAAarG,OAAQ5B,IAAK,CAC5C,IAAML,EAAOsI,EAAajI,GACrBL,EAAKhC,OAAUgC,EAAK/B,MACvBgC,EAAc,OAAQ,iBAAkBD,GACpCd,OAAOC,cAAcY,MAAMwI,uBAC7BtI,EAAc,MAAO,eAAgBD,KC1E7C,IAAI5B,GAAK,EAiDT,SAASqK,GAAsBzI,EAAMX,EAAM6B,EAAWwH,GACpD,IAAM5H,EAAY,GACZxC,EAAa0B,EAAb1B,IAAKD,EAAQ2B,EAAR3B,IAEO,SAAd6C,GAAsC,UAAdA,GAC1ByH,GAAGtK,EAAKC,EAAKe,EAAMyB,GACnB8H,GAAMvK,EAAKC,EAAKe,EAAMyB,GACtB+H,GAAKxK,EAAKC,EAAKe,EAAMyB,GACrBgI,GAAKzK,EAAKC,EAAKe,EAAMyB,GACjB4H,IACFK,GAAQ1K,EAAKC,EAAKe,EAAMyB,GACxBkI,GAAU3K,EAAKC,EAAKe,EAAMyB,GAC1BmI,GAAS5K,EAAKC,EAAKe,EAAMyB,GACzBoI,GAAO7K,EAAKC,EAAKe,EAAMyB,KAEF,OAAdI,IACT2H,GAAKxK,EAAKC,EAAKe,EAAMyB,GACrBgI,GAAKzK,EAAKC,EAAKe,EAAMyB,GACrB6H,GAAGtK,EAAKC,EAAKe,EAAMyB,GACnB8H,GAAMvK,EAAKC,EAAKe,EAAMyB,GAClB4H,IACFO,GAAS5K,EAAKC,EAAKe,EAAMyB,GACzBoI,GAAO7K,EAAKC,EAAKe,EAAMyB,GACvBiI,GAAQ1K,EAAKC,EAAKe,EAAMyB,GACxBkI,GAAU3K,EAAKC,EAAKe,EAAMyB,KAI9B,cAAuBA,EAAvB,eAAkC,CAA7B,IAAMoC,EAAQ,KACjBA,EAASrE,SAAWmB,EAAKnB,SAAW,EACpCqE,EAASxC,SAAWV,EACpBkD,EAAS9E,GAAKA,GACdA,MAIJ,SAASuK,GAAGtK,EAAKC,EAAKe,EAAMyB,GAC1B,GAAIzC,EAAM,EAAG,CACX,IAAI2B,EAAOX,EAAKhB,EAAM,GAAGC,GACpB0B,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAAS4I,GAAMvK,EAAKC,EAAKe,EAAMyB,GAC7B,GAAIxC,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CAC5B,IAAIjC,EAAOX,EAAKhB,GAAKC,EAAM,GACtB0B,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAAS6I,GAAKxK,EAAKC,EAAKe,EAAMyB,GAC5B,GAAIzC,EAAMgB,EAAK4C,OAAS,EAAG,CACzB,IAAIjC,EAAOX,EAAKhB,EAAM,GAAGC,GACpB0B,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAAS8I,GAAKzK,EAAKC,EAAKe,EAAMyB,GAC5B,GAAIxC,EAAM,EAAG,CACX,IAAI0B,EAAOX,EAAKhB,GAAKC,EAAM,GACtB0B,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAAS+I,GAAQ1K,EAAKC,EAAKe,EAAMyB,GAC/B,GAAIzC,EAAM,GAAKC,EAAMe,EAAK,GAAG4C,OAAS,EAAG,CACvC,IAAIjC,EAAOX,EAAKhB,EAAM,GAAGC,EAAM,GAC/B,GAAIe,EAAKhB,EAAM,GAAGC,GAAKyC,QAAU1B,EAAKhB,GAAKC,EAAM,GAAGyC,OAClD,OAEGf,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAASgJ,GAAU3K,EAAKC,EAAKe,EAAMyB,GACjC,GAAIxC,EAAMe,EAAK,GAAG4C,OAAS,GAAK5D,EAAMgB,EAAK4C,OAAS,EAAG,CACrD,IAAIjC,EAAOX,EAAKhB,EAAM,GAAGC,EAAM,GAC/B,GAAIe,EAAKhB,EAAM,GAAGC,GAAKyC,QAAU1B,EAAKhB,GAAKC,EAAM,GAAGyC,OAClD,OAEGf,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAASiJ,GAAS5K,EAAKC,EAAKe,EAAMyB,GAChC,GAAIzC,EAAMgB,EAAK4C,OAAS,GAAK3D,EAAM,EAAG,CACpC,IAAI0B,EAAOX,EAAKhB,EAAM,GAAGC,EAAM,GAC/B,GAAIe,EAAKhB,EAAM,GAAGC,GAAKyC,QAAU1B,EAAKhB,GAAKC,EAAM,GAAGyC,OAClD,OAEGf,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAASkJ,GAAO7K,EAAKC,EAAKe,EAAMyB,GAC9B,GAAIxC,EAAM,GAAKD,EAAM,EAAG,CACtB,IAAI2B,EAAOX,EAAKhB,EAAM,GAAGC,EAAM,GAC/B,GAAIe,EAAKhB,GAAKC,EAAM,GAAGyC,QAAU1B,EAAKhB,EAAM,GAAGC,GAAKyC,OAClD,OAEGf,EAAKS,SAA6B,OAAlBT,EAAKU,UACxBI,EAAUG,KAAKjB,IAKrB,SAASmJ,GAAYC,EAAchI,EAASiI,GAC1C,IAAMf,EAAenH,EAAgBC,GACvB,SAAViI,GACwC,aAAtCnK,OAAOC,cAAcY,MAAMI,QAC7BlB,IAEFC,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YD/KrC,SAAqBiJ,EAAcd,GACxC,IADuD,IAAD,WAC7CjI,GACP,IAAML,EAAOoJ,EAAa/I,GAC1B,GAAIA,IAAM+I,EAAanH,OAIrB,OAHAD,YAAW,WACTqG,EAAgBC,KACf,GAAKjI,GACF,CAAN,UAEF2B,YAAW,WACLhC,EAAKhC,OAASkB,OAAOC,cAAcY,MAAMwI,uBAC3CtI,EAAc,MAAO,gBAAiBD,GAEpCA,EAAK/B,KAAOiB,OAAOC,cAAcY,MAAMwI,uBACzCtI,EAAc,MAAO,cAAeD,GAEjCA,EAAKe,QACHf,EAAKhC,OAAUgC,EAAK/B,MACvBgC,EAAc,OAAQ,6BAA8BD,GAChDd,OAAOC,cAAcY,MAAMwI,uBAC7BtI,EAAc,MAAO,kBAAmBD,MAI7C,GAAKK,IAvBDA,EAAI,EAAGA,GAAK+I,EAAanH,OAAQ5B,IAAK,CAAC,IAAD,IAAtCA,GAAsC,mCCgL7CiJ,CAAYF,EAAcd,IACP,SAAVe,GDpIN,SAAqBD,EAAcd,GACxC,IAAK,IAAIjI,EAAI,EAAGA,GAAK+I,EAAanH,OAAS,EAAG5B,IAAK,CACjD,IAAML,EAAOoJ,EAAa/I,GAEtBL,EAAKhC,OAASkB,OAAOC,cAAcY,MAAMwI,sBAC3CtI,EAAc,MAAO,gBAAiBD,GAC7BA,EAAK/B,KACViB,OAAOC,cAAcY,MAAMwI,uBAC7BtI,EAAc,MAAO,cAAeD,GAEtCwI,EAAgBF,IACNtI,EAAKe,QACVf,EAAKhC,OAAUgC,EAAK/B,MACvBgC,EAAc,OAAQ,oBAAqBD,GACvCd,OAAOC,cAAcY,MAAMwI,uBAC7BtI,EAAc,MAAO,kBAAmBD,KCsH9CuJ,CAAYH,EAAcd,GC/KvB,SAASkB,GACdnK,EACAoK,EACArI,EACAsH,EACAgB,EACAL,IA0EF,SAAuBhK,EAAMqJ,GAAe,IAAD,gBACvBrJ,GADuB,IACzC,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACtBA,EAAKc,UAAY,GACbd,EAAK3B,IAAM,GAEb2B,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,MAE1C0B,EAAK1B,IAAMe,EAAK,GAAG4C,OAAS,GAE9BjC,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,KAAK2B,EAAK1B,IAAM,IAG5C0B,EAAK3B,IAAMgB,EAAK4C,OAAS,GAE3BjC,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,MAG1C0B,EAAK1B,IAAM,GAEb0B,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,KAAK2B,EAAK1B,IAAM,IAE5CoK,IACE1I,EAAK3B,IAAM,GAAK2B,EAAK1B,IAAMe,EAAK,GAAG4C,OAAS,IAG3C5C,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,KAAKyC,QAC7B1B,EAAKW,EAAK3B,KAAK2B,EAAK1B,IAAM,GAAGyC,QAE9Bf,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,IAAM,KAGlD0B,EAAK1B,IAAMe,EAAK,GAAG4C,OAAS,GAAKjC,EAAK3B,IAAMgB,EAAK4C,OAAS,IAGzD5C,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,KAAKyC,QAC7B1B,EAAKW,EAAK3B,KAAK2B,EAAK1B,IAAM,GAAGyC,QAE9Bf,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,IAAM,KAGlD0B,EAAK3B,IAAMgB,EAAK4C,OAAS,GAAKjC,EAAK1B,IAAM,IAGxCe,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,KAAKyC,QAC7B1B,EAAKW,EAAK3B,KAAK2B,EAAK1B,IAAM,GAAGyC,QAE9Bf,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,IAAM,KAGlD0B,EAAK1B,IAAM,GAAK0B,EAAK3B,IAAM,IAG1BgB,EAAKW,EAAK3B,KAAK2B,EAAK1B,IAAM,GAAGyC,QAC7B1B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,KAAKyC,QAE9Bf,EAAKc,UAAUG,KAAK5B,EAAKW,EAAK3B,IAAM,GAAG2B,EAAK1B,IAAM,OAvDpC,gCADiB,+BAxEzCqL,CAActK,EAAMqJ,GACpB,IAAMkB,EAAU,GACVC,EAAW,GACbC,EAAS,GAKb,IAJAF,EAAQ3I,KAAKwI,GACbA,EAAU7I,EAAI,EACd6I,EAAU9I,EAAIoJ,GAAUN,EAAWrI,EAASsH,EAAcgB,GAEjDE,EAAQ3H,QAAQ,CAEvB,IADA,IAAIqC,EAAU,EACL/D,EAAI,EAAGA,EAAIqJ,EAAQ3H,OAAQ1B,IAC9BqJ,EAAQrJ,GAAGI,EAAIiJ,EAAQtF,GAAS3D,IAClC2D,EAAU/D,GAGd,IAAI0D,EAAc2F,EAAQtF,GAC1B,GAAIL,IAAgB7C,EAGlB,OAFA4I,QAAQC,IAAI7I,EAAQnD,UACpBkL,GAAYW,EAAQF,EAASxI,EAASiI,GAGxCa,GAAiBN,EAAS3F,GAE1B,IADA,IAAInD,EAAYmD,EAAYnD,UACnBqJ,EAAI,EAAGA,EAAIrJ,EAAUmB,OAAQkI,IAAK,CACzC,IAAIjH,EAAWpC,EAAUqJ,GACzB,IAAIjH,EAASnC,QAAWmC,EAASlF,OAAUkF,EAASjF,IAApD,CAGA,IAAImM,EACFnG,EAAYrD,EAAIyJ,GAAOnH,EAAUe,EAAayF,GAC5CU,EAAmBlH,EAAStC,IAC9BiJ,EAAS5I,KAAKiC,GACdA,EAAStC,EAAIwJ,EACblH,EAASrC,EAAIkJ,GAAU7G,EAAU9B,EAASsH,EAAcgB,GACxDxG,EAASvC,EAAIuC,EAAStC,EAAIsC,EAASrC,EACnCqC,EAASxC,SAAWuD,EACf2F,EAAQjE,SAASzC,KACpB0G,EAAQ3I,KAAKiC,GACC,SAAVmG,EACFS,EAAO7I,KAAK,CAAC2I,EAAQU,MAAM,GAAIT,EAASS,MAAM,KAC3B,SAAVjB,GACTS,EAAO7I,KAAKiC,OAMtBiG,GAAYW,EAAQF,EAASxI,EAASiI,GAExC,SAASgB,GAAOE,EAAOC,EAAOd,GAC5B,OAAIA,EACKa,EAAMlM,IAAMmM,EAAMnM,MAAQ,GAAKkM,EAAMjM,IAAMkM,EAAMlM,MAAQ,EAC5D,EACAsE,KAAK6H,MAEF,EAIX,SAASV,GAAUQ,EAAOC,EAAO9B,EAAcgB,GAC7C,OAAIhB,IAAiBgB,EACZ9G,KAAK8H,IAAIH,EAAMlM,IAAMmM,EAAMnM,KAAOuE,KAAK8H,IAAIH,EAAMjM,IAAMkM,EAAMlM,KAEhEoL,EACK9G,KAAK+H,MACTJ,EAAMlM,IAAMmM,EAAMnM,MAAQkM,EAAMlM,IAAMmM,EAAMnM,MAC1CkM,EAAMjM,IAAMkM,EAAMlM,MAAQiM,EAAMjM,IAAMkM,EAAMlM,WAHnD,EAyEJ,SAAS4L,GAAiBnF,EAAK/E,GAC7B,IAAK,IAAIK,EAAI0E,EAAI9C,OAAS,EAAG5B,GAAK,EAAGA,IAC/B0E,EAAI1E,KAAOL,GACb+E,EAAIzB,OAAOjD,EAAG,GAKpB,SAAS8I,GAAYW,EAAQF,EAASxI,EAASiI,GAC7C,IAAMf,EAAenH,EAAgBC,GACvB,SAAViI,GACwC,aAAtCnK,OAAOC,cAAcY,MAAMI,QAC7BlB,IAEFC,OAAOC,cAAcC,SAAS,CAAEe,OAAQ,YFlFrC,SAA0B2J,EAAQxB,GACvC,IADsD,IAAD,WAC5CjI,GACP,GAAIA,IAAMyJ,EAAO7H,OAIf,OAHAD,YAAW,WACTqG,EAAgBC,KACf,GAAKjI,GACF,CAAN,UAEF2B,YAAW,WACT/C,IAIA,IAHA,IAAI2K,EAAUE,EAAOzJ,GAAG,GACpBuK,EAAYd,EAAOzJ,GAAG,GAEjBE,EAAI,EAAGA,EAAIqK,EAAU3I,OAAQ1B,IAC/BqK,EAAUrK,GAAGvC,OAAU4M,EAAUrK,GAAGtC,KACvCgC,EAAc,OAAQ,qBAAsB2K,EAAUrK,IAG1D,IAAK,IAAI4J,EAAI,EAAGA,EAAIP,EAAQ3H,OAAQkI,IAC7BP,EAAQO,GAAGnM,OAAU4L,EAAQO,GAAGlM,KACnCgC,EAAc,OAAQ,oBAAqB2J,EAAQO,IAIrD9J,EAAIyJ,EAAO7H,OAAS,IACnB2I,EAAUA,EAAU3I,OAAS,GAAGjE,QAChC4M,EAAUA,EAAU3I,OAAS,GAAGhE,KAEjCgC,EACE,OACA,uBACA2K,EAAUA,EAAU3I,OAAS,MAGhC,GAAK5B,IAjCDA,EAAI,EAAGA,GAAKyJ,EAAO7H,OAAQ5B,IAAK,CAAC,IAAD,IAAhCA,GAAgC,mCEmFvCwK,CAAiBf,EAAQxB,IACN,SAAVe,GF/CN,SAA0BS,EAAQF,EAAStB,GAChDrJ,IACA,IAAK,IAAIkL,EAAI,EAAGA,EAAIL,EAAO7H,OAAQkI,IAC5BL,EAAOK,GAAGnM,OAAU8L,EAAOK,GAAGlM,KACjCgC,EAAc,OAAQ,qBAAsB6J,EAAOK,IAGvD,IAAK,IAAIA,EAAI,EAAGA,EAAIP,EAAQ3H,OAAQkI,IAC7BP,EAAQO,GAAGnM,OAAU4L,EAAQO,GAAGlM,KACnCgC,EAAc,OAAQ,oBAAqB2J,EAAQO,IAGvD3B,EAAgBF,GEoCdwC,CAAiBhB,EAAQF,EAAStB,G,ICiKvByC,G,kDArTb,WAAYjN,GAAQ,IAAD,8BACjB,cAAMA,IAuFRS,YAAc,SAACyB,GACa,YAAtB,EAAKD,MAAMI,SAGf,EAAKf,SAAS,CAAE4L,aAAa,IACzBhL,EAAKhC,MACP,EAAKoB,SAAS,CAAE6L,WAAW,IAGzBjL,EAAK/B,IACP,EAAKmB,SAAS,CAAE8L,SAAS,IAG3B3J,EAAUvB,KArGO,EAwGnBtB,aAAe,SAACsB,GACd,GAAI,EAAKD,MAAMiL,YAAa,CAC1B,GAAIhL,EAAKhC,OAASgC,EAAK/B,IACrB,OAEF,GAAI,EAAK8B,MAAMkL,UAAW,CACxB,IAAI7K,EAAU,EAAKL,MAAMV,KAAKiL,QAkB9B,OAjBAlK,EAAQ,EAAKL,MAAMR,UAAU,EAAKQ,MAAMN,UAAUzB,OAAQ,EAC1DoC,EAAQJ,EAAK3B,KAAK2B,EAAK1B,KAAKN,OAAQ,OACpC,EAAKoB,SACH,CACEC,KAAMe,EACNb,SAAUS,EAAK3B,IACfoB,SAAUO,EAAK1B,MAEjB,WAC4B,aAAtB,EAAKyB,MAAMI,QACblB,IACA,EAAKwC,YAAY,SAEjB1C,EAAgB,WAKjB,GAAI,EAAKgB,MAAMmL,QAAS,CAC7B,IAAI9K,EAAU,EAAKL,MAAMV,KAAKiL,QAkB9B,OAjBAlK,EAAQ,EAAKL,MAAMJ,QAAQ,EAAKI,MAAMF,QAAQ5B,KAAM,EACpDmC,EAAQJ,EAAK3B,KAAK2B,EAAK1B,KAAKL,KAAM,OAClC,EAAKmB,SACH,CACEC,KAAMe,EACNT,OAAQK,EAAK3B,IACbwB,OAAQG,EAAK1B,MAEf,WAC4B,aAAtB,EAAKyB,MAAMI,QACblB,IACA,EAAKwC,YAAY,SAEjB1C,EAAgB,WAMxBwC,EAAUvB,KAtJK,EAyJnBrB,UAAY,WACV,EAAKS,SAAS,CAAE4L,aAAa,EAAOC,WAAW,EAAOC,SAAS,KA1J9C,EA6JnBzJ,YAAc,SAAC4H,GAAW,IAClBhK,EAAS,EAAKU,MAAdV,KACAoK,EAAYpK,EAAK,EAAKU,MAAMR,UAAU,EAAKQ,MAAMN,UACjD2B,EAAU/B,EAAK,EAAKU,MAAMJ,QAAQ,EAAKI,MAAMF,QAErB,aAA1B,EAAKE,MAAMoL,WFnLZ,SAAkB9L,EAAMoK,EAAWrI,EAASsH,EAAcW,GAC/D,IAAMjF,EAAiB,GACjBgF,EAAe,GACjBlI,EAAY,QACZkK,EAAc3B,EAAUpL,IAC5BoL,EAAU5K,SAAW,EALiD,oBAOpDQ,GAPoD,IAOtE,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd2B,EAAa,QACtBoE,EAAenD,KAAKjB,IAFA,gCAP8C,8BAatE,KAASoE,EAAenC,QAAQ,CAC9BmC,EAAeiH,MAAK,SAACd,EAAOC,GAAR,OAAkBD,EAAMnM,GAAKoM,EAAMpM,MACvDgG,EAAeiH,MAAK,SAACd,EAAOC,GAAR,OAAkBD,EAAM1L,SAAW2L,EAAM3L,YAE7D,IAAMoH,EAAW7B,EAAekH,QAShC,GARkB,UAAdpK,IAEAA,EADE+E,EAAS5H,IAAM+M,EACL,KAEA,SAIZnF,EAASlF,QAAWkF,EAASjI,OAAUiI,EAAShI,IAApD,CAEA,GAAIgI,EAASpH,WAAaC,IAExB,YADAqK,GAAYC,EAAchI,EAASiI,GAKrC,GAFApD,EAASxF,SAAU,EACnB2I,EAAanI,KAAKgF,GACdA,IAAa7E,EAGf,OAFAgD,EAAeiH,MAAK,SAACd,EAAOC,GAAR,OAAkBD,EAAMnM,GAAKoM,EAAMpM,WACvD+K,GAAYC,EAAchI,EAASiI,GAIrCZ,GAAsBxC,EAAU5G,EAAM6B,EAAWwH,GAC/B,UAAdxH,IACFkK,EAAcnF,EAAS5H,KAEzB6C,EAAY,YEwIVqK,CACElM,EACAoK,EACArI,EACA,EAAKrB,MAAMyL,sBACXnC,GAEiC,UAA1B,EAAKtJ,MAAMoL,YACpB3B,GACEnK,EACAoK,EACArI,EACA,EAAKrB,MAAMyL,sBACX,EAAKzL,MAAM0L,uBACXpC,IA/KJ,EAAKtJ,MAAQ,CACXV,KAAMC,EAAWxB,GACjBkN,aAAa,EACbC,WAAW,EACXC,SAAS,EACT3L,SAAUzB,EAAM0B,OAChBC,SAAU3B,EAAM4B,OAChBC,OAAQ7B,EAAM8B,KACdC,OAAQ/B,EAAMgC,KACdK,OAAQ,UACRgL,WAAY,WACZO,YAAa,UACbnD,uBAAuB,EACvBiD,uBAAuB,EACvBC,wBAAwB,GAE1B,EAAKE,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB1M,OAAOC,cAAP,eArBiB,E,6DAwBF4M,GACfC,KAAK5M,SAAS,CAAE+L,WAAYY,EAAME,OAAOxG,U,yCAExBsG,GAAQ,IAAD,OACE,aAAtBA,EAAME,OAAOtK,KACfqK,KAAK5M,SACH,CAAEmJ,uBAAwByD,KAAKjM,MAAMwI,wBACrC,WAC4B,aAAtB,EAAKxI,MAAMI,SACblB,IAC8B,aAA1B,EAAKc,MAAMoL,YACb,EAAK1J,YAAY,YAKM,aAAtBsK,EAAME,OAAOtK,KACtBqK,KAAK5M,SACH,CAAEoM,uBAAwBQ,KAAKjM,MAAMyL,wBACrC,WAC4B,aAAtB,EAAKzL,MAAMI,SACblB,IACA,EAAKwC,YAAY,YAIQ,cAAtBsK,EAAME,OAAOtK,MACtBqK,KAAK5M,SACH,CAAEqM,wBAAyBO,KAAKjM,MAAM0L,yBACtC,WAC4B,aAAtB,EAAK1L,MAAMI,SACblB,IACA,EAAKwC,YAAY,c,uCAMVsK,GACY,WAAvBA,EAAME,OAAOxG,MAAoBhD,EAAmBuJ,KAAKjM,MAAMV,MACnC,SAAvB0M,EAAME,OAAOxG,MdhFnB,SAAkB7B,GACvB7E,EAAgB,QAChB,IAFqC,EAEjCM,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IACjC7B,EAAO,GACLkB,EAAY,GAJmB,cAKnB5D,GALmB,IAKrC,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCALa,8BAWrC,IADAiC,EAAoB3D,EAAK,GAAG,GAAIA,EAAM4D,GAC7BA,EAAUhB,QAAQ,CACzB,IAAIiK,EAAc/I,EAAeF,GAC5BiJ,EAAY,GAAGnL,SAGpBmL,EAAY,GAAGnL,QAAS,EACxBmL,EAAY,GAAGnL,QAAS,EACxBgB,EAAKd,KAAKiL,EAAY,IACtBnK,EAAKd,KAAKiL,EAAY,IACtBlJ,EAAoBkJ,EAAY,GAAI7M,EAAM4D,IAE5CjC,EAAuB3B,GACvByC,EAAsBzC,EAAM0C,GcyDcoK,CAASH,KAAKjM,MAAMV,MAC5B,cAAvB0M,EAAME,OAAOxG,MbjFnB,SAAuB7B,GAC5B7E,EAAgB,QAChB,IAF0C,EAEtCgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAHK,cAIxBvE,GAJwB,IAI1C,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAJkB,8BAS1C,IAAIkD,EAAc5E,EAAK,GAAG,GAC1B4E,EAAYxD,SAAU,EACtBwD,EAAYlD,QAAS,EACrBgB,EAAKd,KAAKgD,GACV,IAAIT,EAA8B,GAGlC,IAFAA,EAA4BvC,KAAKgD,GAExBT,EAA4BvB,QAAQ,CAE3C,IAAIyB,EAA4BD,EADhCQ,EAAcV,EAAaC,GACsCnE,GACjE,GAAIqE,EAA0BzB,OAAS,EAAG,CACxCuB,EAA4BvC,KAAKgD,GACjC,IAAIC,EACFR,EACEd,KAAKC,MAAMD,KAAKE,SAAWY,EAA0BzB,SAEzDiC,EAAW,GAAGnD,QAAS,EACvBmD,EAAW,GAAGnD,QAAS,EACvBmD,EAAW,GAAGzD,SAAU,EACxBsB,EAAKd,KAAKiD,EAAW,IACrBnC,EAAKd,KAAKiD,EAAW,IACrBV,EAA4BvC,KAAKiD,EAAW,KAIhDlD,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IACtCyC,EAAsBzC,EAAM0C,Ga6CmBqK,CAAcJ,KAAKjM,MAAMV,MACtC,cAAvB0M,EAAME,OAAOxG,MAAuB9B,EAAcqI,KAAKjM,MAAMV,MACtC,iBAAvB0M,EAAME,OAAOxG,MACpBtB,EAAiB6H,KAAKjM,MAAMV,MACE,YAAvB0M,EAAME,OAAOxG,MAAqBf,EAAYsH,KAAKjM,MAAMV,MAClC,WAAvB0M,EAAME,OAAOxG,MAAoBG,EAAWoG,KAAKjM,MAAMV,MAChC,sBAAvB0M,EAAME,OAAOxG,MACpBY,EAAkB2F,KAAKjM,MAAMV,MACC,oBAAvB0M,EAAME,OAAOxG,MACpBmC,EAAgBoE,KAAKjM,MAAMV,MACG,kBAAvB0M,EAAME,OAAOxG,MACpBqC,EAAckE,KAAKjM,MAAMV,MACK,UAAvB0M,EAAME,OAAOxG,MJhGnB,SAAmB7B,GACxB7E,EAAgB,QAChB,IAFsC,EAElCgD,EAAO,GACP1C,EAAOwE,KAAKC,MAAMD,KAAKE,UAAUH,IAHC,cAIpBvE,GAJoB,IAItC,2BAAwB,CAAC,IAAD,EAAbhB,EAAa,sBACHA,GADG,IACtB,2BAAwB,SACjB0C,QAAS,GAFM,gCAJc,8BAUtC,IADA,IAAI4D,EAAY,EACPtE,EAAI,EAAGA,EAAIhB,EAAK4C,OAAQ5B,GAAK,EAAG,CAEvC,IADA,IAAIwE,EAAM,IAAIC,IACLvE,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EACjB,IAAlBlB,EAAKgB,GAAGE,GAAGnC,KACbiB,EAAKgB,GAAGE,GAAGnC,GAAKuG,EAChBA,KAIJ,IAAK,IAAIpE,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EAAG,CAE1CkD,EADIQ,EAAc5E,EAAKgB,GAAGE,GACOlB,GAC7BA,EAAK4C,OAAS,IAAM5B,IACtB0B,EAAKd,KAAKgD,GACVA,EAAYlD,QAAS,GAEnB6B,KAAKE,SAAW,IAAoC,OAA7BmB,EAAYnD,UAAU,KAC3CzB,EAAK4C,OAAS,IAAM5B,IACtB0B,EAAKd,KAAKgD,EAAYnD,UAAU,GAAG,IACnCmD,EAAYnD,UAAU,GAAG,GAAGC,QAAS,GAEvCkD,EAAYnD,UAAU,GAAG,GAAG1C,GAAK6F,EAAY7F,IAGjD,IAAK,IAAImC,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EAAG,CAC1C,IAAI0D,EAAc5E,EAAKgB,GAAGE,GAC1BsE,EAAIE,IAAId,EAAaA,EAAY7F,IAEnC,GAAIiB,EAAK4C,OAAS,IAAM5B,EAaxB,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EAAG,CACtC0D,EAAc5E,EAAKgB,GAAGE,GAA1B,IACI8L,EAAU,EACdxH,EAAIW,SAAQ,SAACC,EAAOC,GACdD,IAAUxB,EAAY7F,IACxBiO,OAGY,IAAZA,GACFtK,EAAKd,KAAKgD,EAAYnD,UAAU,GAAG,IACnCmD,EAAYnD,UAAU,GAAG,GAAGC,QAAS,GAC5BsL,EAAU,IACfzJ,KAAKE,SAAW,IAClB+B,EAAIW,SAAQ,SAACC,EAAOC,GACdD,IAAUxB,EAAY7F,IACxByG,EAAIyH,OAAO5G,MAGf3D,EAAKd,KAAKgD,EAAYnD,UAAU,GAAG,IACnCmD,EAAYnD,UAAU,GAAG,GAAGC,QAAS,GAErC8D,EAAIW,SAAQ,SAACC,EAAOC,GACdA,IAAQzB,GACVY,EAAIyH,OAAO5G,YAnCnB,IAAK,IAAInF,EAAI,EAAGA,EAAIlB,EAAK,GAAG4C,OAAQ1B,GAAK,EAAG,CAC1C,IAAI0D,EAAc5E,EAAKgB,GAAGE,GAC1BwB,EAAKd,KAAKgD,GACVA,EAAYlD,QAAS,EACY,OAA7BkD,EAAYnD,UAAU,KACxBiB,EAAKd,KAAKgD,EAAYnD,UAAU,GAAG,IACnCmD,EAAYnD,UAAU,GAAG,GAAGC,QAAS,EACrCkD,EAAYnD,UAAU,GAAG,GAAG1C,GAAK6F,EAAY7F,KAoCrD4C,EAAuB3B,GACvBH,OAAOC,cAAcC,SAAS,CAAEC,KAAMA,IACtCyC,EAAsBzC,EAAM0C,GIYewK,CAAUP,KAAKjM,MAAMV,MAC9B,iBAAvB0M,EAAME,OAAOxG,MACpBsC,EAAciE,KAAKjM,MAAMV,KAAM,aACD,iBAAvB0M,EAAME,OAAOxG,MACpBsC,EAAciE,KAAKjM,MAAMV,KAAM,aACD,iBAAvB0M,EAAME,OAAOxG,MACpBsC,EAAciE,KAAKjM,MAAMV,KAAM,aACD,iBAAvB0M,EAAME,OAAOxG,OACpBsC,EAAciE,KAAKjM,MAAMV,KAAM,e,+BAiGzB,IAAD,OACHA,EAAO2M,KAAKjM,MAAMV,KAAKwF,KAAI,SAACxG,EAAKmO,GACnC,OACE,yBAAK9G,IAAK8G,EAAOrO,UAAU,OACxBE,EAAIwG,KAAI,SAAC7E,EAAMyM,GACd,OACE,kBAAC,EAAD,CACE/G,IAAK+G,EACL1O,KAAMiC,EACNzB,YAAa,EAAKA,YAClBG,aAAc,EAAKA,aACnBC,UAAW,EAAKA,mBAO5B,OACE,6BACE,yBAAKR,UAAU,OAAOuO,aAAcV,KAAKrN,WACtCU,GAEH,4BACEoG,MAAOuG,KAAKjM,MAAMoL,WAClBwB,SAAUX,KAAKL,iBACfiB,SAAgC,YAAtBZ,KAAKjM,MAAMI,QAErB,4BAAQsF,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,cAEF,4BACEmH,SAAgC,YAAtBZ,KAAKjM,MAAMI,OACrB0M,QAAS,kBAAM,EAAKpL,YAAY,UAFlC,SAMA,4BACEmL,SAAgC,YAAtBZ,KAAKjM,MAAMI,OACrB0M,QAAS,WACP9N,EAAgB,UAHpB,cAQA,4BACE6N,SAAgC,YAAtBZ,KAAKjM,MAAMI,OACrB0M,QAAS,WACP9N,EAAgB,UAHpB,cA1BF,WAmCE,2BAAOZ,UAAU,UACf,2BACEyO,SACwB,YAAtBZ,KAAKjM,MAAMI,QACe,UAA1B6L,KAAKjM,MAAMoL,WAEbnM,KAAK,WACL8N,eAAgBd,KAAKjM,MAAMwI,sBAC3BoE,SAAUX,KAAKH,mBACflK,KAAK,aAEP,0BAAMxD,UAAU,kBA9CpB,WAiDE,2BAAOA,UAAU,UACf,2BACEyO,SAAgC,YAAtBZ,KAAKjM,MAAMI,OACrBnB,KAAK,WACL8N,eAAgBd,KAAKjM,MAAMyL,sBAC3BmB,SAAUX,KAAKH,mBACflK,KAAK,aAEP,0BAAMxD,UAAU,kBAzDpB,YA4DE,2BAAOA,UAAU,UACf,2BACEyO,SACwB,YAAtBZ,KAAKjM,MAAMI,QACe,aAA1B6L,KAAKjM,MAAMoL,WAEbnM,KAAK,WACL8N,eAAgBd,KAAKjM,MAAM0L,uBAC3BkB,SAAUX,KAAKH,mBACflK,KAAK,cAEP,0BAAMxD,UAAU,kBAElB,4BACEsH,MAAOuG,KAAKjM,MAAM2L,YAClBiB,SAAUX,KAAKF,iBACfc,SAAgC,YAAtBZ,KAAKjM,MAAMI,QAErB,4BAAQsF,MAAM,UAAUmH,UAAQ,EAACG,QAAM,GAAvC,SAGA,8BAAUC,MAAM,YACd,4BAAQvH,MAAM,UAAd,UACA,4BAAQA,MAAM,mBAAd,oBACA,4BAAQA,MAAM,iBAAd,mBAEF,8BAAUuH,MAAM,cACd,4BAAQvH,MAAM,QAAd,QACA,4BAAQA,MAAM,aAAd,yBACA,4BAAQA,MAAM,aAAd,yBACA,4BAAQA,MAAM,gBAAd,iBACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,qBAAd,sBACA,4BAAQA,MAAM,SAAd,UAEF,8BAAUuH,MAAM,qCACd,4BAAQvH,MAAM,gBAAd,0BACA,4BAAQA,MAAM,gBAAd,0BACA,4BAAQA,MAAM,gBAAd,0BACA,4BAAQA,MAAM,gBAAd,iC,GA9SOwH,aC6CJC,G,kDA7Db,WAAYpP,GAAQ,IAAD,8BACjB,gBAWFqP,YAAc,SAACC,GACb,IAAIhK,EAAW,KACf,GAAkB,QAAdgK,EACFhK,EAAWR,KAAKC,MAAM,EAAKwK,QAAQ,OAAS,QACvC,GAAkB,aAAdD,EACThK,EAAWR,KAAKC,MAAM,EAAKwK,QAAQ,OAAS,QACvC,GAAkB,WAAdD,EAAwB,CACjC,IAAIE,EAAI,EAAKD,QAAQ,OAErBjK,EAAWkK,EADE1K,KAAK6E,KAAK6F,EAAI,GAG7B,OAAOlK,EAAW,IAAM,EAAIA,EAAW,EAAIA,GAvB1B,EA2BnBiK,QAAU,SAACrO,GACT,IAAI0I,EAAO,KACX,GAAa,QAAT1I,GAEF,IADA0I,GAAQxI,OAAOqO,YAAc,IAAIC,QAAQ,GAAK,GACnC,GACT,OAAO,OAEJ,GAAa,QAATxO,IACT0I,GAAQxI,OAAOuO,WAAa,IAAID,QAAQ,GAAK,GAClC,GACT,OAAO,EAMX,OAHI9F,EAAO,IAAM,GACfA,IAEKA,GAzCP,EAAK3H,MAAQ,CACXO,KAAM,EAAK+M,QAAQ,OACnB7M,QAAS,EAAK6M,QAAQ,OACtB7N,OAAQ,EAAK2N,YAAY,OACzBzN,OAAQ,EAAKyN,YAAY,YACzBvN,KAAM,EAAKuN,YAAY,OACvBrN,KAAM,EAAKqN,YAAY,WARR,E,qDA+CjB,OACE,yBAAKhP,UAAU,OACb,kBAAC,GAAD,CACEmC,KAAM0L,KAAKjM,MAAMO,KACjBE,QAASwL,KAAKjM,MAAMS,QACpBhB,OAAQwM,KAAKjM,MAAMP,OACnBE,OAAQsM,KAAKjM,MAAML,OACnBE,KAAMoM,KAAKjM,MAAMH,KACjBE,KAAMkM,KAAKjM,MAAMD,Y,GAxDTmN,aCClBS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFhM,SAASC,eAAe,W","file":"static/js/main.5c3970d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  }else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.visited = false;\r\n      cell.id = 0;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n        direction: \"\",\r\n        //TODO: ASTAR scenario (this variables shall be handled differently later)\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n    \r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nexport function visualizeOnWalledGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeRandom(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeABMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  var previous = null;\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[path.length - 1]);\r\n        return;\r\n      }\r\n      if (previous !== null) {\r\n        if (previous.isWall) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", previous);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", previous);\r\n        }\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", path[i]);\r\n        previous = path[i];\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport async function visualizeWilson(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      return;\r\n    }\r\n    var previous = null;\r\n    var currentPath = path[i][0];\r\n    var isOptimalPath = path[i][1];\r\n    var aim = path[i][2];\r\n\r\n    var type = document.getElementById(`${\"cell\"}-${aim.row}-${aim.col}`)\r\n      .className;\r\n\r\n    if (!aim.end && !aim.start) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", aim);\r\n    }\r\n    if (!isOptimalPath) {\r\n      for (let j = 0; j < currentPath.length; j++) {\r\n        if (previous !== null) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", previous);\r\n        }\r\n\r\n        if (!currentPath[j].end && !currentPath[j].start) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", currentPath[j]);\r\n          previous = currentPath[j];\r\n        }\r\n\r\n        if (currentPath[j] !== currentPath.length - 1) {\r\n          await new Promise((r) => setTimeout(r, 5));\r\n        }\r\n      }\r\n    }\r\n    if (!aim.end && !aim.start) {\r\n      if (type === \"cell cell-wall\") {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", aim);\r\n      } else {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", aim);\r\n      }\r\n    }\r\n\r\n    for (let j = currentPath.length - 1; j >= 0; j--) {\r\n      if (!currentPath[j].end && !currentPath[j].start) {\r\n        if (!isOptimalPath) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", currentPath[j]);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", currentPath[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function visualizeOnEmptyGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nimport { visualizeRandom } from \"../mazes/animations\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  var path = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n      path.push(cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeRandom(grid, path);\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    wallPairs.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    wallPairs.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    wallPairs.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    wallPairs.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function iterativeMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  var cellsWithUnvisitedNeighbors = [];\r\n  cellsWithUnvisitedNeighbors.push(currentCell);\r\n\r\n  while (!!cellsWithUnvisitedNeighbors.length) {\r\n    currentCell = takeLastCell(cellsWithUnvisitedNeighbors);\r\n    var neighboringUnvisitedPairs = getNeighboringCells(currentCell, grid);\r\n    if (neighboringUnvisitedPairs.length > 0) {\r\n      cellsWithUnvisitedNeighbors.push(currentCell);\r\n      var randomPair =\r\n        neighboringUnvisitedPairs[\r\n          Math.floor(Math.random() * neighboringUnvisitedPairs.length)\r\n        ];\r\n      randomPair[0].isWall = false;\r\n      randomPair[1].isWall = false;\r\n      randomPair[1].visited = true;\r\n      path.push(randomPair[0]);\r\n      path.push(randomPair[1]);\r\n      cellsWithUnvisitedNeighbors.push(randomPair[1]);\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction takeLastCell(cellsWithUnvisitedNeighbors) {\r\n  var position = cellsWithUnvisitedNeighbors.length - 1;\r\n  var cell = cellsWithUnvisitedNeighbors[position];\r\n  cellsWithUnvisitedNeighbors.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function recursiveMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  recursion(grid, currentCell, path);\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  //visualization\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction recursion(grid, currentCell, path) {\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  currentCell.neighbors = getNeighboringCells(currentCell, grid);\r\n  while (currentCell.neighbors.length > 0) {\r\n    var position = Math.floor(Math.random() * currentCell.neighbors.length);\r\n    var randomPair = currentCell.neighbors[position];\r\n    currentCell.neighbors.splice(position, 1);\r\n    if (!randomPair[1].visited) {\r\n      randomPair[0].isWall = false;\r\n      path.push(randomPair[0]);\r\n      recursion(grid, randomPair[1], path);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import { visualizeABMaze } from \"../mazes/animations\";\r\nimport {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\n\r\nexport function aldousBroderMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var unvisitedCells = [];\r\n  var visualizationList = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  var current = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  current.visited = true;\r\n  current.isWall = false;\r\n\r\n  while (!!unvisitedCells.length) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n    visualizationList.push(neighbor[0]);\r\n    visualizationList.push(neighbor[1]);\r\n    if (!neighbor[1].visited) {\r\n      neighbor[0].isWall = false;\r\n      neighbor[1].isWall = false;\r\n      unvisitedCells = unvisitedCells.filter(\r\n        (item) => item.id !== neighbor[1].id\r\n      );\r\n      neighbor[1].visited = true;\r\n    }\r\n    current = neighbor[1];\r\n  }\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeABMaze(grid, visualizationList);\r\n}\r\n\r\n/*function takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  return cell;\r\n}*/\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function kruskalMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var idCounter = 0;\r\n  var validWalls = [];\r\n  var map = new Map();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        //CELLS\r\n        map.set(cell, idCounter++);\r\n      } else if (cell.row % 2 === 1 || cell.col % 2 === 1) {\r\n        if (\r\n          cell.row !== 0 &&\r\n          cell.col !== 0 &&\r\n          cell.row !== grid.length - 1 &&\r\n          cell.col !== grid[0].length - 1\r\n        ) {\r\n          //WALLS\r\n          getSurroundingCells(cell, grid);\r\n          validWalls.push(cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shuffleArray(validWalls);\r\n\r\n  for (const wall of validWalls) {\r\n    const first = map.get(wall.neighbors[0]);\r\n    const second = map.get(wall.neighbors[1]);\r\n    if (first !== second) {\r\n      map.forEach((value, key) => {\r\n        if (value === second) {\r\n          map.set(key, first);\r\n        }\r\n      });\r\n\r\n      wall.neighbors[0].isWall = false;\r\n      wall.isWall = false;\r\n      wall.neighbors[1].isWall = false;\r\n\r\n      if (!path.includes(wall.neighbors[0])) path.push(wall.neighbors[0]);\r\n      if (!path.includes(wall)) path.push(wall);\r\n      if (!path.includes(wall.neighbors[1])) path.push(wall.neighbors[1]);\r\n    }\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getSurroundingCells(wall, grid) {\r\n  var { col, row } = wall;\r\n  if (wall.row % 2 === 1) {\r\n    wall.neighbors.push(grid[row][col + 1]);\r\n    wall.neighbors.push(grid[row][col - 1]);\r\n  } else {\r\n    wall.neighbors.push(grid[row - 1][col]);\r\n    wall.neighbors.push(grid[row + 1][col]);\r\n  }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeWilson } from \"../mazes/animations\";\r\nexport function wilsonMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var unvisitedCells = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n  var newPath = [];\r\n  while (unvisitedCells.length >= 1) {\r\n    var start = takeRandomCell(unvisitedCells);\r\n    var aim = getRandomCell(unvisitedCells);\r\n    var originalAim = aim;\r\n    newPath = [];\r\n    var nextCell = start;\r\n    newPath.push(nextCell);\r\n    while (nextCell !== aim) {\r\n      var newCell =\r\n        nextCell.neighbors[\r\n          Math.floor(Math.random() * nextCell.neighbors.length)\r\n        ];\r\n\r\n      if (nextCell.visited) {\r\n        aim = nextCell;\r\n      } else {\r\n        nextCell.direction = newCell[2];\r\n        nextCell = newCell[1];\r\n        newPath.push(newCell[0]);\r\n        newPath.push(newCell[1]);\r\n      }\r\n    }\r\n    if (newPath.length > 1) {\r\n      path.push([newPath, false, originalAim]);\r\n    }\r\n\r\n    removeCycle(nextCell, start, aim, grid, path, originalAim);\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeWilson(grid, path);\r\n}\r\nfunction clearDirections(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.direction = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  unvisitedCells.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  return cell;\r\n}\r\n\r\nfunction removeCycle(nextCell, start, aim, grid, path, originalAim) {\r\n  var newPath = [];\r\n  nextCell = start;\r\n  nextCell.visited = true;\r\n  nextCell.isWall = false;\r\n  newPath.push(nextCell);\r\n  if (nextCell !== aim) {\r\n    while (nextCell !== aim) {\r\n      var { col, row } = nextCell;\r\n      if (nextCell.direction === \"UP\") {\r\n        grid[row - 1][col].isWall = false;\r\n        grid[row - 2][col].isWall = false;\r\n        grid[row - 2][col].visited = true;\r\n        nextCell = grid[row - 2][col];\r\n        newPath.push(grid[row - 1][col]);\r\n        newPath.push(grid[row - 2][col]);\r\n      } else if (nextCell.direction === \"DOWN\") {\r\n        grid[row + 1][col].isWall = false;\r\n        grid[row + 2][col].isWall = false;\r\n        grid[row + 2][col].visited = true;\r\n        nextCell = grid[row + 2][col];\r\n        newPath.push(grid[row + 1][col]);\r\n        newPath.push(grid[row + 2][col]);\r\n      } else if (nextCell.direction === \"RIGHT\") {\r\n        grid[row][col + 1].isWall = false;\r\n        grid[row][col + 2].isWall = false;\r\n        grid[row][col + 2].visited = true;\r\n        nextCell = grid[row][col + 2];\r\n        newPath.push(grid[row][col + 1]);\r\n        newPath.push(grid[row][col + 2]);\r\n      } else if (nextCell.direction === \"LEFT\") {\r\n        grid[row][col - 1].isWall = false;\r\n        grid[row][col - 2].isWall = false;\r\n        grid[row][col - 2].visited = true;\r\n        nextCell = grid[row][col - 2];\r\n        newPath.push(grid[row][col - 1]);\r\n        newPath.push(grid[row][col - 2]);\r\n      }\r\n    }\r\n  }\r\n  if (newPath.length > 1) {\r\n    path.push([newPath, true, originalAim]);\r\n  }\r\n\r\n  clearDirections(grid);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col], \"UP\"]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2], \"RIGHT\"]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col], \"DOWN\"]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2], \"LEFT\"]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function recursiveDivision(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  recursion(\r\n    grid[1][1],\r\n    grid[1][grid[1].length - 2],\r\n    grid[grid.length - 2][1],\r\n    grid[grid.length - 2][grid[1].length - 2],\r\n    grid,\r\n    path\r\n  );\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n\r\nfunction recursion(topLeft, topRight, bottomLeft, bottomRight, grid, path) {\r\n  var width = topRight.col - topLeft.col + 1;\r\n  var height = bottomLeft.row - topLeft.row + 1;\r\n  if (height < 3 || width < 3) return;\r\n\r\n  var middle = null;\r\n  var randomPosition = null;\r\n\r\n  if (width >= height) {\r\n    //Vertical\r\n    middle = getMiddleLine(width, topLeft.col);\r\n    randomPosition = getRandomPosition(height);\r\n\r\n    for (let i = topLeft.row; i < topLeft.row + height; i++) {\r\n      if (i !== topLeft.row + randomPosition - 1) {\r\n        path.push(grid[i][middle]);\r\n        grid[i][middle].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    verticalLeft(grid, topLeft, bottomLeft, middle, path);\r\n    verticalRight(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    return;\r\n  } else {\r\n    //Horizontal\r\n    middle = getMiddleLine(height, topLeft.row);\r\n    randomPosition = getRandomPosition(width);\r\n    for (let i = topLeft.col; i < topLeft.col + width; i++) {\r\n      if (i !== topLeft.col + randomPosition - 1) {\r\n        path.push(grid[middle][i]);\r\n        grid[middle][i].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    horizontalTop(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    horizontalBottom(grid, bottomLeft, bottomRight, middle, path);\r\n    return;\r\n  }\r\n}\r\n\r\nfunction verticalLeft(grid, topLeft, bottomLeft, middle, path) {\r\n  if (\r\n    grid[topLeft.row][middle - 1].col - topLeft.col > 0 &&\r\n    bottomLeft.row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      grid[topLeft.row][middle - 1],\r\n      bottomLeft,\r\n      grid[bottomLeft.row][middle - 1],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction verticalRight(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - grid[topLeft.row][middle + 1].col > 0 &&\r\n    grid[bottomLeft.row][middle + 1].row - grid[topLeft.row][middle + 1].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[topLeft.row][middle + 1],\r\n      topRight,\r\n      grid[bottomLeft.row][middle + 1],\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalTop(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - topLeft.col > 0 &&\r\n    grid[middle - 1][bottomLeft.col].row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      topRight,\r\n      grid[middle - 1][bottomLeft.col],\r\n      grid[middle - 1][bottomRight.col],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalBottom(grid, bottomLeft, bottomRight, middle, path) {\r\n  if (\r\n    grid[middle + 1][bottomRight.col].col -\r\n      grid[middle + 1][bottomLeft.col].col >\r\n      0 &&\r\n    bottomLeft.row - grid[middle + 1][bottomLeft.col].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[middle + 1][bottomLeft.col],\r\n      grid[middle + 1][bottomRight.col],\r\n      bottomLeft,\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getMiddleLine(position, reference) {\r\n  var half = Math.ceil(position / 2);\r\n  half = half % 2 === 0 ? half : half + (Math.random() < 0.5 ? -1 : 1);\r\n  return half + reference - 1;\r\n}\r\n\r\nfunction getRandomPosition(size) {\r\n  var num = Math.floor(Math.random() * (size - 1 + 1)) + 1;\r\n  return num % 2 === 1 ? num : num + (Math.random() < 0.5 ? -1 : 1);\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicHorizontal(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid.length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid[0].length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid[0].length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid[0].length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicVertical(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid[0].length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid.length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid.length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid.length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function binaryTreeAlg(originalGrid, direction) {\r\n  clearWithStatus(\"path\");\r\n \r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  getDirection(direction, grid, path);\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getDirection(direction, grid, path) {\r\n  var id = 0;\r\n  if (direction === \"NorthWest\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"NorthEast\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"East\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthWest\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthEast\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"East\", id);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateCells(grid, current, path, param1, param2, id) {\r\n  current.isWall = false;\r\n  path.push(current);\r\n\r\n  getNeighboringCells(current, grid, param1, param2);\r\n  current.id = id;\r\n  id++;\r\n  if (current.neighbors.length !== 0) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n\r\n    neighbor[0].isWall = false;\r\n    path.push(neighbor[0]);\r\n\r\n    if (!path.some((e) => e.id === neighbor[1].id)) {\r\n      neighbor[1].isWall = false;\r\n      path.push(neighbor[1]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid, param1, param2) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1 && (param1 === \"North\" || param2 === \"North\")) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2 && (param1 === \"East\" || param2 === \"East\")) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2 && (param1 === \"South\" || param2 === \"South\")) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1 && (param1 === \"West\" || param2 === \"West\")) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function ellerMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var idCounter = 1;\r\n  for (let i = 1; i < grid.length; i += 2) {\r\n    var map = new Map();\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      if (grid[i][j].id === 0) {\r\n        grid[i][j].id = idCounter;\r\n        idCounter++;\r\n      }\r\n    }\r\n\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      var currentCell = grid[i][j];\r\n      getNeighboringCells(currentCell, grid);\r\n      if (grid.length - 2 !== i) {\r\n        path.push(currentCell);\r\n        currentCell.isWall = false;\r\n      }\r\n      if (Math.random() < 0.5 && currentCell.neighbors[0] !== null) {\r\n        if (grid.length - 2 !== i) {\r\n          path.push(currentCell.neighbors[0][0]);\r\n          currentCell.neighbors[0][0].isWall = false;\r\n        }\r\n        currentCell.neighbors[0][1].id = currentCell.id;\r\n      }\r\n    }\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      var currentCell = grid[i][j];\r\n      map.set(currentCell, currentCell.id);\r\n    }\r\n    if (grid.length - 2 === i) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        var currentCell = grid[i][j];\r\n        path.push(currentCell);\r\n        currentCell.isWall = false;\r\n        if (currentCell.neighbors[0] !== null) {\r\n          path.push(currentCell.neighbors[0][0]);\r\n          currentCell.neighbors[0][0].isWall = false;\r\n          currentCell.neighbors[0][1].id = currentCell.id;\r\n        }\r\n      }\r\n      continue;\r\n    }\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      var currentCell = grid[i][j];\r\n      var counter = 0;\r\n      map.forEach((value, key) => {\r\n        if (value === currentCell.id) {\r\n          counter++;\r\n        }\r\n      });\r\n      if (counter === 1) {\r\n        path.push(currentCell.neighbors[1][0]);\r\n        currentCell.neighbors[1][0].isWall = false;\r\n      } else if (counter > 1) {\r\n        if (Math.random() > 0.5) {\r\n          map.forEach((value, key) => {\r\n            if (value === currentCell.id) {\r\n              map.delete(key);\r\n            }\r\n          });\r\n          path.push(currentCell.neighbors[1][0]);\r\n          currentCell.neighbors[1][0].isWall = false;\r\n        } else {\r\n          map.forEach((value, key) => {\r\n            if (key === currentCell) {\r\n              map.delete(key);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;  \r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nimport { clearVisitedCells } from \"../cleaning\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}","import { animateFast, animateSlow } from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];    \r\n    if (currentCell === endCell) {\r\n      console.log(endCell.end);\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { iterativeMaze } from \"../Algorithms/mazes/iterativeDF\";\r\nimport { recursiveMaze } from \"../Algorithms/mazes/recursiveDF\";\r\nimport { aldousBroderMaze } from \"../Algorithms/mazes/aldousBroder\";\r\nimport { kruskalMaze } from \"../Algorithms/mazes/kruskal\";\r\nimport { wilsonMaze } from \"../Algorithms/mazes/wilson\";\r\nimport { recursiveDivision } from \"../Algorithms/mazes/recursiveDivision\";\r\nimport { basicHorizontal } from \"../Algorithms/mazes/basicHorizontal\";\r\nimport { basicVertical } from \"../Algorithms/mazes/basicVertical\";\r\nimport { binaryTreeAlg } from \"../Algorithms/mazes/binaryTree\";\r\nimport { ellerMaze } from \"../Algorithms/mazes/eller\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      currentMaze: \"default\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: false,\r\n      optimizedVisualization: true,\r\n    };\r\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\r\n    this.handleButtonChange = this.handleButtonChange.bind(this);\r\n    this.handleMazeChange = this.handleMazeChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleAlgoChange(event) {\r\n    this.setState({ currentAlg: event.target.value });\r\n  }\r\n  handleButtonChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleMazeChange(event) {\r\n    if (event.target.value === \"random\") getRandomMazedGrid(this.state.grid);\r\n    else if (event.target.value === \"prim\") primMaze(this.state.grid);\r\n    else if (event.target.value === \"iterative\") iterativeMaze(this.state.grid);\r\n    else if (event.target.value === \"recursive\") recursiveMaze(this.state.grid);\r\n    else if (event.target.value === \"aldousBroder\")\r\n      aldousBroderMaze(this.state.grid);\r\n    else if (event.target.value === \"kruskal\") kruskalMaze(this.state.grid);\r\n    else if (event.target.value === \"wilson\") wilsonMaze(this.state.grid);\r\n    else if (event.target.value === \"recursiveDivision\")\r\n      recursiveDivision(this.state.grid);\r\n    else if (event.target.value === \"basicHorizontal\")\r\n      basicHorizontal(this.state.grid);\r\n    else if (event.target.value === \"basicVertical\")\r\n      basicVertical(this.state.grid);\r\n    else if (event.target.value === \"eller\") ellerMaze(this.state.grid);\r\n    else if (event.target.value === \"binaryTreeNW\")\r\n      binaryTreeAlg(this.state.grid, \"NorthWest\");\r\n    else if (event.target.value === \"binaryTreeNE\")\r\n      binaryTreeAlg(this.state.grid, \"NorthEast\");\r\n    else if (event.target.value === \"binaryTreeSW\")\r\n      binaryTreeAlg(this.state.grid, \"SouthWest\");\r\n    else if (event.target.value === \"binaryTreeSE\")\r\n      binaryTreeAlg(this.state.grid, \"SouthEast\");\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleAlgoChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <select\r\n          value={this.state.currentMaze}\r\n          onChange={this.handleMazeChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"default\" disabled hidden>\r\n            Mazes\r\n          </option>\r\n          <optgroup label=\"Patterns\">\r\n            <option value=\"random\">Random</option>\r\n            <option value=\"basicHorizontal\">Basic Horizontal</option>\r\n            <option value=\"basicVertical\">Basic Vertical</option>\r\n          </optgroup>\r\n          <optgroup label=\"Algorithms\">\r\n            <option value=\"prim\">Prim</option>\r\n            <option value=\"iterative\">Iterative Depth-first</option>\r\n            <option value=\"recursive\">Recursive Depth-first</option>\r\n            <option value=\"aldousBroder\">Aldous-Broder</option>\r\n            <option value=\"kruskal\">Kruskal</option>\r\n            <option value=\"wilson\">Wilson</option>\r\n            <option value=\"recursiveDivision\">Recursive Division</option>\r\n            <option value=\"eller\">Eller</option>\r\n          </optgroup>\r\n          <optgroup label=\"&nbsp;&nbsp;&nbsp;Binary Tree Algorithm\">\r\n            <option value=\"binaryTreeSE\">&nbsp;&nbsp;&nbsp;South-East</option>\r\n            <option value=\"binaryTreeSW\">&nbsp;&nbsp;&nbsp;South-West</option>\r\n            <option value=\"binaryTreeNE\">&nbsp;&nbsp;&nbsp;North-East</option>\r\n            <option value=\"binaryTreeNW\">&nbsp;&nbsp;&nbsp;North-West</option>\r\n          </optgroup>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n    return position % 2 === 0 ? position + 1 : position;\r\n    // return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}