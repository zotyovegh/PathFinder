{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/mazes/animations.js","Algorithms/mazes/default.js","Algorithms/mazes/prim.js","Algorithms/mazes/iterativeDF.js","Algorithms/mazes/recursiveDF.js","Algorithms/mazes/aldousBroder.js","Algorithms/mazes/kruskal.js","Algorithms/mazes/wilson.js","Algorithms/mazes/recursiveDivision.js","Algorithms/mazes/basicHorizontal.js","Algorithms/mazes/basicVertical.js","Algorithms/mazes/binaryTree.js","Algorithms/mazes/eller.js","Algorithms/searchers/animations/standardAnimations.js","Algorithms/searchers/dijkstra/dijkstraStandMethods.js","Algorithms/searchers/animations/bidirectionalAnim.js","Algorithms/searchers/dijkstra/dijkstraBidMethods.js","Algorithms/searchers/animations/astarAnim.js","Algorithms/searchers/astar.js","Algorithms/searchers/depthFirst.js","Algorithms/searchers/breadthFirst.js","Grid/index.js","Algorithms/searchers/dijkstra/dijsktraBidirectional.js","Algorithms/searchers/dijkstra/dijkstraStandard.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","idSec","distanceSec","visited","visitedSec","previous","previousSec","direction","directionSec","f","g","h","neighbors","isWall","clearInfinityVariables","push","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","visualizeOnWalledGrid","path","setTimeout","length","a","currentPath","isOptimalPath","aim","Promise","r","visualizeOnEmptyGrid","getRandomMazedGrid","numberOfCells","wallAmount","Math","floor","random","visualizeRandom","getNeighboringWalls","wallPairs","neighbor","takeRandomPair","position","pair","splice","takeLastCell","cellsWithUnvisitedNeighbors","getNeighboringCells","neighboringUnvisitedPairs","recursiveMaze","originalGrid","JSON","parse","stringify","recursion","currentCell","randomPair","aldousBroderMaze","unvisitedCells","visualizationList","current","filter","item","visualizeABMaze","kruskalMaze","idCounter","validWalls","map","Map","set","getSurroundingCells","array","temp","shuffleArray","wall","first","get","second","forEach","value","key","includes","wilsonMaze","newPath","takeRandomCell","getRandomCell","originalAim","nextCell","removeCycle","visualizeWilson","clearDirections","recursiveDivision","middle","leftIndex","rightIndex","drawEdges","topLeft","topRight","bottomLeft","bottomRight","width","height","randomPosition","getMiddleLine","getRandomPosition","verticalLeft","verticalRight","horizontalTop","horizontalBottom","reference","half","ceil","size","num","basicHorizontal","exc","basicVertical","binaryTreeAlg","updateCells","getDirection","param1","param2","some","sideMove","remove","isVisited","animateSlow","visitedCells","cellsInOrder","previousVisualization","animatePathSlow","animateFast","animatePathFast","getUnvisitedNeighbors","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","DoAnimation","speed","bidirectionalSlow","main","sec","animateBidirectionalPathSlow","animateBidirectionalPathFast","getMainUnvisitedNeighbors","getSecUnvisitedNeighbors","addNeighbor","DoBidirectionalAnimation","mainCells","secondaryCells","meetingCell","reformatId","cellMain","cellSec","getCellsInOrderBidirectional","bidirectionalFast","animateAstarSlow","allSet","animateAstarPathSlow","openSet","closedSet","k","animateAstarFast","animateAstarPathFast","astar","startCell","optimized","findNeighbors","cameFrom","heuristic","eliminateFromSet","tentative_gScore","dScore","slice","cell1","cell2","SQRT2","abs","sqrt","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","bidirectionalVisualization","isFinished","idMain","unvisitedCellsMain","unvisitedCellsSec","visitedCellsMain","visitedCellsSec","directionMain","previousRowMain","previousRowSec","sort","nextMainCell","shift","nextSecCell","dijkstraBidirectional","diagonalVisualization","previousRow","dijkstraStandard","optimizedVisualization","mainList","pop","depthFirst","breadthFirst","currentMaze","handleAlgoChange","bind","handleButtonChange","handleMazeChange","event","this","target","currentPair","primMaze","iterativeMaze","list","counter","x","ellerMaze","index","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","hidden","label","Component","App","getPosition","parameter","getSize","innerHeight","toFixed","innerWidth","title","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.777f25d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.id = 0;\r\n      cell.idSec = 0;\r\n      cell.distance = Infinity;\r\n      cell.distanceSec = Infinity;\r\n      cell.visited = false;\r\n      cell.visitedSec = false;\r\n      cell.previous = null;\r\n      cell.previousSec = null;\r\n      cell.direction = \"\";\r\n      cell.directionSec = \"\";\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.visited = false;\r\n      cell.id = 0;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        idSec: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        distanceSec: Infinity,\r\n        visited: false,\r\n        visitedSec: false,\r\n        isWall: false,\r\n        previous: null,\r\n        previousSec: null,\r\n        direction: \"\",\r\n        directionSec: \"\",\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { clearVisitedCells } from \"../cleaning\";\r\nimport { visualizeCell } from \"../methods\";\r\nexport function visualizeOnWalledGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeRandom(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeABMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  var previous = null;\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[path.length - 1]);\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (previous !== null) {\r\n        if (previous.isWall) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", previous);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", previous);\r\n        }\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", path[i]);\r\n        previous = path[i];\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport async function visualizeWilson(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    if (i === path.length) {\r\n      window.gridComponent.setState({ status: \"pending\" });\r\n      clearVisitedCells();\r\n      return;\r\n    }\r\n    var previous = null;\r\n    var currentPath = path[i][0];\r\n    var isOptimalPath = path[i][1];\r\n    var aim = path[i][2] === null ? null : path[i][2];\r\n\r\n    var type =\r\n      aim === null\r\n        ? null\r\n        : document.getElementById(`${\"cell\"}-${aim.row}-${aim.col}`).className;\r\n    if (aim !== null) {\r\n      if (!aim.end && !aim.start) {\r\n        visualizeCell(\"cell\", \"cell cell-previous\", aim);\r\n      }\r\n    }\r\n\r\n    if (!isOptimalPath) {\r\n      for (let j = 0; j < currentPath.length; j++) {\r\n        if (previous !== null) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", previous);\r\n        }\r\n\r\n        if (!currentPath[j].end && !currentPath[j].start) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", currentPath[j]);\r\n          previous = currentPath[j];\r\n        }\r\n\r\n        if (currentPath[j] !== currentPath.length - 1) {\r\n          await new Promise((r) => setTimeout(r, 5));\r\n        }\r\n      }\r\n    }\r\n    if (aim !== null) {\r\n      if (!aim.end && !aim.start) {\r\n        if (type === \"cell cell-wall\") {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", aim);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", aim);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = currentPath.length - 1; j >= 0; j--) {\r\n      if (!currentPath[j].end && !currentPath[j].start) {\r\n        if (!isOptimalPath) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", currentPath[j]);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", currentPath[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function visualizeOnEmptyGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        clearVisitedCells();\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nimport { visualizeRandom } from \"../mazes/animations\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  var path = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n      path.push(cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeRandom(grid, path);\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    wallPairs.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    wallPairs.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    wallPairs.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    wallPairs.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function iterativeMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  var cellsWithUnvisitedNeighbors = [];\r\n  cellsWithUnvisitedNeighbors.push(currentCell);\r\n\r\n  while (!!cellsWithUnvisitedNeighbors.length) {\r\n    currentCell = takeLastCell(cellsWithUnvisitedNeighbors);\r\n    var neighboringUnvisitedPairs = getNeighboringCells(currentCell, grid);\r\n    if (neighboringUnvisitedPairs.length > 0) {\r\n      cellsWithUnvisitedNeighbors.push(currentCell);\r\n      var randomPair =\r\n        neighboringUnvisitedPairs[\r\n          Math.floor(Math.random() * neighboringUnvisitedPairs.length)\r\n        ];\r\n      randomPair[0].isWall = false;\r\n      randomPair[1].isWall = false;\r\n      randomPair[1].visited = true;\r\n      path.push(randomPair[0]);\r\n      path.push(randomPair[1]);\r\n      cellsWithUnvisitedNeighbors.push(randomPair[1]);\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction takeLastCell(cellsWithUnvisitedNeighbors) {\r\n  var position = cellsWithUnvisitedNeighbors.length - 1;\r\n  var cell = cellsWithUnvisitedNeighbors[position];\r\n  cellsWithUnvisitedNeighbors.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function recursiveMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  recursion(grid, currentCell, path);\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  //visualization\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction recursion(grid, currentCell, path) {\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  currentCell.neighbors = getNeighboringCells(currentCell, grid);\r\n  while (currentCell.neighbors.length > 0) {\r\n    var position = Math.floor(Math.random() * currentCell.neighbors.length);\r\n    var randomPair = currentCell.neighbors[position];\r\n    currentCell.neighbors.splice(position, 1);\r\n    if (!randomPair[1].visited) {\r\n      randomPair[0].isWall = false;\r\n      path.push(randomPair[0]);\r\n      recursion(grid, randomPair[1], path);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import { visualizeABMaze } from \"../mazes/animations\";\r\nimport {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n  clearVisitedCells,\r\n} from \"../../Algorithms/cleaning\";\r\n\r\nexport function aldousBroderMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var unvisitedCells = [];\r\n  var visualizationList = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  var current = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  current.visited = true;\r\n  current.isWall = false;\r\n\r\n  while (!!unvisitedCells.length) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n    visualizationList.push(neighbor[0]);\r\n    visualizationList.push(neighbor[1]);\r\n    if (!neighbor[1].visited) {\r\n      neighbor[0].isWall = false;\r\n      neighbor[1].isWall = false;\r\n      unvisitedCells = unvisitedCells.filter(\r\n        (item) => item.id !== neighbor[1].id\r\n      );\r\n      neighbor[1].visited = true;\r\n    }\r\n    current = neighbor[1];\r\n  }\r\n  clearInfinityVariables(grid);\r\n  \r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeABMaze(grid, visualizationList);\r\n}\r\n\r\n/*function takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  return cell;\r\n}*/\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function kruskalMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var idCounter = 0;\r\n  var validWalls = [];\r\n  var map = new Map();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        //CELLS\r\n        map.set(cell, idCounter++);\r\n      } else if (cell.row % 2 === 1 || cell.col % 2 === 1) {\r\n        if (\r\n          cell.row !== 0 &&\r\n          cell.col !== 0 &&\r\n          cell.row !== grid.length - 1 &&\r\n          cell.col !== grid[0].length - 1\r\n        ) {\r\n          //WALLS\r\n          getSurroundingCells(cell, grid);\r\n          validWalls.push(cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shuffleArray(validWalls);\r\n\r\n  for (const wall of validWalls) {\r\n    const first = map.get(wall.neighbors[0]);\r\n    const second = map.get(wall.neighbors[1]);\r\n    if (first !== second) {\r\n      map.forEach((value, key) => {\r\n        if (value === second) {\r\n          map.set(key, first);\r\n        }\r\n      });\r\n\r\n      wall.neighbors[0].isWall = false;\r\n      wall.isWall = false;\r\n      wall.neighbors[1].isWall = false;\r\n\r\n      if (!path.includes(wall.neighbors[0])) path.push(wall.neighbors[0]);\r\n      if (!path.includes(wall)) path.push(wall);\r\n      if (!path.includes(wall.neighbors[1])) path.push(wall.neighbors[1]);\r\n    }\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getSurroundingCells(wall, grid) {\r\n  var { col, row } = wall;\r\n  if (wall.row % 2 === 1) {\r\n    wall.neighbors.push(grid[row][col + 1]);\r\n    wall.neighbors.push(grid[row][col - 1]);\r\n  } else {\r\n    wall.neighbors.push(grid[row - 1][col]);\r\n    wall.neighbors.push(grid[row + 1][col]);\r\n  }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeWilson } from \"../mazes/animations\";\r\nexport function wilsonMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var unvisitedCells = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n  var newPath = [];\r\n  while (unvisitedCells.length >= 1) {\r\n    var start = takeRandomCell(unvisitedCells);\r\n    var aim =\r\n      unvisitedCells.length !== 0 ? getRandomCell(unvisitedCells) : null;\r\n\r\n    var originalAim = aim;\r\n    newPath = [];\r\n    var nextCell = start;\r\n    newPath.push(nextCell);\r\n    while (nextCell !== aim) {\r\n      var newCell =\r\n        nextCell.neighbors[\r\n          Math.floor(Math.random() * nextCell.neighbors.length)\r\n        ];\r\n\r\n      if (nextCell.visited) {\r\n        aim = nextCell;\r\n      } else {\r\n        nextCell.direction = newCell[2];\r\n        nextCell = newCell[1];\r\n        newPath.push(newCell[0]);\r\n        newPath.push(newCell[1]);\r\n      }\r\n    }\r\n    if (newPath.length > 1) {\r\n      path.push([newPath, false, originalAim]);\r\n    }\r\n\r\n    removeCycle(nextCell, start, aim, grid, path, originalAim);\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeWilson(grid, path);\r\n}\r\nfunction clearDirections(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.direction = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  unvisitedCells.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[position];\r\n  return cell;\r\n}\r\n\r\nfunction removeCycle(nextCell, start, aim, grid, path, originalAim) {\r\n  var newPath = [];\r\n  nextCell = start;\r\n  nextCell.visited = true;\r\n  nextCell.isWall = false;\r\n  newPath.push(nextCell);\r\n  if (nextCell !== aim) {\r\n    while (nextCell !== aim) {\r\n      var { col, row } = nextCell;\r\n      if (nextCell.direction === \"UP\") {\r\n        grid[row - 1][col].isWall = false;\r\n        grid[row - 2][col].isWall = false;\r\n        grid[row - 2][col].visited = true;\r\n        nextCell = grid[row - 2][col];\r\n        newPath.push(grid[row - 1][col]);\r\n        newPath.push(grid[row - 2][col]);\r\n      } else if (nextCell.direction === \"DOWN\") {\r\n        grid[row + 1][col].isWall = false;\r\n        grid[row + 2][col].isWall = false;\r\n        grid[row + 2][col].visited = true;\r\n        nextCell = grid[row + 2][col];\r\n        newPath.push(grid[row + 1][col]);\r\n        newPath.push(grid[row + 2][col]);\r\n      } else if (nextCell.direction === \"RIGHT\") {\r\n        grid[row][col + 1].isWall = false;\r\n        grid[row][col + 2].isWall = false;\r\n        grid[row][col + 2].visited = true;\r\n        nextCell = grid[row][col + 2];\r\n        newPath.push(grid[row][col + 1]);\r\n        newPath.push(grid[row][col + 2]);\r\n      } else if (nextCell.direction === \"LEFT\") {\r\n        grid[row][col - 1].isWall = false;\r\n        grid[row][col - 2].isWall = false;\r\n        grid[row][col - 2].visited = true;\r\n        nextCell = grid[row][col - 2];\r\n        newPath.push(grid[row][col - 1]);\r\n        newPath.push(grid[row][col - 2]);\r\n      }\r\n    }\r\n  }\r\n  if (newPath.length > 1) {\r\n    path.push([newPath, true, originalAim]);\r\n  }\r\n\r\n  clearDirections(grid);\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col], \"UP\"]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2], \"RIGHT\"]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col], \"DOWN\"]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2], \"LEFT\"]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function recursiveDivision(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  recursion(\r\n    grid[1][1],\r\n    grid[1][grid[1].length - 2],\r\n    grid[grid.length - 2][1],\r\n    grid[grid.length - 2][grid[1].length - 2],\r\n    grid,\r\n    path\r\n  );\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n\r\nfunction recursion(topLeft, topRight, bottomLeft, bottomRight, grid, path) {\r\n  var width = topRight.col - topLeft.col + 1;\r\n  var height = bottomLeft.row - topLeft.row + 1;\r\n  if (height < 3 || width < 3) return;\r\n\r\n  var middle = null;\r\n  var randomPosition = null;\r\n\r\n  if (width >= height) {\r\n    //Vertical\r\n    middle = getMiddleLine(width, topLeft.col);\r\n    randomPosition = getRandomPosition(height);\r\n\r\n    for (let i = topLeft.row; i < topLeft.row + height; i++) {\r\n      if (i !== topLeft.row + randomPosition - 1) {\r\n        path.push(grid[i][middle]);\r\n        grid[i][middle].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    verticalLeft(grid, topLeft, bottomLeft, middle, path);\r\n    verticalRight(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    return;\r\n  } else {\r\n    //Horizontal\r\n    middle = getMiddleLine(height, topLeft.row);\r\n    randomPosition = getRandomPosition(width);\r\n    for (let i = topLeft.col; i < topLeft.col + width; i++) {\r\n      if (i !== topLeft.col + randomPosition - 1) {\r\n        path.push(grid[middle][i]);\r\n        grid[middle][i].isWall = true;\r\n      }\r\n    }\r\n    if (height < 4 && width < 4) {\r\n      return;\r\n    }\r\n    horizontalTop(\r\n      grid,\r\n      topLeft,\r\n      topRight,\r\n      bottomLeft,\r\n      bottomRight,\r\n      middle,\r\n      path\r\n    );\r\n    horizontalBottom(grid, bottomLeft, bottomRight, middle, path);\r\n    return;\r\n  }\r\n}\r\n\r\nfunction verticalLeft(grid, topLeft, bottomLeft, middle, path) {\r\n  if (\r\n    grid[topLeft.row][middle - 1].col - topLeft.col > 0 &&\r\n    bottomLeft.row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      grid[topLeft.row][middle - 1],\r\n      bottomLeft,\r\n      grid[bottomLeft.row][middle - 1],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction verticalRight(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - grid[topLeft.row][middle + 1].col > 0 &&\r\n    grid[bottomLeft.row][middle + 1].row - grid[topLeft.row][middle + 1].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[topLeft.row][middle + 1],\r\n      topRight,\r\n      grid[bottomLeft.row][middle + 1],\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalTop(\r\n  grid,\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight,\r\n  middle,\r\n  path\r\n) {\r\n  if (\r\n    topRight.col - topLeft.col > 0 &&\r\n    grid[middle - 1][bottomLeft.col].row - topLeft.row > 0\r\n  ) {\r\n    recursion(\r\n      topLeft,\r\n      topRight,\r\n      grid[middle - 1][bottomLeft.col],\r\n      grid[middle - 1][bottomRight.col],\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction horizontalBottom(grid, bottomLeft, bottomRight, middle, path) {\r\n  if (\r\n    grid[middle + 1][bottomRight.col].col -\r\n      grid[middle + 1][bottomLeft.col].col >\r\n      0 &&\r\n    bottomLeft.row - grid[middle + 1][bottomLeft.col].row > 0\r\n  ) {\r\n    recursion(\r\n      grid[middle + 1][bottomLeft.col],\r\n      grid[middle + 1][bottomRight.col],\r\n      bottomLeft,\r\n      bottomRight,\r\n      grid,\r\n      path\r\n    );\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getMiddleLine(position, reference) {\r\n  var half = Math.ceil(position / 2);\r\n  half = half % 2 === 0 ? half : half + (Math.random() < 0.5 ? -1 : 1);\r\n  return half + reference - 1;\r\n}\r\n\r\nfunction getRandomPosition(size) {\r\n  var num = Math.floor(Math.random() * (size - 1 + 1)) + 1;\r\n  return num % 2 === 1 ? num : num + (Math.random() < 0.5 ? -1 : 1);\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicHorizontal(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid.length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid[0].length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid[0].length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid[0].length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[i][j]);\r\n        grid[i][j].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnEmptyGrid } from \"./animations\";\r\nexport function basicVertical(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  drawEdges(grid, path);\r\n  for (let i = 2; i < grid[0].length - 1; i += 2) {\r\n    var exc = Math.floor(Math.random() * (grid.length - 2 - 1 + 1)) + 1;\r\n    if (i % 4 === 0) {\r\n      for (let j = grid.length - 2; j > 0; j--) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    } else {\r\n      for (let j = 1; j < grid.length - 1; j++) {\r\n        if (j === exc) continue;\r\n        path.push(grid[j][i]);\r\n        grid[j][i].isWall = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnEmptyGrid(grid, path);\r\n}\r\n\r\nfunction drawEdges(grid, path) {\r\n  var middle = Math.floor(grid[0].length / 2);\r\n  var leftIndex = middle - 1;\r\n  var rightIndex = middle + 1;\r\n  path.push(grid[0][middle]);\r\n  grid[0][middle].isWall = true;\r\n  while (leftIndex >= 0) {\r\n    path.push(grid[0][leftIndex]);\r\n    path.push(grid[0][rightIndex]);\r\n    grid[0][leftIndex].isWall = true;\r\n    grid[0][rightIndex].isWall = true;\r\n    leftIndex--;\r\n    rightIndex++;\r\n  }\r\n  for (let i = 1; i < grid.length - 1; i++) {\r\n    path.push(grid[i][0]);\r\n    path.push(grid[i][grid[0].length - 1]);\r\n    grid[i][0].isWall = true;\r\n    grid[i][grid[0].length - 1].isWall = true;\r\n  }\r\n  leftIndex = 0;\r\n  rightIndex = grid[0].length - 1;\r\n\r\n  while (leftIndex !== middle) {\r\n    path.push(grid[grid.length - 1][leftIndex]);\r\n    path.push(grid[grid.length - 1][rightIndex]);\r\n    grid[grid.length - 1][leftIndex].isWall = true;\r\n    grid[grid.length - 1][rightIndex].isWall = true;\r\n    leftIndex++;\r\n    rightIndex--;\r\n  }\r\n  path.push(grid[grid.length - 1][middle]);\r\n  grid[grid.length - 1][middle].isWall = true;\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function binaryTreeAlg(originalGrid, direction) {\r\n  clearWithStatus(\"path\");\r\n \r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  getDirection(direction, grid, path);\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getDirection(direction, grid, path) {\r\n  var id = 0;\r\n  if (direction === \"NorthWest\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"NorthEast\") {\r\n    for (let i = grid.length - 2; i > 0; i -= 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"North\", \"East\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthWest\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = grid[0].length - 2; j > 0; j -= 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"West\", id);\r\n      }\r\n    }\r\n  } else if (direction === \"SouthEast\") {\r\n    for (let i = 1; i < grid.length; i += 2) {\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        updateCells(grid, grid[i][j], path, \"South\", \"East\", id);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateCells(grid, current, path, param1, param2, id) {\r\n  current.isWall = false;\r\n  path.push(current);\r\n\r\n  getNeighboringCells(current, grid, param1, param2);\r\n  current.id = id;\r\n  id++;\r\n  if (current.neighbors.length !== 0) {\r\n    const neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n\r\n    neighbor[0].isWall = false;\r\n    path.push(neighbor[0]);\r\n\r\n    if (!path.some((e) => e.id === neighbor[1].id)) {\r\n      neighbor[1].isWall = false;\r\n      path.push(neighbor[1]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid, param1, param2) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1 && (param1 === \"North\" || param2 === \"North\")) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2 && (param1 === \"East\" || param2 === \"East\")) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2 && (param1 === \"South\" || param2 === \"South\")) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1 && (param1 === \"West\" || param2 === \"West\")) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import { clearWithStatus, clearInfinityVariables } from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function ellerMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var list = [];\r\n  var visited = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n\r\n  var idCounter = 1;\r\n  var currentCell = null;\r\n  for (let i = 1; i < grid.length; i += 2) {\r\n    var map = new Map();\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      if (grid[i][j].id === 0) {\r\n        grid[i][j].id = idCounter;\r\n        idCounter++;\r\n      }\r\n    }\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      currentCell = grid[i][j];\r\n      map.set(currentCell, currentCell.id);\r\n    }\r\n\r\n    //SIDE\r\n    for (let j = 1; j < grid[0].length; j += 2) {\r\n      currentCell = grid[i][j];\r\n      getNeighboringCells(currentCell, grid);\r\n      path.push(currentCell);\r\n      currentCell.isWall = false;\r\n\r\n      if (\r\n        currentCell.neighbors[0] !== null &&\r\n        currentCell.neighbors[0][1].id !== currentCell.id\r\n      ) {\r\n        if (grid.length - 2 === i) {\r\n          sideMove(grid, currentCell, map, path);\r\n        } else if (Math.random() < 0.5) {\r\n          sideMove(grid, currentCell, map, path);\r\n        }\r\n      }\r\n    }\r\n    if (grid.length - 2 !== i) {\r\n      //DOWN\r\n      list = [];\r\n      visited = [];\r\n\r\n      map.forEach((value, key) => {\r\n        list.push(value);\r\n      });\r\n\r\n      for (let j = 1; j < grid[0].length; j += 2) {\r\n        currentCell = grid[i][j];\r\n        var counter = list.filter((x) => x === currentCell.id).length;\r\n        if (counter === 1 && !visited.includes(currentCell.id)) {\r\n          path.push(currentCell.neighbors[1][0]);\r\n          currentCell.neighbors[1][0].isWall = false;\r\n          currentCell.neighbors[1][1].id = currentCell.id;\r\n        } else if (counter > 1) {\r\n          if (Math.random() > 0.5) {\r\n            path.push(currentCell.neighbors[1][0]);\r\n            currentCell.neighbors[1][0].isWall = false;\r\n            currentCell.neighbors[1][1].id = currentCell.id;\r\n            remove(list, visited, currentCell.id, true);\r\n          }\r\n          remove(list, visited, currentCell.id, false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction sideMove(grid, currentCell, map, path) {\r\n  path.push(currentCell.neighbors[0][0]);\r\n  currentCell.neighbors[0][0].isWall = false;\r\n  const aim = currentCell.neighbors[0][1].id;\r\n  map.forEach((value, key) => {\r\n    if (value === aim) {\r\n      map.set(key, currentCell.id);\r\n      grid[key.row][key.col].id = currentCell.id;\r\n    }\r\n  });\r\n\r\n  currentCell.neighbors[0][1].id = currentCell.id;\r\n}\r\n\r\nfunction remove(array, visited, item, isVisited) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] === item) {\r\n      if (isVisited) {\r\n        visited.push(item);\r\n      }\r\n\r\n      array.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  } else {\r\n    cell.neighbors.push(null);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../../methods\";\r\nimport { clearVisitedCells } from \"../../cleaning\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i < visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (!cell.end && !cell.start) {\r\n      visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-visited\", cell);\r\n      }\r\n    } else {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"../animations/standardAnimations\";\r\nimport { getCellsInOrder } from \"../../methods\";\r\n\r\nexport function getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn, id) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nexport function DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import { visualizeCell } from \"../../methods\";\r\n\r\nexport function bidirectionalSlow(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      setTimeout(() => {\r\n        animateBidirectionalPathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (i < main.length && !main[i].start && !main[i].end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited-animated\", main[i]);\r\n      }\r\n      if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n        visualizeCell(\"cell\", \"cell cell-visitedSecondary-animated\", sec[i]);\r\n      }\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        if (i < main.length) {\r\n          if (!main[i].start) visualizeCell(\"num\", \"num num-visited\", main[i]);\r\n          else visualizeCell(\"num\", \"num num-start\", main[i]);\r\n        }\r\n        if (i < sec.length) {\r\n          if (!sec[i].end) visualizeCell(\"num\", \"num num-visited\", sec[i]);\r\n          else visualizeCell(\"num\", \"num num-end\", sec[i]);\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\nexport function bidirectionalFast(main, sec, cellsInOrder) {\r\n  var length = main.length >= sec.length ? main.length : sec.length;\r\n  for (let i = 0; i <= length; i++) {\r\n    if (i === length) {\r\n      animateBidirectionalPathFast(cellsInOrder);\r\n    }\r\n\r\n    if (i < main.length && !main[i].start && !main[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visited\", main[i]);\r\n    }\r\n    if (i < sec.length && !sec[i].start && !sec[i].end) {\r\n      visualizeCell(\"cell\", \"cell cell-visitedSec\", sec[i]);\r\n    }\r\n    if (window.gridComponent.state.previousVisualization) {\r\n      if (i < main.length) {\r\n        if (!main[i].start) visualizeCell(\"num\", \"num num-visited\", main[i]);\r\n        else visualizeCell(\"num\", \"num num-start\", main[i]);\r\n      }\r\n      if (i < sec.length) {\r\n        if (!sec[i].end) visualizeCell(\"num\", \"num num-visited\", sec[i]);\r\n        else visualizeCell(\"num\", \"num num-end\", sec[i]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animateBidirectionalPathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-pathThirdly-animated\", cell);\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nfunction animateBidirectionalPathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-pathThird\", cell);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  bidirectionalSlow,\r\n  bidirectionalFast,\r\n} from \"../animations/bidirectionalAnim\";\r\nexport function getMainUnvisitedNeighbors(\r\n  cell,\r\n  grid,\r\n  direction,\r\n  isDiagonalOn,\r\n  category,\r\n  id\r\n) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    Down(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    Up(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n      UpRight(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n  return id;\r\n}\r\n\r\nexport function getSecUnvisitedNeighbors(\r\n  cell,\r\n  grid,\r\n  direction,\r\n  isDiagonalOn,\r\n  category,\r\n  id\r\n) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    Down(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors, category);\r\n    Right(row, col, grid, neighbors, category);\r\n    Up(row, col, grid, neighbors, category);\r\n    Left(row, col, grid, neighbors, category);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors, category);\r\n      RightDown(row, col, grid, neighbors, category);\r\n      UpRight(row, col, grid, neighbors, category);\r\n      LeftUp(row, col, grid, neighbors, category);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distanceSec = cell.distanceSec + 1;\r\n    neighbor.previousSec = cell;\r\n    neighbor.idSec = id;\r\n    id++;\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction addNeighbor(cell, neighbors, category) {\r\n  if (category === \"MAIN\" && !cell.visited && cell.previous === null) {\r\n    neighbors.push(cell);\r\n  } else if (\r\n    category === \"SEC\" &&\r\n    !cell.visitedSec &&\r\n    cell.previousSec === null\r\n  ) {\r\n    neighbors.push(cell);\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors, category) {\r\n  if (row > 0) addNeighbor(grid[row - 1][col], neighbors, category);\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors, category) {\r\n  if (col < grid[0].length - 1)\r\n    addNeighbor(grid[row][col + 1], neighbors, category);\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors, category) {\r\n  if (row < grid.length - 1)\r\n    addNeighbor(grid[row + 1][col], neighbors, category);\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors, category) {\r\n  if (col > 0) addNeighbor(grid[row][col - 1], neighbors, category);\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors, category) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors, category) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors, category) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors, category) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    addNeighbor(cell, neighbors, category);\r\n  }\r\n}\r\n\r\nexport function DoBidirectionalAnimation(\r\n  mainCells,\r\n  secondaryCells,\r\n  speed,\r\n  meetingCell\r\n) {\r\n  reformatId(secondaryCells, meetingCell);\r\n  var cellsInOrder = getCellsInOrderBidirectional(meetingCell);\r\n  if (speed === \"slow\") {\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    bidirectionalSlow(mainCells, secondaryCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    bidirectionalFast(mainCells, secondaryCells, cellsInOrder);\r\n  }\r\n}\r\n\r\nfunction reformatId(secondaryCells, meetingCell) {\r\n  for (let i = 0; i < secondaryCells.length; i++) {\r\n    if (\r\n      !secondaryCells[i].start &&\r\n      !secondaryCells[i].end &&\r\n      secondaryCells[i] !== meetingCell\r\n    ) {\r\n      secondaryCells[i].distance = secondaryCells[i].distanceSec;\r\n    }\r\n    if (secondaryCells[i] !== meetingCell && secondaryCells[i].end) {\r\n      secondaryCells[i].distance = 0;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getCellsInOrderBidirectional(meetingCell) {\r\n  var cells = [];\r\n  if (meetingCell !== null) {\r\n    if (\r\n      meetingCell.distance !== Infinity &&\r\n      meetingCell.distanceSec !== Infinity\r\n    ) {\r\n      cells.push(meetingCell);\r\n      let cellMain = meetingCell;\r\n      let cellSec = meetingCell;\r\n      while (cellMain !== null || cellSec !== null) {\r\n        if (cellMain !== null) {\r\n          if (cellMain !== meetingCell) {\r\n            cells.push(cellMain);\r\n          }\r\n          cellMain = cellMain.previous;\r\n        }\r\n        if (cellSec !== null) {\r\n          if (cellSec !== meetingCell) {\r\n            cells.push(cellSec);\r\n          }\r\n          cellSec = cellSec.previousSec;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n","import { visualizeCell } from \"../../methods\";\r\nimport { clearVisitedCells } from \"../../cleaning\";\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animateAstarPathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animateAstarPathFast(cellsInOrder);\r\n}\r\n\r\nfunction animateAstarPathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-pathSec\", cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction animateAstarPathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-pathSecondary-animated\", cell);\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n","import { animateAstarSlow, animateAstarFast } from \"./animations/astarAnim\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];\r\n    if (currentCell === endCell) {\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"./animations/standardAnimations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nexport function depthFirst(grid, startCell, endCell, speed) {\r\n  clearVisitedCells();\r\n  var mainList = [];\r\n  var visitedCells = [];\r\n  startCell.visited = true;\r\n  mainList.push(startCell);\r\n  visitedCells.push(startCell);\r\n  while (!!mainList.length) {\r\n    const currentCell = mainList.pop();\r\n    currentCell.visited = true;\r\n\r\n    if (currentCell.end === true) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    if (currentCell.isWall && !currentCell.start && !currentCell.end) continue;\r\n    if (!visitedCells.includes(currentCell)) {\r\n      visitedCells.push(currentCell);\r\n    }\r\n\r\n    var neighbors = getUnvisitedNeighbors(currentCell, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].previous = currentCell;\r\n      mainList.push(neighbors[i]);\r\n    }\r\n  }\r\n  DoAnimation(visitedCells, endCell, speed);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  Left(row, col, grid, neighbors);\r\n\r\n  Down(row, col, grid, neighbors);\r\n  Right(row, col, grid, neighbors);\r\n  Up(row, col, grid, neighbors);\r\n\r\n  return neighbors;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import { animateFast, animateSlow } from \"./animations/standardAnimations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar id = 0;\r\nexport function breadthFirst(grid, startCell, endCell, speed) {\r\n  clearVisitedCells();\r\n  var mainList = [];\r\n  var visitedCells = [];\r\n  startCell.visited = true;\r\n  mainList.push(startCell);\r\n  visitedCells.push(startCell);\r\n\r\n  while (!!mainList.length) {\r\n    const currentCell = mainList.shift();\r\n    visitedCells.push(currentCell);\r\n\r\n    if (currentCell.end === true) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    if (currentCell.isWall && !currentCell.start && !currentCell.end) continue;\r\n    var neighbors = getUnvisitedNeighbors(currentCell, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].visited = true;\r\n      neighbors[i].previous = currentCell;\r\n      mainList.push(neighbors[i]);\r\n    }\r\n  }\r\n  DoAnimation(visitedCells, endCell, speed);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n  Up(row, col, grid, neighbors);\r\n  Right(row, col, grid, neighbors);\r\n  Down(row, col, grid, neighbors);\r\n  Left(row, col, grid, neighbors);\r\n  return neighbors;\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { iterativeMaze } from \"../Algorithms/mazes/iterativeDF\";\r\nimport { recursiveMaze } from \"../Algorithms/mazes/recursiveDF\";\r\nimport { aldousBroderMaze } from \"../Algorithms/mazes/aldousBroder\";\r\nimport { kruskalMaze } from \"../Algorithms/mazes/kruskal\";\r\nimport { wilsonMaze } from \"../Algorithms/mazes/wilson\";\r\nimport { recursiveDivision } from \"../Algorithms/mazes/recursiveDivision\";\r\nimport { basicHorizontal } from \"../Algorithms/mazes/basicHorizontal\";\r\nimport { basicVertical } from \"../Algorithms/mazes/basicVertical\";\r\nimport { binaryTreeAlg } from \"../Algorithms/mazes/binaryTree\";\r\nimport { ellerMaze } from \"../Algorithms/mazes/eller\";\r\nimport { dijkstraStandard } from \"../Algorithms/searchers/dijkstra/dijkstraStandard\";\r\nimport { dijkstraBidirectional } from \"../Algorithms/searchers/dijkstra/dijsktraBidirectional\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\nimport { depthFirst } from \"../Algorithms/searchers/depthFirst\";\r\nimport { breadthFirst } from \"../Algorithms/searchers/breadthFirst\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      currentMaze: \"default\",\r\n      previousVisualization: true,\r\n      diagonalVisualization: false,\r\n      optimizedVisualization: true,\r\n      bidirectionalVisualization: true,\r\n    };\r\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\r\n    this.handleButtonChange = this.handleButtonChange.bind(this);\r\n    this.handleMazeChange = this.handleMazeChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleAlgoChange(event) {\r\n    this.setState({ currentAlg: event.target.value });\r\n  }\r\n  handleButtonChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"bidirectional\") {\r\n      this.setState(\r\n        { bidirectionalVisualization: !this.state.bidirectionalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleMazeChange(event) {\r\n    if (event.target.value === \"random\") getRandomMazedGrid(this.state.grid);\r\n    else if (event.target.value === \"prim\") primMaze(this.state.grid);\r\n    else if (event.target.value === \"iterative\") iterativeMaze(this.state.grid);\r\n    else if (event.target.value === \"recursive\") recursiveMaze(this.state.grid);\r\n    else if (event.target.value === \"aldousBroder\")\r\n      aldousBroderMaze(this.state.grid);\r\n    else if (event.target.value === \"kruskal\") kruskalMaze(this.state.grid);\r\n    else if (event.target.value === \"wilson\") wilsonMaze(this.state.grid);\r\n    else if (event.target.value === \"recursiveDivision\")\r\n      recursiveDivision(this.state.grid);\r\n    else if (event.target.value === \"basicHorizontal\")\r\n      basicHorizontal(this.state.grid);\r\n    else if (event.target.value === \"basicVertical\")\r\n      basicVertical(this.state.grid);\r\n    else if (event.target.value === \"eller\") ellerMaze(this.state.grid);\r\n    else if (event.target.value === \"binaryTreeNW\")\r\n      binaryTreeAlg(this.state.grid, \"NorthWest\");\r\n    else if (event.target.value === \"binaryTreeNE\")\r\n      binaryTreeAlg(this.state.grid, \"NorthEast\");\r\n    else if (event.target.value === \"binaryTreeSW\")\r\n      binaryTreeAlg(this.state.grid, \"SouthWest\");\r\n    else if (event.target.value === \"binaryTreeSE\")\r\n      binaryTreeAlg(this.state.grid, \"SouthEast\");\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    if (this.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      if (this.state.bidirectionalVisualization) {\r\n        dijkstraBidirectional(\r\n          grid,\r\n          startCell,\r\n          endCell,\r\n          this.state.diagonalVisualization,\r\n          speed\r\n        );\r\n      } else {\r\n        dijkstraStandard(\r\n          grid,\r\n          startCell,\r\n          endCell,\r\n          this.state.diagonalVisualization,\r\n          speed\r\n        );\r\n      }\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"depthFirst\") {\r\n      depthFirst(grid, startCell, endCell, speed);\r\n    } else if (this.state.currentAlg === \"breadthFirst\") {\r\n      breadthFirst(grid, startCell, endCell, speed);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleAlgoChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n          <option value=\"depthFirst\">Depth-First Search</option>\r\n          <option value=\"breadthFirst\">Breadth-First Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Bidirectional\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\" ||\r\n              this.state.currentAlg === \"depthFirst\" ||\r\n              this.state.currentAlg === \"breadthFirst\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.bidirectionalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"bidirectional\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <select\r\n          value={this.state.currentMaze}\r\n          onChange={this.handleMazeChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"default\" disabled hidden>\r\n            Mazes\r\n          </option>\r\n          <optgroup label=\"Patterns\">\r\n            <option value=\"random\">Random</option>\r\n            <option value=\"basicHorizontal\">Basic Horizontal</option>\r\n            <option value=\"basicVertical\">Basic Vertical</option>\r\n          </optgroup>\r\n          <optgroup label=\"Algorithms\">\r\n            <option value=\"prim\">Prim</option>\r\n            <option value=\"iterative\">Iterative Depth-first</option>\r\n            <option value=\"recursive\">Recursive Depth-first</option>\r\n            <option value=\"aldousBroder\">Aldous-Broder</option>\r\n            <option value=\"kruskal\">Kruskal</option>\r\n            <option value=\"wilson\">Wilson</option>\r\n            <option value=\"recursiveDivision\">Recursive Division</option>\r\n            <option value=\"eller\">Eller</option>\r\n          </optgroup>\r\n          <optgroup label=\"&nbsp;&nbsp;&nbsp;Binary Tree Algorithm\">\r\n            <option value=\"binaryTreeSE\">&nbsp;&nbsp;&nbsp;South-East</option>\r\n            <option value=\"binaryTreeSW\">&nbsp;&nbsp;&nbsp;South-West</option>\r\n            <option value=\"binaryTreeNE\">&nbsp;&nbsp;&nbsp;North-East</option>\r\n            <option value=\"binaryTreeNW\">&nbsp;&nbsp;&nbsp;North-West</option>\r\n          </optgroup>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import {\r\n  DoBidirectionalAnimation,\r\n  getMainUnvisitedNeighbors,\r\n  getSecUnvisitedNeighbors,\r\n} from \"./dijkstraBidMethods\";\r\n\r\nexport function dijkstraBidirectional(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  speed\r\n) {\r\n  var meetingCell = null;\r\n  var isFinished;\r\n  var idMain = 0;\r\n  var idSec = 0;\r\n  isFinished = false;\r\n  const unvisitedCellsMain = [];\r\n  const unvisitedCellsSec = [];\r\n  const visitedCellsMain = [];\r\n  const visitedCellsSec = [];\r\n  var directionMain = \"START\";\r\n  var directionSec = \"START\";\r\n  var previousRowMain = startCell.row;\r\n  var previousRowSec = endCell.row;\r\n  startCell.distance = 0;\r\n  endCell.distanceSec = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCellsMain.push(cell);\r\n      unvisitedCellsSec.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCellsMain.length || !!unvisitedCellsSec.length) {\r\n    if (isFinished) {\r\n      DoBidirectionalAnimation(\r\n        visitedCellsMain,\r\n        visitedCellsSec,\r\n        speed,\r\n        meetingCell\r\n      );\r\n\r\n      return;\r\n    }\r\n    if (!!unvisitedCellsMain.length) {\r\n      unvisitedCellsMain.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      unvisitedCellsMain.sort(\r\n        (cell1, cell2) => cell1.distance - cell2.distance\r\n      );\r\n\r\n      const nextMainCell = unvisitedCellsMain.shift();\r\n      if (nextMainCell.visitedSec) {\r\n        isFinished = true;\r\n        meetingCell = nextMainCell;\r\n      }\r\n      if (directionMain !== \"START\") {\r\n        if (nextMainCell.row < previousRowMain) {\r\n          directionMain = \"UP\";\r\n        } else {\r\n          directionMain = \"DOWN\";\r\n        }\r\n      }\r\n\r\n      if (!(nextMainCell.isWall && !nextMainCell.start && !nextMainCell.end)) {\r\n        if (nextMainCell.distance === Infinity) {\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n\r\n          return;\r\n        }\r\n        nextMainCell.visited = true;\r\n        visitedCellsMain.push(nextMainCell);\r\n        if (nextMainCell === endCell) {\r\n          unvisitedCellsMain.sort((cell1, cell2) => cell1.id - cell2.id);\r\n\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        idMain = getMainUnvisitedNeighbors(\r\n          nextMainCell,\r\n          grid,\r\n          directionMain,\r\n          isDiagonalOn,\r\n          \"MAIN\",\r\n          idMain\r\n        );\r\n        if (directionMain !== \"START\") {\r\n          previousRowMain = nextMainCell.row;\r\n        }\r\n        directionMain = \"CHANGED\";\r\n      }\r\n    }\r\n\r\n    //*****************\r\n    if (!!unvisitedCellsSec.length) {\r\n      unvisitedCellsSec.sort((cell1, cell2) => cell1.idSec - cell2.idSec);\r\n      unvisitedCellsSec.sort(\r\n        (cell1, cell2) => cell1.distanceSec - cell2.distanceSec\r\n      );\r\n\r\n      const nextSecCell = unvisitedCellsSec.shift();\r\n      if (nextSecCell.visited) {\r\n        isFinished = true;\r\n        meetingCell = nextSecCell;\r\n      }\r\n      if (directionSec !== \"START\") {\r\n        if (nextSecCell.row < previousRowSec) {\r\n          directionSec = \"UP\";\r\n        } else {\r\n          directionSec = \"DOWN\";\r\n        }\r\n      }\r\n\r\n      if (!(nextSecCell.isWall && !nextSecCell.start && !nextSecCell.end)) {\r\n        if (nextSecCell.distanceSec === Infinity) {\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n          return;\r\n        }\r\n        nextSecCell.visitedSec = true;\r\n        visitedCellsSec.push(nextSecCell);\r\n        if (nextSecCell === startCell) {\r\n          unvisitedCellsSec.sort((cell1, cell2) => cell1.idSec - cell2.idSec);\r\n          DoBidirectionalAnimation(\r\n            visitedCellsMain,\r\n            visitedCellsSec,\r\n            speed,\r\n            meetingCell\r\n          );\r\n          return;\r\n        }\r\n\r\n        idSec = getSecUnvisitedNeighbors(\r\n          nextSecCell,\r\n          grid,\r\n          directionSec,\r\n          isDiagonalOn,\r\n          \"SEC\",\r\n          idSec\r\n        );\r\n        if (directionSec !== \"START\") {\r\n          previousRowSec = nextSecCell.row;\r\n        }\r\n        directionSec = \"CHANGED\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { DoAnimation, getUnvisitedNeighbors } from \"./dijkstraStandMethods\";\r\n\r\nexport function dijkstraStandard(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  speed\r\n) {\r\n  var id = 0;\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    id = getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn, id);\r\n\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n    this.title = \"PathFinder & Maze generator\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = this.title;\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n    return position % 2 === 0 ? position + 1 : position;\r\n    // return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        This project is still under construction!\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}