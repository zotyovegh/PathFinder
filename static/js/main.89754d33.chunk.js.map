{"version":3,"sources":["Cell/index.js","Algorithms/methods.js","Algorithms/animations.js","Algorithms/dijsktra.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","isWall","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","createGrid","grid","i","rows","push","j","columns","visited","previous","startR","startC","endR","endC","getCellsInOrder","endCell","cells","cell","unshift","clearVisitedCells","newGrid","window","gridComponent","state","document","getElementById","setState","placeWall","newCell","status","currentAlg","doAlgorithm","animatePathFast","cellsInOrder","length","previousVisualization","animateSlow","visitedCells","setTimeout","animatePathSlow","dijkstra","startCell","unvisitedCells","sort","cell1","cell2","nextCell","shift","getUnvisitedNeighbors","neighbors","unvisitedNeighbors","filter","neighbor","Grid","isMouseDown","isStartOn","isEndOn","slice","startRow","startCol","endRow","endCol","type","finishCell","animateFast","clear","clearBoard","handleChange","bind","event","this","map","index","key","cellIndex","onMouseLeave","disabled","onClick","class","defaultChecked","onChange","Component","App","getPosition","parameter","position","Math","floor","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"+OAEA,SAASA,EAASC,GAChB,OAAIA,EAAMC,KAAKC,MACN,aACEF,EAAMC,KAAKE,IACb,WACEH,EAAMC,KAAKG,OACb,YAEA,GAIX,IA4BeC,EA5BF,SAACL,GAyBZ,OAtBI,yBACEM,UAAS,eAAUP,EAASC,IAC5BO,GAAE,eAAUP,EAAMC,KAAKO,IAArB,YAA4BR,EAAMC,KAAKQ,KACzCC,YAAa,SAACC,GACZA,EAAEC,iBACFZ,EAAMU,YAAYV,EAAMC,OAE1BY,aAAc,kBAAMb,EAAMa,aAAab,EAAMC,OAC7Ca,UAAW,kBAAMd,EAAMc,UAAUd,EAAMC,OACvCc,cAAe,SAACJ,GACdA,EAAEC,mBAGJ,yBACEN,UAAS,OACTC,GAAE,cAASP,EAAMC,KAAKO,IAApB,YAA2BR,EAAMC,KAAKQ,MAEvCT,EAAMC,KAAKe,WAAaC,IAAW,GAAKjB,EAAMC,KAAKe,Y,MClCvD,SAASE,EAAWlB,GAGzB,IAFA,IAAImB,EAAO,GAEFC,EAAI,EAAGA,EAAIpB,EAAMqB,KAAMD,IAAK,CACnCD,EAAKG,KAAK,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAMwB,QAASD,IACjCJ,EAAKC,GAAGE,KAAK,CACXd,IAAKY,EACLX,IAAKc,EACLrB,OAAO,EACPC,KAAK,EACLa,SAAUC,IACVQ,SAAS,EACTrB,QAAQ,EACRsB,SAAU,OAQhB,OAHAP,EAAKnB,EAAM2B,QAAQ3B,EAAM4B,QAAQ1B,OAAQ,EACzCiB,EAAKnB,EAAM6B,MAAM7B,EAAM8B,MAAM3B,KAAM,EAE5BgB,EAGF,SAASY,EAAgBC,GAG9B,IAFA,IAAMC,EAAQ,GACVC,EAAOF,EACK,OAATE,GACLD,EAAME,QAAQD,GACdA,EAAOA,EAAKR,SAEd,OAAOO,EAGF,SAASG,IAEd,IADA,IAAIC,EAAUC,OAAOC,cAAcC,MAAMrB,KAChCC,EAAI,EAAGA,EAAIkB,OAAOC,cAAcvC,MAAMqB,KAAMD,IACnD,IAAK,IAAIG,EAAI,EAAGA,EAAIe,OAAOC,cAAcvC,MAAMwB,QAASD,IAAK,CAC3D,IAAIW,EAAOG,EAAQjB,GAAGG,GACtBW,EAAKT,SAAU,EACfS,EAAKlB,SAAWC,IAChBiB,EAAKR,SAAW,KAEZQ,EAAK9B,SACPqC,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,QAEA4B,EAAKhC,OAASgC,EAAK/B,KAAO+B,EAAK9B,OACjCqC,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,QAGJmC,SAASC,eAAT,eAAgCR,EAAK1B,IAArC,YAA4C0B,EAAKzB,MAAOH,UACtD,kBACFmC,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UAAY,QAGvEgC,OAAOC,cAAcI,SAAS,CAAExB,KAAMkB,IAcjC,SAASO,EAAUV,GACxB,IAAIW,EAAUX,EACVG,EAAUC,OAAOC,cAAcC,MAAMrB,KACzC0B,EAAQzC,QAAUyC,EAAQzC,OAC1BqC,SAASC,eAAT,cAA+BG,EAAQrC,IAAvC,YAA8CqC,EAAQpC,MAAOH,UAC3D,OACFuC,EAAQpB,SAAU,EAElBY,EAAQH,EAAK1B,KAAK0B,EAAKzB,KAAOoC,EAC9BP,OAAOC,cAAcI,SAAS,CAAExB,KAAMkB,IAAW,WACL,aAAtCC,OAAOC,cAAcC,MAAMM,SAC7BV,IAC8C,aAA1CE,OAAOC,cAAcC,MAAMO,YAC7BT,OAAOC,cAAcS,YAAY,oBC3DzC,SAASC,EAAgBC,GACvB,IAAK,IAAI9B,EAAI,EAAGA,EAAI8B,EAAaC,OAAQ/B,IAAK,CAC5C,IAAMc,EAAOgB,EAAa9B,GACrBc,EAAKhC,OAAUgC,EAAK/B,MACvBsC,SAASC,eAAT,eAAgCR,EAAK1B,IAArC,YAA4C0B,EAAKzB,MAAOH,UACtD,iBACEgC,OAAOC,cAAcC,MAAMY,wBAC7BX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,kBAMH,SAAS+C,EAAYC,EAAcJ,GACxC,IADuD,IAAD,WAC7C9B,GACP,IAAMc,EAAOoB,EAAalC,GAC1B,GAAIA,IAAMkC,EAAaH,OAIrB,OAHAI,YAAW,YA4BjB,SAAyBL,GACvB,IADsC,IAAD,WAC5B9B,GACPmC,YAAW,WACT,GAAInC,IAAM8B,EAAaC,OAAvB,CAIA,IAAMjB,EAAOgB,EAAa9B,GACrBc,EAAKhC,OAAUgC,EAAK/B,MACvBsC,SAASC,eAAT,eAAgCR,EAAK1B,IAArC,YAA4C0B,EAAKzB,MAAOH,UACtD,iBACEgC,OAAOC,cAAcC,MAAMY,wBAC7BX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,sBATJgC,OAAOC,cAAcI,SAAS,CAAEG,OAAQ,eAYzC,GAAK1B,IAfDA,EAAI,EAAGA,GAAK8B,EAAaC,OAAQ/B,IAAM,EAAvCA,GA5BHoC,CAAgBN,KACf,GAAK9B,GACF,CAAN,UAEFmC,YAAW,WACLrB,EAAKhC,OAASoC,OAAOC,cAAcC,MAAMY,wBAC3CX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,iBAEA4B,EAAK/B,KAAOmC,OAAOC,cAAcC,MAAMY,wBACzCX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,eAEC4B,EAAK9B,QACH8B,EAAKhC,OAAUgC,EAAK/B,MACvBsC,SAASC,eAAT,eAAgCR,EAAK1B,IAArC,YAA4C0B,EAAKzB,MAAOH,UACtD,oBACEgC,OAAOC,cAAcC,MAAMY,wBAC7BX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,sBAIP,GAAKc,IA3BDA,EAAI,EAAGA,GAAKkC,EAAaH,OAAQ/B,IAAK,CAAC,IAAD,IAAtCA,GAAsC,mC,WCzC1C,SAASqC,EAAStC,EAAMuC,EAAW1B,GACxC,IAAMsB,EAAe,GACrBI,EAAU1C,SAAW,EACrB,IAHiD,EAG3C2C,EAAiB,GAH0B,cAI/BxC,GAJ+B,IAIjD,2BAAwB,CAAC,IAAD,EAAbX,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAd0B,EAAa,QACtByB,EAAerC,KAAKY,IAFA,gCAJyB,8BAUjD,KAASyB,EAAeR,QAAQ,CAC9BQ,EAAeC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAM7C,SAAW8C,EAAM9C,YAE7D,IAAM+C,EAAWJ,EAAeK,QAEhC,IAAID,EAAS3D,QAAW2D,EAAS7D,OAAU6D,EAAS5D,IAApD,CAEA,GAAI4D,EAAS/C,WAAaC,IAAU,OAAOqC,EAG3C,GAFAS,EAAStC,SAAU,EACnB6B,EAAahC,KAAKyC,GACdA,IAAa/B,EACf,OAAOsB,EAETW,EAAsBF,EAAU5C,KAIpC,SAAS8C,EAAsB/B,EAAMf,GACnC,IAAM+C,EAAY,GACVzD,EAAayB,EAAbzB,IAAKD,EAAQ0B,EAAR1B,IAETA,EAAM,GACR0D,EAAU5C,KAAKH,EAAKX,EAAM,GAAGC,IAE3BD,EAAMW,EAAKgC,OAAS,GACtBe,EAAU5C,KAAKH,EAAKX,EAAM,GAAGC,IAE3BA,EAAM,GACRyD,EAAU5C,KAAKH,EAAKX,GAAKC,EAAM,IAE7BA,EAAMU,EAAK,GAAGgC,OAAS,GACzBe,EAAU5C,KAAKH,EAAKX,GAAKC,EAAM,IAGjC,IAjByC,EAiBnC0D,EAAqBD,EAAUE,QACnC,SAACC,GAAD,OAAeA,EAAS5C,WAlBe,cAqBlB0C,GArBkB,IAqBzC,2BAA2C,CAAC,IAAjCE,EAAgC,QACzCA,EAASrD,SAAWkB,EAAKlB,SAAW,EACpCqD,EAAS3C,SAAWQ,GAvBmB,+B,ICiL5BoC,E,kDA9Lb,WAAYtE,GAAQ,IAAD,8BACjB,cAAMA,IA4BRU,YAAc,SAACwB,GACa,YAAtB,EAAKM,MAAMM,SAGf,EAAKH,SAAS,CAAE4B,aAAa,IACzBrC,EAAKhC,MACP,EAAKyC,SAAS,CAAE6B,WAAW,IAGzBtC,EAAK/B,IACP,EAAKwC,SAAS,CAAE8B,SAAS,IAG3B7B,EAAUV,KA1CO,EA6CnBrB,aAAe,SAACqB,GACd,GAAI,EAAKM,MAAM+B,YAAa,CAC1B,GAAIrC,EAAKhC,OAASgC,EAAK/B,IACrB,OAEF,GAAI,EAAKqC,MAAMgC,UAAW,CACxB,IAAInC,EAAU,EAAKG,MAAMrB,KAAKuD,QAmB9B,OAlBArC,EAAQ,EAAKG,MAAMmC,UAAU,EAAKnC,MAAMoC,UAAU1E,OAAQ,EAC1DmC,EAAQH,EAAK1B,KAAK0B,EAAKzB,KAAKP,OAAQ,OACpC,EAAKyC,SACH,CACExB,KAAMkB,EACNsC,SAAUzC,EAAK1B,IACfoE,SAAU1C,EAAKzB,MAEjB,WAC4B,aAAtB,EAAK+B,MAAMM,SACbV,IAC8B,aAA1B,EAAKI,MAAMO,YACb,EAAKC,YAAY,oBAOpB,GAAI,EAAKR,MAAMiC,QAAS,CAC7B,IAAIpC,EAAU,EAAKG,MAAMrB,KAAKuD,QAkB9B,OAjBArC,EAAQ,EAAKG,MAAMqC,QAAQ,EAAKrC,MAAMsC,QAAQ3E,KAAM,EACpDkC,EAAQH,EAAK1B,KAAK0B,EAAKzB,KAAKN,KAAM,OAClC,EAAKwC,SACH,CACExB,KAAMkB,EACNwC,OAAQ3C,EAAK1B,IACbsE,OAAQ5C,EAAKzB,MAEf,WAC4B,aAAtB,EAAK+B,MAAMM,SACbV,IAC8B,aAA1B,EAAKI,MAAMO,YACb,EAAKC,YAAY,oBAQ3BJ,EAAUV,KA7FK,EAgGnBpB,UAAY,WACV,EAAK6B,SAAS,CAAE4B,aAAa,EAAOC,WAAW,EAAOC,SAAS,KAjG9C,EAoGnBzB,YAAc,SAAC+B,GAAU,IACjB5D,EAAS,EAAKqB,MAAdrB,KACAuC,EAAYvC,EAAK,EAAKqB,MAAMmC,UAAU,EAAKnC,MAAMoC,UACjDI,EAAa7D,EAAK,EAAKqB,MAAMqC,QAAQ,EAAKrC,MAAMsC,QAEtD,GAAa,iBAATC,EACwB,aAAtB,EAAKvC,MAAMM,QACbV,IAGF,EAAKO,SAAS,CAAEG,OAAQ,YAGxBO,EAFqBI,EAAStC,EAAMuC,EAAWsB,GAC1BjD,EAAgBiD,SAEhC,GAAa,iBAATD,EAAyB,EFhIjC,SAAqBzB,EAAcJ,GACxC,IAAK,IAAI9B,EAAI,EAAGA,GAAKkC,EAAaH,OAAS,EAAG/B,IAAK,CACjD,IAAMc,EAAOoB,EAAalC,GAEtBc,EAAKhC,OAASoC,OAAOC,cAAcC,MAAMY,sBAC3CX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,gBACO4B,EAAK/B,KACVmC,OAAOC,cAAcC,MAAMY,wBAC7BX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,eAEJ2C,EAAgBC,IACNhB,EAAK9B,QACV8B,EAAKhC,OAAUgC,EAAK/B,MACvBsC,SAASC,eAAT,eAAgCR,EAAK1B,IAArC,YAA4C0B,EAAKzB,MAAOH,UACtD,oBACEgC,OAAOC,cAAcC,MAAMY,wBAC7BX,SAASC,eAAT,cAA+BR,EAAK1B,IAApC,YAA2C0B,EAAKzB,MAAOH,UACrD,qBEgHN2E,CAFqBxB,EAAStC,EAAMuC,EAAWsB,GAC1BjD,EAAgBiD,MApHtB,EAyHnBE,MAAQ,SAACH,GACM,SAATA,EACF3C,IACkB,SAAT2C,GH7ER,SAAoB/E,GACzBoC,IACAE,OAAOC,cAAcI,SAAS,CAC5BxB,KAAMD,EAAWlB,GACjB2E,SAAU3E,EAAM2B,OAChBiD,SAAU5E,EAAM4B,OAChBiD,OAAQ7E,EAAM6B,KACdiD,OAAQ9E,EAAM8B,OGuEZqD,CAAW,EAAKnF,OAElB,EAAK2C,SAAS,CAAEG,OAAQ,aA7HxB,EAAKN,MAAQ,CACXrB,KAAMD,EAAWlB,GACjBuE,aAAa,EACbC,WAAW,EACXC,SAAS,EACTE,SAAU3E,EAAM2B,OAChBiD,SAAU5E,EAAM4B,OAChBiD,OAAQ7E,EAAM6B,KACdiD,OAAQ9E,EAAM8B,KACdgB,OAAQ,UACRC,WAAY,WACZK,uBAAuB,GAEzB,EAAKgC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB/C,OAAOC,cAAP,eAhBiB,E,yDAmBN+C,GAAQ,IAAD,OAClBC,KAAK5C,SAAS,CAAES,uBAAwBmC,KAAK/C,MAAMY,wBAAyB,WAChD,aAAtB,EAAKZ,MAAMM,QACiB,aAA1B,EAAKN,MAAMO,YACb,EAAKC,YAAY,qB,+BA2Gf,IAAD,OACH7B,EAAOoE,KAAK/C,MAAMrB,KAAKqE,KAAI,SAAChF,EAAKiF,GACnC,OACE,yBAAKC,IAAKD,EAAOnF,UAAU,OACxBE,EAAIgF,KAAI,SAACtD,EAAMyD,GACd,OACE,kBAAC,EAAD,CACED,IAAKC,EACL1F,KAAMiC,EACNxB,YAAa,EAAKA,YAClBG,aAAc,EAAKA,aACnBC,UAAW,EAAKA,mBAO5B,OACE,6BACE,yBAAKR,UAAU,OAAOsF,aAAcL,KAAKzE,WACtCK,GAEH,4BACE0E,SAAgC,YAAtBN,KAAK/C,MAAMM,OACrBgD,QAAS,kBAAM,EAAK9C,YAAY,kBAFlC,YAMA,4BACE6C,SAAgC,YAAtBN,KAAK/C,MAAMM,OACrBgD,QAAS,WACP,EAAKZ,MAAM,UAHf,cAQA,4BACEW,SAAgC,YAAtBN,KAAK/C,MAAMM,OACrBgD,QAAS,WACP,EAAKZ,MAAM,UAHf,cAQCK,KAAK/C,MAAMY,sBAAwB,IACpC,2BAAO2C,MAAM,UACX,2BACEF,SAAgC,YAAtBN,KAAK/C,MAAMM,OACrBiC,KAAK,WACLiB,eAAgBT,KAAK/C,MAAMY,sBAC3B6C,SAAUV,KAAKH,eAEjB,0BAAMW,MAAM,uB,GAxLHG,aCiDJC,E,kDA1Db,WAAYnG,GAAQ,IAAD,8BACjB,gBAWFoG,YAAc,SAACC,GACb,IAAIC,EAAW,KACf,GAAkB,QAAdD,EACFC,EAAWC,KAAKC,MAAM,EAAKC,QAAQ,OAAS,QACvC,GAAkB,aAAdJ,EACTC,EAAWC,KAAKC,MAAM,EAAKC,QAAQ,OAAS,QACvC,GAAkB,WAAdJ,EAAwB,CACjC,IAAIK,EAAI,EAAKD,QAAQ,OAErBH,EAAWI,EADEH,KAAKI,KAAKD,EAAI,GAI7B,OAAOJ,GAxBU,EA2BnBG,QAAU,SAAC1B,GACT,IAAI6B,EAAO,KACX,GAAa,QAAT7B,GAEF,IADA6B,GAAQtE,OAAOuE,YAAc,IAAIC,QAAQ,GAAK,GACnC,GACT,OAAO,QAEJ,GAAa,QAAT/B,IACT6B,GAAQtE,OAAOyE,WAAa,IAAID,QAAQ,GAAK,GAClC,GACT,OAAO,GAGX,OAAOF,GAtCP,EAAKpE,MAAQ,CACXnB,KAAM,EAAKoF,QAAQ,OACnBjF,QAAS,EAAKiF,QAAQ,OACtB9E,OAAQ,EAAKyE,YAAY,OACzBxE,OAAQ,EAAKwE,YAAY,YACzBvE,KAAM,EAAKuE,YAAY,OACvBtE,KAAM,EAAKsE,YAAY,WARR,E,qDA4CjB,OACE,yBAAK9F,UAAU,OACb,kBAAC,EAAD,CACEe,KAAMkE,KAAK/C,MAAMnB,KACjBG,QAAS+D,KAAK/C,MAAMhB,QACpBG,OAAQ4D,KAAK/C,MAAMb,OACnBC,OAAQ2D,KAAK/C,MAAMZ,OACnBC,KAAM0D,KAAK/C,MAAMX,KACjBC,KAAMyD,KAAK/C,MAAMV,Y,GArDToE,aCClBc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzE,SAASC,eAAe,U","file":"static/js/main.89754d33.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  } else if (props.data.isWall) {\r\n    return \"cell-wall\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  let cell = () => {\r\n    return (\r\n      <div\r\n        className={`cell ${getColor(props)}`}\r\n        id={`cell-${props.data.row}-${props.data.col}`}\r\n        onMouseDown={(e) => {\r\n          e.preventDefault();\r\n          props.onMouseDown(props.data);\r\n        }}\r\n        onMouseEnter={() => props.onMouseEnter(props.data)}\r\n        onMouseUp={() => props.onMouseUp(props.data)}\r\n        onContextMenu={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <div\r\n          className={`num ${\"\"}`}\r\n          id={`num-${props.data.row}-${props.data.col}`}\r\n        >\r\n          {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;\r\n","export function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n\r\n      if (cell.isWall) {\r\n        document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n          \"num \";\r\n      }\r\n      if (cell.start || cell.end || cell.isWall) {\r\n        document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n          \"num \";\r\n        continue;\r\n      }\r\n      document.getElementById(`cell-${cell.row}-${cell.col}`).className =\r\n        \"cell cell-empty\";\r\n      document.getElementById(`num-${cell.row}-${cell.col}`).className = \"num \";\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  document.getElementById(`num-${newCell.row}-${newCell.col}`).className =\r\n    \"num \";\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      if (window.gridComponent.state.currentAlg === \"dijkstra\") {\r\n        window.gridComponent.doAlgorithm(\"fastDijkstra\");\r\n      }\r\n    }\r\n  });\r\n}\r\n","export function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n        \"num num-start\";\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n          \"num num-end\";\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        document.getElementById(`cell-${cell.row}-${cell.col}`).className =\r\n          \"cell cell-visited\";\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n            \"num num-visited\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      document.getElementById(`cell-${cell.row}-${cell.col}`).className =\r\n        \"cell cell-path\";\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n          \"num num-path\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n          \"num num-start\";\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n          \"num num-end\";\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          document.getElementById(`cell-${cell.row}-${cell.col}`).className =\r\n            \"cell cell-visited\";\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n              \"num num-visited\";\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        document.getElementById(`cell-${cell.row}-${cell.col}`).className =\r\n          \"cell cell-path\";\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          document.getElementById(`num-${cell.row}-${cell.col}`).className =\r\n            \"num num-path\";\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n","export function dijkstra(grid, startCell, endCell) {\r\n  const visitedCells = [];\r\n  startCell.distance = 0;\r\n  const unvisitedCells = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) return visitedCells;\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      return visitedCells;\r\n    }\r\n    getUnvisitedNeighbors(nextCell, grid);\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = cell;\r\n\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    (neighbor) => !neighbor.visited\r\n  );\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport {\r\n  getCellsInOrder,\r\n  clearVisitedCells,\r\n  createGrid,\r\n  clearBoard,\r\n  placeWall,\r\n} from \"../Algorithms/methods\";\r\nimport { animateFast, animateSlow } from \"../Algorithms/animations\";\r\nimport { dijkstra } from \"../Algorithms/dijsktra\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      previousVisualization: false,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ previousVisualization: !this.state.previousVisualization }, () => {\r\n      if (this.state.status === \"finished\") {\r\n        if (this.state.currentAlg === \"dijkstra\") {\r\n          this.doAlgorithm(\"fastDijkstra\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              if (this.state.currentAlg === \"dijkstra\") {\r\n                this.doAlgorithm(\"fastDijkstra\");\r\n              }\r\n            }\r\n          }\r\n        );\r\n\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              if (this.state.currentAlg === \"dijkstra\") {\r\n                this.doAlgorithm(\"fastDijkstra\");\r\n              }\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (type) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const finishCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (type === \"slowDijkstra\") {\r\n      if (this.state.status === \"finished\") {\r\n        clearVisitedCells();\r\n      }\r\n\r\n      this.setState({ status: \"running\" });\r\n      const visitedCells = dijkstra(grid, startCell, finishCell);\r\n      const cellsInOrder = getCellsInOrder(finishCell);\r\n      animateSlow(visitedCells, cellsInOrder);\r\n    } else if (type === \"fastDijkstra\") {\r\n      const visitedCells = dijkstra(grid, startCell, finishCell);\r\n      const cellsInOrder = getCellsInOrder(finishCell);\r\n      animateFast(visitedCells, cellsInOrder);\r\n    }\r\n  };\r\n\r\n  clear = (type) => {\r\n    if (type === \"path\") {\r\n      clearVisitedCells();\r\n    } else if (type === \"grid\") {\r\n      clearBoard(this.props);\r\n    }\r\n    this.setState({ status: \"pending\" });\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slowDijkstra\")}\r\n        >\r\n          Dijkstra\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            this.clear(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            this.clear(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        {this.state.previousVisualization + \" \"}\r\n        <label class=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleChange}\r\n          ></input>\r\n          <span class=\"slider round\"></span>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n\r\n    return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 10;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 10;\r\n      }\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}