{"version":3,"sources":["Cell/index.js","Algorithms/cleaning.js","Algorithms/methods.js","Algorithms/mazes/animations.js","Algorithms/mazes/default.js","Algorithms/mazes/prim.js","Algorithms/mazes/iterativeDF.js","Algorithms/mazes/recursiveDF.js","Algorithms/mazes/aldousBroder.js","Algorithms/mazes/kruskal.js","Algorithms/searchers/animations.js","Algorithms/searchers/dijsktra.js","Algorithms/searchers/astar.js","Grid/index.js","App.js","index.js"],"names":["getColor","props","data","start","end","Cell","className","id","row","col","onMouseDown","e","preventDefault","onMouseEnter","onMouseUp","onContextMenu","distance","Infinity","clearWithStatus","type","clearVisitedCells","window","gridComponent","setState","grid","createGrid","startRow","startR","startCol","startC","endRow","endR","endCol","endC","state","cell","visualizeCell","clearBoard","status","newGrid","i","rows","j","columns","visited","previous","f","g","h","neighbors","isWall","clearInfinityVariables","push","getCellsInOrder","endCell","cells","unshift","placeWall","newCell","doAlgorithm","category","name","document","getElementById","visualizeOnWalledGrid","path","setTimeout","length","getRandomMazedGrid","numberOfCells","wallAmount","Math","floor","random","visualizeRandom","getNeighboringWalls","wallPairs","neighbor","takeRandomPair","position","pair","splice","takeLastCell","cellsWithUnvisitedNeighbors","getNeighboringCells","neighboringUnvisitedPairs","recursiveMaze","originalGrid","JSON","parse","stringify","recursion","currentCell","randomPair","aldousBroderMaze","unvisitedCells","visualizationList","current","filter","item","visualizeABMaze","kruskalMaze","idCounter","validWalls","map","Map","set","getSurroundingCells","array","temp","shuffleArray","wall","first","get","second","forEach","value","key","includes","animatePathSlow","cellsInOrder","previousVisualization","animatePathFast","getUnvisitedNeighbors","direction","isDiagonalOn","Up","Right","Down","Left","UpRight","RightDown","DownLeft","LeftUp","DoAnimation","visitedCells","speed","animateSlow","animateFast","astar","startCell","optimized","findNeighbors","openSet","cameFrom","allSet","heuristic","console","log","eliminateFromSet","k","tentative_gScore","dScore","slice","cell1","cell2","SQRT2","abs","sqrt","closedSet","animateAstarSlow","animateAstarFast","Grid","isMouseDown","isStartOn","isEndOn","currentAlg","previousRow","sort","nextCell","shift","dijkstra","diagonalVisualization","optimizedVisualization","currentMaze","handleAlgoChange","bind","handleButtonChange","handleMazeChange","event","this","target","currentPair","primMaze","iterativeMaze","index","cellIndex","onMouseLeave","onChange","disabled","onClick","defaultChecked","hidden","Component","App","getPosition","parameter","getSize","x","ceil","size","innerHeight","toFixed","innerWidth","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2a05bed2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\nfunction getColor(props) {\r\n  if (props.data.start) {\r\n    return \"cell-start\";\r\n  } else if (props.data.end) {\r\n    return \"cell-end\";\r\n  }else {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div\r\n      className={`cell ${getColor(props)}`}\r\n      id={`cell-${props.data.row}-${props.data.col}`}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n        props.onMouseDown(props.data);\r\n      }}\r\n      onMouseEnter={() => props.onMouseEnter(props.data)}\r\n      onMouseUp={() => props.onMouseUp(props.data)}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className={`num ${\"\"}`}\r\n        id={`num-${props.data.row}-${props.data.col}`}\r\n      >\r\n        {props.data.distance === Infinity ? \"\" : props.data.distance}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { visualizeCell, createGrid } from \"../Algorithms/methods\";\r\n\r\nexport function clearWithStatus(type) {\r\n  if (type === \"path\") {\r\n    clearVisitedCells();\r\n  } else if (type === \"grid\") {\r\n    clearBoard(window.gridComponent.props);\r\n  }\r\n  window.gridComponent.setState({ status: \"pending\" });\r\n}\r\n\r\nexport function clearVisitedCells() {\r\n  let newGrid = window.gridComponent.state.grid;\r\n  for (let i = 0; i < window.gridComponent.props.rows; i++) {\r\n    for (let j = 0; j < window.gridComponent.props.columns; j++) {\r\n      let cell = newGrid[i][j];\r\n      cell.visited = false;\r\n      cell.distance = Infinity;\r\n      cell.previous = null;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.neighbors = [];\r\n\r\n      visualizeCell(\"num\", \"num\", cell);\r\n      if (!cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n      if (cell.isWall && !cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: newGrid });\r\n}\r\n\r\nexport function clearBoard(props) {\r\n  clearVisitedCells();\r\n  window.gridComponent.setState({\r\n    grid: createGrid(props),\r\n    startRow: props.startR,\r\n    startCol: props.startC,\r\n    endRow: props.endR,\r\n    endCol: props.endC,\r\n  });\r\n  for (const row of window.gridComponent.state.grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearInfinityVariables(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.distance = Infinity;\r\n      cell.f = Infinity;\r\n      cell.g = Infinity;\r\n      cell.h = Infinity;\r\n      cell.visited = false;\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n}\r\n","import { clearVisitedCells } from \"../Algorithms/cleaning\";\r\n\r\nexport function createGrid(props) {\r\n  let grid = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < props.columns; j++) {\r\n      grid[i].push({\r\n        id: 0,\r\n        row: i,\r\n        col: j,\r\n        start: false,\r\n        end: false,\r\n        distance: Infinity,\r\n        visited: false,\r\n        isWall: false,\r\n        previous: null,\r\n        //TODO: ASTAR scenario (this variables shall be handled differently later)\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        neighbors: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  grid[props.startR][props.startC].start = true;\r\n  grid[props.endR][props.endC].end = true;\r\n\r\n  return grid;\r\n}\r\n\r\nexport function getCellsInOrder(endCell) {\r\n  const cells = [];\r\n  let cell = endCell;\r\n  while (cell !== null) {\r\n    cells.unshift(cell);\r\n    cell = cell.previous;\r\n  }\r\n  return cells;\r\n}\r\n\r\nexport function placeWall(cell) {\r\n  let newCell = cell;\r\n  let newGrid = window.gridComponent.state.grid;\r\n  newCell.isWall = !newCell.isWall;\r\n  if (newCell.isWall) {\r\n    visualizeCell(\"cell\", \"cell cell-wall-animated\", cell);\r\n  } else {\r\n    visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n    \r\n  }\r\n\r\n  visualizeCell(\"num\", \"num\", newCell);\r\n  newCell.visited = false;\r\n\r\n  newGrid[cell.row][cell.col] = newCell;\r\n  window.gridComponent.setState({ grid: newGrid }, () => {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n      window.gridComponent.doAlgorithm(\"fast\");\r\n    }\r\n  });\r\n}\r\n\r\nexport function visualizeCell(category, name, cell) {\r\n  document.getElementById(\r\n    `${category}-${cell.row}-${cell.col}`\r\n  ).className = name;\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nexport function visualizeOnWalledGrid(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeRandom(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        return;\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", path[i]);\r\n      }\r\n    }, 8 * i);\r\n  }\r\n}\r\n\r\nexport function visualizeABMaze(grid, path) {\r\n  window.gridComponent.setState({ status: \"running\" });\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      if (!cell.end && !cell.start) {\r\n        visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      }\r\n    }\r\n  }\r\n  var previous = null;\r\n  for (let i = 0; i <= path.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === path.length) {\r\n        window.gridComponent.setState({ status: \"pending\" });\r\n        visualizeCell(\"cell\", \"cell cell-empty\", path[path.length - 1]);\r\n        return;\r\n      }\r\n      if (previous !== null) {\r\n        if (previous.isWall) {\r\n          visualizeCell(\"cell\", \"cell cell-wall\", previous);\r\n        } else {\r\n          visualizeCell(\"cell\", \"cell cell-empty\", previous);\r\n        }\r\n      }\r\n      if (!path[i].end && !path[i].start) {\r\n        visualizeCell(\"cell\", \"cell cell-current\", path[i]);\r\n        previous = path[i];\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function visualize(grid) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      visualizeCell(\"cell\", \"cell cell-wall\", cell);\r\n      if (!cell.isWall) {\r\n        visualizeCell(\"cell\", \"cell cell-empty\", cell);\r\n      }\r\n    }\r\n  }\r\n  /* for (let i = 0; i <= list.length - 1; i++) {\r\n    setTimeout(() => {\r\n      visualizeCell(\"cell\", \"cell cell-wall\", list[i]);\r\n    }, 10 * i);\r\n  }*/\r\n}\r\n","import { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nimport { visualizeRandom } from \"../mazes/animations\";\r\n\r\nexport function getRandomMazedGrid(grid) {\r\n  clearVisitedCells();\r\n  var path = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = false;\r\n    }\r\n  }\r\n  var numberOfCells = (grid.length - 1) * (grid[0].length - 1);\r\n\r\n  var wallAmount = Math.floor(numberOfCells * 0.4); //0.4 should be later replaced with the amount\r\n\r\n  for (let i = 0; i < wallAmount; i++) {\r\n    let row = Math.floor(Math.random() * (grid.length - 1));\r\n    let col = Math.floor(Math.random() * (grid[0].length - 1));\r\n\r\n    let cell = grid[row][col];\r\n    if (cell.start || cell.end || cell.isWall) {\r\n      i--;\r\n    } else {\r\n      cell.isWall = true;\r\n      path.push(cell);\r\n    }\r\n  }\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeRandom(grid, path);\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function primMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var path = [];\r\n  const wallPairs = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  getNeighboringWalls(grid[1][1], grid, wallPairs);\r\n  while (!!wallPairs.length) {\r\n    var currentPair = takeRandomPair(wallPairs);\r\n    if (!currentPair[1].isWall) {\r\n      continue;\r\n    }\r\n    currentPair[0].isWall = false;\r\n    currentPair[1].isWall = false;\r\n    path.push(currentPair[0]);\r\n    path.push(currentPair[1]);\r\n    getNeighboringWalls(currentPair[1], grid, wallPairs);\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getNeighboringWalls(cell, grid, wallPairs) {\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    wallPairs.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    wallPairs.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    wallPairs.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    wallPairs.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n\r\nfunction takeRandomPair(wallPairs) {\r\n  var position = Math.floor(Math.random() * wallPairs.length);\r\n  var pair = wallPairs[position];\r\n  wallPairs.splice(position, 1);\r\n  return pair;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function iterativeMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  var cellsWithUnvisitedNeighbors = [];\r\n  cellsWithUnvisitedNeighbors.push(currentCell);\r\n\r\n  while (!!cellsWithUnvisitedNeighbors.length) {\r\n    currentCell = takeLastCell(cellsWithUnvisitedNeighbors);\r\n    var neighboringUnvisitedPairs = getNeighboringCells(currentCell, grid);\r\n    if (neighboringUnvisitedPairs.length > 0) {\r\n      cellsWithUnvisitedNeighbors.push(currentCell);\r\n      var randomPair =\r\n        neighboringUnvisitedPairs[\r\n          Math.floor(Math.random() * neighboringUnvisitedPairs.length)\r\n        ];\r\n      randomPair[0].isWall = false;\r\n      randomPair[1].isWall = false;\r\n      randomPair[1].visited = true;\r\n      path.push(randomPair[0]);\r\n      path.push(randomPair[1]);\r\n      cellsWithUnvisitedNeighbors.push(randomPair[1]);\r\n    }\r\n  }\r\n\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction takeLastCell(cellsWithUnvisitedNeighbors) {\r\n  var position = cellsWithUnvisitedNeighbors.length - 1;\r\n  var cell = cellsWithUnvisitedNeighbors[position];\r\n  cellsWithUnvisitedNeighbors.splice(position, 1);\r\n  return cell;\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../cleaning\";\r\nimport { visualizeOnWalledGrid } from \"./animations\";\r\nexport function recursiveMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n    }\r\n  }\r\n  var currentCell = grid[1][1];\r\n  recursion(grid, currentCell, path);\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  //visualization\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction recursion(grid, currentCell, path) {\r\n  currentCell.visited = true;\r\n  currentCell.isWall = false;\r\n  path.push(currentCell);\r\n  currentCell.neighbors = getNeighboringCells(currentCell, grid);\r\n  while (currentCell.neighbors.length > 0) {\r\n    var position = Math.floor(Math.random() * currentCell.neighbors.length);\r\n    var randomPair = currentCell.neighbors[position];\r\n    currentCell.neighbors.splice(position, 1);\r\n    if (!randomPair[1].visited) {\r\n      randomPair[0].isWall = false;\r\n      path.push(randomPair[0]);\r\n      recursion(grid, randomPair[1], path);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  var neighboringUnvisitedPairs = []; //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    if (grid[row - 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row - 2][col]]);\r\n    }\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    if (grid[row][col + 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col + 2]]);\r\n    }\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    if (grid[row + 2][col].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row + 2][col]]);\r\n    }\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    if (grid[row][col - 2].visited === false) {\r\n      neighboringUnvisitedPairs.push([neighbor, grid[row][col - 2]]);\r\n    }\r\n  }\r\n\r\n  return neighboringUnvisitedPairs;\r\n}\r\n","import { visualizeABMaze } from \"../mazes/animations\";\r\nimport {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\n\r\nexport function aldousBroderMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var unvisitedCells = [];\r\n  var visualizationList = [];\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        cell.id = unvisitedCells.length;\r\n        unvisitedCells.push(cell);\r\n        getNeighboringCells(cell, grid);\r\n      }\r\n    }\r\n  }\r\n\r\n  var current = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  current.visited = true;\r\n  current.isWall = false;\r\n\r\n  while (!!unvisitedCells.length) {\r\n    var neighbor =\r\n      current.neighbors[Math.floor(Math.random() * current.neighbors.length)];\r\n    visualizationList.push(neighbor[0]);\r\n    visualizationList.push(neighbor[1]);\r\n    if (!neighbor[1].visited) {\r\n      neighbor[0].isWall = false;\r\n      neighbor[1].isWall = false;\r\n      unvisitedCells = unvisitedCells.filter(\r\n        (item) => item.id !== neighbor[1].id\r\n      );\r\n      neighbor[1].visited = true;\r\n    }\r\n    current = neighbor[1];\r\n  }\r\n  clearInfinityVariables(grid);\r\n  window.gridComponent.setState({ grid: grid });\r\n  visualizeABMaze(grid, visualizationList);\r\n}\r\n\r\n/*function takeRandomCell(unvisitedCells) {\r\n  var position = Math.floor(Math.random() * unvisitedCells.length);\r\n  var cell = unvisitedCells[0];\r\n  unvisitedCells.splice(0, 1);\r\n  return cell;\r\n}*/\r\n\r\nfunction getNeighboringCells(cell, grid) {\r\n  //pair[neighboringWall, neighbor]\r\n  var { col, row } = cell;\r\n  if (row > 1) {\r\n    //UP\r\n    var neighbor = grid[row - 1][col];\r\n    cell.neighbors.push([neighbor, grid[row - 2][col]]);\r\n  }\r\n  if (col < grid[0].length - 2) {\r\n    //Right\r\n    let neighbor = grid[row][col + 1];\r\n    cell.neighbors.push([neighbor, grid[row][col + 2]]);\r\n  }\r\n  if (row < grid.length - 2) {\r\n    //Down\r\n    let neighbor = grid[row + 1][col];\r\n    cell.neighbors.push([neighbor, grid[row + 2][col]]);\r\n  }\r\n  if (col > 1) {\r\n    //Left\r\n    let neighbor = grid[row][col - 1];\r\n    cell.neighbors.push([neighbor, grid[row][col - 2]]);\r\n  }\r\n}\r\n","import {\r\n  clearWithStatus,\r\n  clearInfinityVariables,\r\n} from \"../../Algorithms/cleaning\";\r\nimport { visualizeOnWalledGrid } from \"../mazes/animations\";\r\nexport function kruskalMaze(originalGrid) {\r\n  clearWithStatus(\"path\");\r\n  var path = [];\r\n  var grid = JSON.parse(JSON.stringify(originalGrid));\r\n  var idCounter = 0;\r\n  var validWalls = [];\r\n  var map = new Map();\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.isWall = true;\r\n      if (cell.row % 2 === 1 && cell.col % 2 === 1) {\r\n        //CELLS\r\n        map.set(cell, idCounter++);\r\n      } else if (cell.row % 2 === 1 || cell.col % 2 === 1) {\r\n        if (\r\n          cell.row !== 0 &&\r\n          cell.col !== 0 &&\r\n          cell.row !== grid.length - 1 &&\r\n          cell.col !== grid[0].length - 1\r\n        ) {\r\n          //WALLS\r\n          getSurroundingCells(cell, grid);\r\n          validWalls.push(cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shuffleArray(validWalls);\r\n\r\n  for (const wall of validWalls) {\r\n    var first = map.get(wall.neighbors[0]);\r\n    var second = map.get(wall.neighbors[1]);\r\n    if (first !== second) {\r\n      map.forEach((value, key) => {\r\n        if (value === second) {\r\n          map.set(key, first);\r\n        }\r\n      });\r\n\r\n      \r\n      wall.neighbors[0].isWall = false;\r\n      wall.isWall = false;\r\n      wall.neighbors[1].isWall = false;\r\n\r\n      if (!path.includes(wall.neighbors[0])) path.push(wall.neighbors[0]);\r\n      if (!path.includes(wall)) path.push(wall);\r\n      if (!path.includes(wall.neighbors[1])) path.push(wall.neighbors[1]);\r\n    }\r\n  }\r\n  clearInfinityVariables(grid);\r\n  visualizeOnWalledGrid(grid, path);\r\n}\r\n\r\nfunction getSurroundingCells(wall, grid) {\r\n  var { col, row } = wall;\r\n  if (wall.row % 2 === 1) {\r\n    wall.neighbors.push(grid[row][col + 1]);\r\n    wall.neighbors.push(grid[row][col - 1]);\r\n  } else {\r\n    wall.neighbors.push(grid[row - 1][col]);\r\n    wall.neighbors.push(grid[row + 1][col]);\r\n  }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n}\r\n","import { visualizeCell } from \"../methods\";\r\nimport { clearVisitedCells } from \"../cleaning\";\r\n\r\nexport function animateSlow(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length; i++) {\r\n    const cell = visitedCells[i];\r\n    if (i === visitedCells.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      if (cell.start && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-start\", cell);\r\n      }\r\n      if (cell.end && window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      if (!cell.isWall) {\r\n        if (!cell.start && !cell.end) {\r\n          visualizeCell(\"cell\", \"cell cell-visited-animated\", cell);\r\n          if (window.gridComponent.state.previousVisualization) {\r\n            visualizeCell(\"num\", \"num num-visited\", cell);\r\n          }\r\n        }\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animatePathSlow(cellsInOrder) {\r\n  for (let i = 0; i <= cellsInOrder.length; i++) {\r\n    setTimeout(() => {\r\n      if (i === cellsInOrder.length) {\r\n        window.gridComponent.setState({ status: \"finished\" });\r\n        return;\r\n      }\r\n      const cell = cellsInOrder[i];\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-path-animated\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-path\", cell);\r\n        }\r\n      }\r\n    }, 20 * i);\r\n  }\r\n}\r\n\r\nexport function animateFast(visitedCells, cellsInOrder) {\r\n  for (let i = 0; i <= visitedCells.length - 1; i++) {\r\n    const cell = visitedCells[i];\r\n\r\n    if (cell.start && window.gridComponent.state.previousVisualization) {\r\n      visualizeCell(\"num\", \"num num-start\", cell);\r\n    } else if (cell.end) {\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-end\", cell);\r\n      }\r\n      animatePathFast(cellsInOrder);\r\n    } else if (!cell.isWall) {\r\n      if (!cell.start && !cell.end) {\r\n        visualizeCell(\"cell\", \"cell cell-visited\", cell);\r\n        if (window.gridComponent.state.previousVisualization) {\r\n          visualizeCell(\"num\", \"num num-visited\", cell);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction animatePathFast(cellsInOrder) {\r\n  for (let i = 0; i < cellsInOrder.length; i++) {\r\n    const cell = cellsInOrder[i];\r\n    if (!cell.start && !cell.end) {\r\n      visualizeCell(\"cell\", \"cell cell-path\", cell);\r\n      if (window.gridComponent.state.previousVisualization) {\r\n        visualizeCell(\"num\", \"num num-path\", cell);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAstarSlow(allSet, cellsInOrder) {\r\n  for (let i = 0; i <= allSet.length; i++) {\r\n    if (i === allSet.length) {\r\n      setTimeout(() => {\r\n        animatePathSlow(cellsInOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      clearVisitedCells();\r\n      var openSet = allSet[i][0];\r\n      var closedSet = allSet[i][1];\r\n\r\n      for (let j = 0; j < closedSet.length; j++) {\r\n        if (!closedSet[j].start && !closedSet[j].end) {\r\n          visualizeCell(\"cell\", \"cell cell-previous\", closedSet[j]);\r\n        }\r\n      }\r\n      for (let k = 0; k < openSet.length; k++) {\r\n        if (!openSet[k].start && !openSet[k].end) {\r\n          visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n        }\r\n      }\r\n      if (\r\n        i < allSet.length - 1 &&\r\n        !closedSet[closedSet.length - 1].start &&\r\n        !closedSet[closedSet.length - 1].end\r\n      ) {\r\n        visualizeCell(\r\n          \"cell\",\r\n          \"cell cell-activepath\",\r\n          closedSet[closedSet.length - 1]\r\n        );\r\n      }\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nexport function animateAstarFast(allSet, openSet, cellsInOrder) {\r\n  clearVisitedCells();\r\n  for (let k = 0; k < allSet.length; k++) {\r\n    if (!allSet[k].start && !allSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-previous\", allSet[k]);\r\n    }\r\n  }\r\n  for (let k = 0; k < openSet.length; k++) {\r\n    if (!openSet[k].start && !openSet[k].end) {\r\n      visualizeCell(\"cell\", \"cell cell-current\", openSet[k]);\r\n    }\r\n  }\r\n  animatePathFast(cellsInOrder);\r\n}","import { animateFast, animateSlow } from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\nvar id = 0;\r\nexport function dijkstra(grid, startCell, endCell, isDiagonalOn, speed) {\r\n  const unvisitedCells = [];\r\n  const visitedCells = [];\r\n  var direction = \"START\";\r\n  var previousRow = startCell.row;\r\n  startCell.distance = 0;\r\n\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      unvisitedCells.push(cell);\r\n    }\r\n  }\r\n\r\n  while (!!unvisitedCells.length) {\r\n    unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n    unvisitedCells.sort((cell1, cell2) => cell1.distance - cell2.distance);\r\n\r\n    const nextCell = unvisitedCells.shift();\r\n    if (direction !== \"START\") {\r\n      if (nextCell.row < previousRow) {\r\n        direction = \"UP\";\r\n      } else {\r\n        direction = \"DOWN\";\r\n      }\r\n    }\r\n\r\n    if (nextCell.isWall && !nextCell.start && !nextCell.end) continue;\r\n\r\n    if (nextCell.distance === Infinity) {\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n    nextCell.visited = true;\r\n    visitedCells.push(nextCell);\r\n    if (nextCell === endCell) {\r\n      unvisitedCells.sort((cell1, cell2) => cell1.id - cell2.id);\r\n      DoAnimation(visitedCells, endCell, speed);\r\n      return;\r\n    }\r\n\r\n    getUnvisitedNeighbors(nextCell, grid, direction, isDiagonalOn);\r\n    if (direction !== \"START\") {\r\n      previousRow = nextCell.row;\r\n    }\r\n    direction = \"CHANGED\";\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(cell, grid, direction, isDiagonalOn) {\r\n  const neighbors = [];\r\n  var { col, row } = cell;\r\n\r\n  if (direction === \"DOWN\" || direction === \"START\") {\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n    }\r\n  } else if (direction === \"UP\") {\r\n    Down(row, col, grid, neighbors);\r\n    Left(row, col, grid, neighbors);\r\n    Up(row, col, grid, neighbors);\r\n    Right(row, col, grid, neighbors);\r\n    if (isDiagonalOn) {\r\n      DownLeft(row, col, grid, neighbors);\r\n      LeftUp(row, col, grid, neighbors);\r\n      UpRight(row, col, grid, neighbors);\r\n      RightDown(row, col, grid, neighbors);\r\n    }\r\n  }\r\n\r\n  for (const neighbor of neighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previous = cell;\r\n    neighbor.id = id;\r\n    id++;\r\n  }\r\n}\r\n\r\nfunction Up(row, col, grid, neighbors) {\r\n  if (row > 0) {\r\n    var cell = grid[row - 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Right(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1) {\r\n    let cell = grid[row][col + 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Down(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1) {\r\n    let cell = grid[row + 1][col];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction Left(row, col, grid, neighbors) {\r\n  if (col > 0) {\r\n    let cell = grid[row][col - 1];\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction UpRight(row, col, grid, neighbors) {\r\n  if (row > 0 && col < grid[0].length - 1) {\r\n    let cell = grid[row - 1][col + 1];\r\n    if (grid[row - 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction RightDown(row, col, grid, neighbors) {\r\n  if (col < grid[0].length - 1 && row < grid.length - 1) {\r\n    let cell = grid[row + 1][col + 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col + 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DownLeft(row, col, grid, neighbors) {\r\n  if (row < grid.length - 1 && col > 0) {\r\n    let cell = grid[row + 1][col - 1];\r\n    if (grid[row + 1][col].isWall && grid[row][col - 1].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction LeftUp(row, col, grid, neighbors) {\r\n  if (col > 0 && row > 0) {\r\n    let cell = grid[row - 1][col - 1];\r\n    if (grid[row][col - 1].isWall && grid[row - 1][col].isWall) {\r\n      return;\r\n    }\r\n    if (!cell.visited && cell.previous === null) {\r\n      neighbors.push(cell);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(visitedCells, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateSlow(visitedCells, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateFast(visitedCells, cellsInOrder);\r\n  }\r\n}\r\n","import {\r\n  animateAstarSlow,\r\n  animateAstarFast,\r\n} from \"./animations\";\r\nimport { getCellsInOrder } from \"../../Algorithms/methods\";\r\nimport { clearVisitedCells } from \"../../Algorithms/cleaning\";\r\n\r\nexport function astar(\r\n  grid,\r\n  startCell,\r\n  endCell,\r\n  isDiagonalOn,\r\n  optimized,\r\n  speed\r\n) {\r\n  findNeighbors(grid, isDiagonalOn);\r\n  const openSet = [];\r\n  const cameFrom = [];\r\n  var allSet = [];\r\n  openSet.push(startCell);\r\n  startCell.g = 0;\r\n  startCell.f = heuristic(startCell, endCell, isDiagonalOn, optimized);\r\n\r\n  while (!!openSet.length) {\r\n    var current = 0;\r\n    for (let j = 0; j < openSet.length; j++) {\r\n      if (openSet[j].f < openSet[current].f) {\r\n        current = j;\r\n      }\r\n    }\r\n    var currentCell = openSet[current];    \r\n    if (currentCell === endCell) {\r\n      console.log(endCell.end);\r\n      DoAnimation(allSet, openSet, endCell, speed);\r\n      return;\r\n    }\r\n    eliminateFromSet(openSet, currentCell);\r\n    var neighbors = currentCell.neighbors;\r\n    for (let k = 0; k < neighbors.length; k++) {\r\n      var neighbor = neighbors[k];\r\n      if (neighbor.isWall && !neighbor.start && !neighbor.end) {\r\n        continue;\r\n      }\r\n      var tentative_gScore =\r\n        currentCell.g + dScore(neighbor, currentCell, optimized);\r\n      if (tentative_gScore < neighbor.g) {\r\n        cameFrom.push(neighbor);\r\n        neighbor.g = tentative_gScore;\r\n        neighbor.h = heuristic(neighbor, endCell, isDiagonalOn, optimized);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previous = currentCell;\r\n        if (!openSet.includes(neighbor)) {\r\n          openSet.push(neighbor);\r\n          if (speed === \"slow\") {\r\n            allSet.push([openSet.slice(0), cameFrom.slice(0)]);\r\n          } else if (speed === \"fast\") {\r\n            allSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  DoAnimation(allSet, openSet, endCell, speed);\r\n}\r\nfunction dScore(cell1, cell2, optimized) {\r\n  if (optimized) {\r\n    return cell1.row - cell2.row === 0 || cell1.col - cell2.col === 0\r\n      ? 1\r\n      : Math.SQRT2;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\nfunction heuristic(cell1, cell2, isDiagonalOn, optimized) {\r\n  if (isDiagonalOn || !optimized) {\r\n    return Math.abs(cell1.row - cell2.row) + Math.abs(cell1.col - cell2.col);\r\n  } else {\r\n    if (optimized) {\r\n      return Math.sqrt(\r\n        (cell1.row - cell2.row) * (cell1.row - cell2.row) +\r\n          (cell1.col - cell2.col) * (cell1.col - cell2.col)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNeighbors(grid, isDiagonalOn) {\r\n  for (const row of grid) {\r\n    for (const cell of row) {\r\n      cell.neighbors = [];\r\n      if (cell.row > 0) {\r\n        //UP\r\n        cell.neighbors.push(grid[cell.row - 1][cell.col]);\r\n      }\r\n      if (cell.col < grid[0].length - 1) {\r\n        //RIGHT\r\n        cell.neighbors.push(grid[cell.row][cell.col + 1]);\r\n      }\r\n\r\n      if (cell.row < grid.length - 1) {\r\n        //DOWN\r\n        cell.neighbors.push(grid[cell.row + 1][cell.col]);\r\n      }\r\n\r\n      if (cell.col > 0) {\r\n        //LEFT\r\n        cell.neighbors.push(grid[cell.row][cell.col - 1]);\r\n      }\r\n      if (isDiagonalOn) {\r\n        if (cell.row > 0 && cell.col < grid[0].length - 1) {\r\n          //UPRIGHT\r\n          if (\r\n            !grid[cell.row - 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.col < grid[0].length - 1 && cell.row < grid.length - 1) {\r\n          //RIGHTDOWN\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col + 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col + 1]);\r\n          }\r\n        }\r\n        if (cell.row < grid.length - 1 && cell.col > 0) {\r\n          //DOWNLEFT\r\n          if (\r\n            !grid[cell.row + 1][cell.col].isWall ||\r\n            !grid[cell.row][cell.col - 1].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row + 1][cell.col - 1]);\r\n          }\r\n        }\r\n        if (cell.col > 0 && cell.row > 0) {\r\n          //LEFTUP\r\n          if (\r\n            !grid[cell.row][cell.col - 1].isWall ||\r\n            !grid[cell.row - 1][cell.col].isWall\r\n          ) {\r\n            cell.neighbors.push(grid[cell.row - 1][cell.col - 1]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction eliminateFromSet(set, cell) {\r\n  for (let i = set.length - 1; i >= 0; i--) {\r\n    if (set[i] === cell) {\r\n      set.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction DoAnimation(allSet, openSet, endCell, speed) {\r\n  const cellsInOrder = getCellsInOrder(endCell);\r\n  if (speed === \"slow\") {\r\n    if (window.gridComponent.state.status === \"finished\") {\r\n      clearVisitedCells();\r\n    }\r\n    window.gridComponent.setState({ status: \"running\" });\r\n\r\n    animateAstarSlow(allSet, cellsInOrder);\r\n  } else if (speed === \"fast\") {\r\n    animateAstarFast(allSet, openSet, cellsInOrder);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport \"./index.css\";\r\nimport { createGrid, placeWall } from \"../Algorithms/methods\";\r\nimport { clearVisitedCells, clearWithStatus } from \"../Algorithms/cleaning\";\r\nimport { getRandomMazedGrid } from \"../Algorithms/mazes/default\";\r\nimport { primMaze } from \"../Algorithms/mazes/prim\";\r\nimport { iterativeMaze } from \"../Algorithms/mazes/iterativeDF\";\r\nimport { recursiveMaze } from \"../Algorithms/mazes/recursiveDF\";\r\nimport { aldousBroderMaze } from \"../Algorithms/mazes/aldousBroder\";\r\nimport { kruskalMaze } from \"../Algorithms/mazes/kruskal\";\r\nimport { dijkstra } from \"../Algorithms/searchers/dijsktra\";\r\nimport { astar } from \"../Algorithms/searchers/astar\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(props),\r\n      isMouseDown: false,\r\n      isStartOn: false,\r\n      isEndOn: false,\r\n      startRow: props.startR,\r\n      startCol: props.startC,\r\n      endRow: props.endR,\r\n      endCol: props.endC,\r\n      status: \"pending\",\r\n      currentAlg: \"dijkstra\",\r\n      currentMaze: \"default\",\r\n      previousVisualization: false,\r\n      diagonalVisualization: true,\r\n      optimizedVisualization: true,\r\n    };\r\n    this.handleAlgoChange = this.handleAlgoChange.bind(this);\r\n    this.handleButtonChange = this.handleButtonChange.bind(this);\r\n    this.handleMazeChange = this.handleMazeChange.bind(this);\r\n    window.gridComponent = this;\r\n  }\r\n\r\n  handleAlgoChange(event) {\r\n    this.setState({ currentAlg: event.target.value });\r\n  }\r\n  handleButtonChange(event) {\r\n    if (event.target.name === \"distance\") {\r\n      this.setState(\r\n        { previousVisualization: !this.state.previousVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            if (this.state.currentAlg === \"dijkstra\") {\r\n              this.doAlgorithm(\"fast\");\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"diagonal\") {\r\n      this.setState(\r\n        { diagonalVisualization: !this.state.diagonalVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    } else if (event.target.name === \"optimized\") {\r\n      this.setState(\r\n        { optimizedVisualization: !this.state.optimizedVisualization },\r\n        () => {\r\n          if (this.state.status === \"finished\") {\r\n            clearVisitedCells();\r\n            this.doAlgorithm(\"fast\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleMazeChange(event) {\r\n    if (event.target.value === \"random\") {\r\n      getRandomMazedGrid(this.state.grid);\r\n    } else if (event.target.value === \"prim\") {\r\n      primMaze(this.state.grid);\r\n    } else if (event.target.value === \"iterative\") {\r\n      iterativeMaze(this.state.grid);\r\n    } else if (event.target.value === \"recursive\") {\r\n      recursiveMaze(this.state.grid);\r\n    } else if (event.target.value === \"aldousBroder\"){\r\n      aldousBroderMaze(this.state.grid);\r\n    }else if (event.target.value === \"kruskal\"){\r\n      kruskalMaze(this.state.grid);\r\n    }\r\n  }\r\n\r\n  onMouseDown = (cell) => {\r\n    if (this.state.status === \"running\") {\r\n      return;\r\n    }\r\n    this.setState({ isMouseDown: true });\r\n    if (cell.start) {\r\n      this.setState({ isStartOn: true });\r\n      return;\r\n    }\r\n    if (cell.end) {\r\n      this.setState({ isEndOn: true });\r\n      return;\r\n    }\r\n    placeWall(cell);\r\n  };\r\n\r\n  onMouseEnter = (cell) => {\r\n    if (this.state.isMouseDown) {\r\n      if (cell.start || cell.end) {\r\n        return;\r\n      }\r\n      if (this.state.isStartOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.startRow][this.state.startCol].start = false;\r\n        newGrid[cell.row][cell.col].start = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            startRow: cell.row,\r\n            startCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      } else if (this.state.isEndOn) {\r\n        let newGrid = this.state.grid.slice();\r\n        newGrid[this.state.endRow][this.state.endCol].end = false;\r\n        newGrid[cell.row][cell.col].end = true;\r\n        this.setState(\r\n          {\r\n            grid: newGrid,\r\n            endRow: cell.row,\r\n            endCol: cell.col,\r\n          },\r\n          () => {\r\n            if (this.state.status === \"finished\") {\r\n              clearVisitedCells();\r\n              this.doAlgorithm(\"fast\");\r\n            } else {\r\n              clearWithStatus(\"path\");\r\n            }\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      placeWall(cell);\r\n    }\r\n  };\r\n  onMouseUp = () => {\r\n    this.setState({ isMouseDown: false, isStartOn: false, isEndOn: false });\r\n  };\r\n\r\n  doAlgorithm = (speed) => {\r\n    let { grid } = this.state;\r\n    const startCell = grid[this.state.startRow][this.state.startCol];\r\n    const endCell = grid[this.state.endRow][this.state.endCol];\r\n\r\n    if (this.state.currentAlg === \"dijkstra\") {\r\n      dijkstra(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        speed\r\n      );\r\n    } else if (this.state.currentAlg === \"astar\") {\r\n      astar(\r\n        grid,\r\n        startCell,\r\n        endCell,\r\n        this.state.diagonalVisualization,\r\n        this.state.optimizedVisualization,\r\n        speed\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let grid = this.state.grid.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            return (\r\n              <Cell\r\n                key={cellIndex}\r\n                data={cell}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseUp={this.onMouseUp}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"grid\" onMouseLeave={this.onMouseUp}>\r\n          {grid}\r\n        </div>\r\n        <select\r\n          value={this.state.currentAlg}\r\n          onChange={this.handleAlgoChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"dijkstra\">Dijkstra</option>\r\n          <option value=\"astar\">A* Search</option>\r\n        </select>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => this.doAlgorithm(\"slow\")}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"path\");\r\n          }}\r\n        >\r\n          Clear path\r\n        </button>\r\n        <button\r\n          disabled={this.state.status === \"running\"}\r\n          onClick={() => {\r\n            clearWithStatus(\"grid\");\r\n          }}\r\n        >\r\n          Clear grid\r\n        </button>\r\n        Distance\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"astar\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.previousVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"distance\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Diagonal\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={this.state.status === \"running\"}\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.diagonalVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"diagonal\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        Optimized\r\n        <label className=\"switch\">\r\n          <input\r\n            disabled={\r\n              this.state.status === \"running\" ||\r\n              this.state.currentAlg === \"dijkstra\"\r\n            }\r\n            type=\"checkbox\"\r\n            defaultChecked={this.state.optimizedVisualization}\r\n            onChange={this.handleButtonChange}\r\n            name=\"optimized\"\r\n          ></input>\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <select\r\n          value={this.state.currentMaze}\r\n          onChange={this.handleMazeChange}\r\n          disabled={this.state.status === \"running\"}\r\n        >\r\n          <option value=\"default\" disabled hidden>\r\n            Mazes\r\n          </option>\r\n          <option value=\"random\">Random</option>\r\n          <option value=\"prim\">Prim</option>\r\n          <option value=\"iterative\">Iterative Depth-first</option>\r\n          <option value=\"recursive\">Recursive Depth-first</option>\r\n          <option value=\"aldousBroder\">Aldous-Broder</option>\r\n          <option value=\"kruskal\">Kruskal</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"../../path-finder/src/Grid\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: this.getSize(\"row\"),\r\n      columns: this.getSize(\"col\"),\r\n      startR: this.getPosition(\"row\"),\r\n      startC: this.getPosition(\"startCol\"),\r\n      endR: this.getPosition(\"row\"),\r\n      endC: this.getPosition(\"endCol\"),\r\n    };\r\n  }\r\n\r\n  getPosition = (parameter) => {\r\n    let position = null;\r\n    if (parameter === \"row\") {\r\n      position = Math.floor(this.getSize(\"row\") / 2);\r\n    } else if (parameter === \"startCol\") {\r\n      position = Math.floor(this.getSize(\"col\") / 5);\r\n    } else if (parameter === \"endCol\") {\r\n      let x = this.getSize(\"col\");\r\n      let margin = Math.ceil(x / 5);\r\n      position = x - margin;\r\n    }\r\n    return position % 2 === 0 ? position + 1 : position;\r\n    // return position;\r\n  };\r\n\r\n  getSize = (type) => {\r\n    let size = null;\r\n    if (type === \"row\") {\r\n      size = (window.innerHeight / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    } else if (type === \"col\") {\r\n      size = (window.innerWidth / 30).toFixed(0) - 5;\r\n      if (size < 10) {\r\n        return 9;\r\n      }\r\n    }\r\n    if (size % 2 === 0) {\r\n      size--;\r\n    }\r\n    return size;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          startR={this.state.startR}\r\n          startC={this.state.startC}\r\n          endR={this.state.endR}\r\n          endC={this.state.endC}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}